{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyQGIS\u5f00\u53d1\u8005\u624b\u518c \u2693\ufe0e \u672c\u9879\u76ee\u662fPyQGIS\u5f00\u53d1\u8005\u624b\u518c\u7684\u4e2d\u6587\u7ffb\u8bd1\u3002 \u5982\u679c\u60a8\u5728\u9605\u8bfb\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4efb\u4f55\u95ee\u9898\uff0c \u6b22\u8fce\u6307\u6b63 \u3002 \u5982\u679c\u672c\u9879\u76ee\u6709\u5e2e\u5230\u60a8\uff0c\u60a8\u53ef\u4ee5\u8003\u8651\u8bf7\u6211\u559d\u4e00\u676f\u5976\u8336\ud83d\ude0a","title":"\u4e3b\u9875"},{"location":"#pyqgis","text":"\u672c\u9879\u76ee\u662fPyQGIS\u5f00\u53d1\u8005\u624b\u518c\u7684\u4e2d\u6587\u7ffb\u8bd1\u3002 \u5982\u679c\u60a8\u5728\u9605\u8bfb\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4efb\u4f55\u95ee\u9898\uff0c \u6b22\u8fce\u6307\u6b63 \u3002 \u5982\u679c\u672c\u9879\u76ee\u6709\u5e2e\u5230\u60a8\uff0c\u60a8\u53ef\u4ee5\u8003\u8651\u8bf7\u6211\u559d\u4e00\u676f\u5976\u8336\ud83d\ude0a","title":"PyQGIS\u5f00\u53d1\u8005\u624b\u518c"},{"location":"1-%E5%BC%95%E8%A8%80/","text":"1 \u5f15\u8a00 \u2693\ufe0e \u672c\u6587\u6863\u65e2\u53ef\u4f5c\u4e3a\u6559\u7a0b\uff0c\u4e5f\u53ef\u4f5c\u4e3a\u53c2\u8003\u6307\u5357\u3002\u867d\u7136\u6ca1\u6709\u5217\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u6848\u4f8b\uff0c\u4f46\u662f\u5bf9\u4e3b\u8981\u529f\u80fd\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6982\u8ff0\u3002 \u5bf9\u4e8ePython\u7684\u652f\u6301\u6700\u521d\u662f\u5728QGIS 0.9\u4e2d\u5f15\u5165\u7684\u3002 \u76ee\u524d\uff0c\u5728QGIS\u684c\u9762\u7248\u4e2d\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u7528Python\uff0c\u5982\u4e0b\uff1a \u5728QGIS\u7684Python\u63a7\u5236\u53f0\u4e2d \u521b\u5efa\u5e76\u4f7f\u7528\u63d2\u4ef6 QGIS\u542f\u52a8\u65f6\u81ea\u52a8\u8fd0\u884cPython\u4ee3\u7801 \u521b\u5efa\u5904\u7406\u7b97\u6cd5 \u5728QGIS\u4e2d\u4e3a\u8868\u8fbe\u5f0f\u521b\u5efa\u51fd\u6570 \u57fa\u4e8eQGIS API\u521b\u5efa\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f Python\u652f\u6301\u5728QGIS 0.9\u4e2d\u9996\u6b21\u5f15\u5165\u3002\u8fd9\u91cc\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5728QGIS\u684c\u9762\u8f6f\u4ef6\u4e2d\u4f7f\u7528Python\uff08\u6db5\u76d6\u4e00\u4e0b\u90e8\u5206\uff09\uff1a \u5728QGIS\u4e2d\u7684Python\u63a7\u5236\u53f0\u4e2d\u4f7f\u7528\u547d\u4ee4 \u521b\u5efa\u5e76\u4f7f\u7528\u63d2\u4ef6 \u5f53QGIS\u542f\u52a8\u65f6\u81ea\u52a8\u8fd0\u884cPython\u4ee3\u7801 \u521b\u5efa\u5904\u7406\u7b97\u6cd5 \u5728QGIS\u4e2d\u521b\u5efa\u51fd\u6570\u8868\u8fbe\u5f0f \u57fa\u4e8eQGIS API\u521b\u5efa\u81ea\u5b9a\u4e49\u5e94\u7528 Python\u7ed1\u5b9a\u4e5f\u53ef\u7528\u4e8eQGIS\u670d\u52a1\uff0c\u5305\u62ecPython\u63d2\u4ef6\uff08\u8bf7\u53c2\u9605 20-QGIS\u670d\u52a1\u5668\u548cPython \uff09\u548cPython\u7ed1\u5b9a\uff0c\u53ef\u7528\u4e8e\u5c06QGIS\u670d\u52a1\u5d4c\u5165\u5230Python\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a \u5b8c\u6574\u7684QGIS C++ API \u53c2\u8003\u2014\u2014\u7528\u4e8e\u8bb0\u5f55QGIS\u5e93\u4e2d\u7684\u7c7b\u3002 Pythonic QGIS API\uff08pyqgis\uff09 \u51e0\u4e4e\u4e0eC ++ API\u76f8\u540c\u3002 \u5b66\u4e60\u6267\u884c\u5e38\u89c1\u4efb\u52a1\u7684\u53e6\u4e00\u4e2a\u597d\u529e\u6cd5\u662f\u4ece \u63d2\u4ef6\u4ed3\u5e93 \u4e0b\u8f7d\u73b0\u6709\u63d2\u4ef6\u5e76\u5b66\u4e60\u5b83\u4eec\u7684\u4ee3\u7801\u3002 1.1 \u5728Python\u63a7\u5236\u53f0\u4e2d\u7f16\u5199\u811a\u672c \u2693\ufe0e QGIS\u4e3a\u811a\u672c\u7f16\u5199\u63d0\u4f9b\u4e86\u4e00\u4e2a\u96c6\u6210\u7684python\u63a7\u5236\u53f0\u3002\u53ef\u4ee5\u4ece\u63d2\u4ef6\u2192python\u63a7\u5236\u53f0\u83dc\u5355\u4e2d\u6253\u5f00\uff1a \u4e0a\u9762\u7684\u622a\u56fe\u8bf4\u660e\u4e86\u5982\u4f55\u83b7\u53d6\u56fe\u5c42\u5217\u8868\u4e2d\u5f53\u524d\u9009\u5b9a\u7684\u56fe\u5c42\uff0c\u5e76\u663e\u793a\u5176ID\uff0c\u5982\u679c\u662f\u77e2\u91cf\u56fe\u5c42\uff0c\u8fd8\u53ef\u4ee5\u663e\u793a\u8981\u7d20\u4e2a\u6570\u3002\u5bf9\u4e8e\u4e0eQGIS\u4ea4\u4e92\u73af\u5883\uff0c\u6709\u4e00\u4e2a iface \u53d8\u91cf\uff0c\u5b83\u662f QgisInterface \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u6b64\u63a5\u53e3\u5141\u8bb8\u8bbf\u95ee\u5730\u56fe\u753b\u5e03\u3001\u83dc\u5355\u3001\u5de5\u5177\u680f\u548cQGIS\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206\u3002 \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\uff0c\u5728\u542f\u52a8\u63a7\u5236\u53f0\u65f6\u5c06\u4f1a\u6267\u884c\u4ee5\u4e0b\u8bed\u53e5\uff08\u5c06\u6765\u53ef\u4ee5\u8bbe\u7f6e\u66f4\u591a\u7684\u521d\u59cb\u547d\u4ee4\uff09 1 2 from qgis.core import * import qgis.utils \u5bf9\u4e8e\u7ecf\u5e38\u4f7f\u7528\u63a7\u5236\u53f0\u7684\u7528\u6237\uff0c\u8bbe\u7f6e\u6253\u5f00\u63a7\u5236\u53f0\u7684\u5feb\u6377\u952e\u53ef\u80fd\u5f88\u6709\u7528\uff08\u5728\u8bbe\u7f6e\u2192\u952e\u76d8\u5feb\u6377\u952e\u4e2d...\uff09 1.2 Python\u63d2\u4ef6 \u2693\ufe0e \u53ef\u4ee5\u4f7f\u7528\u63d2\u4ef6\u6765\u6269\u5c55QGIS\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u4f7f\u7528Python\u7f16\u5199\u63d2\u4ef6\u3002\u4e0eC ++\u63d2\u4ef6\u76f8\u6bd4\uff0c\u4e3b\u8981\u4f18\u70b9\u662f\u5206\u53d1\u7b80\u5355\uff08\u4e0d\u5bf9\u6bcf\u4e2a\u5e73\u53f0\u8fdb\u884c\u7f16\u8bd1\uff09\u3001\u66f4\u5bb9\u6613\u7684\u5f00\u53d1\u3002 \u81ea\u4ece\u5f15\u5165\u5bf9Python\u7684\u652f\u6301\u4ee5\u6765\uff0c\u5df2\u7ecf\u7f16\u5199\u4e86\u8bb8\u591a\u6db5\u76d6\u5404\u79cd\u529f\u80fd\u7684\u63d2\u4ef6\u3002\u63d2\u4ef6\u5b89\u88c5\u7a0b\u5e8f\u5141\u8bb8\u7528\u6237\u5f88\u5bb9\u6613\u83b7\u53d6\u3001\u5347\u7ea7\u548c\u5220\u9664Python\u63d2\u4ef6\u3002\u6709\u5173\u63d2\u4ef6\u548c\u63d2\u4ef6\u5f00\u53d1\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Python\u63d2\u4ef6 \u9875\u9762\u3002 \u4f7f\u7528Python\u521b\u5efa\u63d2\u4ef6\u5f88\u7b80\u5355\uff0c\u8be6\u7ec6\u8bf4\u660e\u8bf7\u53c2\u9605 16-\u5f00\u53d1Python\u63d2\u4ef6 \u3002 \u63d0\u793a Python\u63d2\u4ef6\u4e5f\u53ef\u7528\u4e8eQGIS\u670d\u52a1\uff0c\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 20-QGIS\u670d\u52a1\u5668\u548cPython \u3002 1.2.1 \u5904\u7406\u63d2\u4ef6 \u2693\ufe0e \u5904\u7406\u63d2\u4ef6\u53ef\u88ab\u7528\u4e8e\u5904\u7406\u6570\u636e\u3002\u5b83\u4eec\u6bd4Python\u63d2\u4ef6\u66f4\u5bb9\u6613\u5f00\u53d1\u3001\u66f4\u5177\u4f53\u3001\u66f4\u8f7b\u91cf\u3002 17-\u7f16\u5199\u5904\u7406\u63d2\u4ef6 \u9610\u8ff0\u4e86\u4ec0\u4e48\u65f6\u5019\u8be5\u4f7f\u7528\u5904\u7406\u7b97\u6cd5\uff0c\u5e76\u4e14\u600e\u4e48\u5f00\u53d1\u5b83\u4eec\u3002 1.3 QGIS\u542f\u52a8\u65f6\u8fd0\u884cPython\u4ee3\u7801 \u2693\ufe0e \u6bcf\u6b21QGIS\u542f\u52a8\u65f6\uff0c\u90fd\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u8fd0\u884cPython\u4ee3\u7801\u3002 \u521b\u5efastartup.py\u811a\u672c \u5c06 PYQGIS_STARTUP \u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u73b0\u6709Python\u6587\u4ef6 1.3.1 startup.py\u6587\u4ef6 \u2693\ufe0e \u6bcf\u6b21QGIS\u542f\u52a8\u65f6\uff0c\u7528\u6237\u7684Python\u4e3b\u76ee\u5f55\u90fd\u4f1a\u5728\u4ee5\u4e0b\u76ee\u5f55\u641c\u7d22\u540d\u4e3a startup.py \u7684\u6587\u4ef6\u3002 \u5982\u679c\u8be5\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u7531\u5d4c\u5165\u5f0fPython\u89e3\u91ca\u5668\u6267\u884c\u3002 Linux\uff1a .local/share/QGIS/QGIS3 Windows\uff1a AppData\\Roaming\\QGIS\\QGIS3 macOS\uff1a Library/Application Support/QGIS/QGIS3 \u63d0\u793a \u9ed8\u8ba4\u8def\u5f84\u53d6\u51b3\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u3002\u8981\u67e5\u627e\u9002\u5408\u4f60\u7684\u8def\u5f84\uff0c\u6253\u5f00Python\u63a7\u5236\u53f0\uff0c\u5e76\u8fd0\u884c QStandardPaths.standardLocations(QStandardPaths.AppDataLocation) \u67e5\u770b\u9ed8\u8ba4\u76ee\u5f55\u5217\u8868\u3002 1.3.2 PYQGIS_STARTUP\u73af\u5883\u53d8\u91cf \u2693\ufe0e \u4f60\u53ef\u4ee5\u5728QGIS\u521d\u59cb\u5316\u5b8c\u6210\u4e4b\u524d\u5c06 PYQGIS_STARTUP \u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u73b0\u6709Python\u6587\u4ef6\u7684\u8def\u5f84\u6765\u8fd0\u884cPython\u4ee3\u7801\u3002 \u6b64\u4ee3\u7801\u5c06\u5728QGIS\u521d\u59cb\u5316\u5b8c\u6210\u4e4b\u524d\u8fd0\u884c\u3002\u6b64\u65b9\u6cd5\u5bf9\u4e8e\u6e05\u7406sys.path\u975e\u5e38\u6709\u7528\u2014\u2014\u53ef\u80fd\u5b58\u5728\u4e0d\u9700\u8981\u7684\u8def\u5f84\uff0c\u6216\u7528\u4e8e\u9694\u79bb/\u52a0\u8f7d\u521d\u59cb\u73af\u5883\u2014\u2014\u65e0\u9700\u865a\u62df\u73af\u5883\uff0c\u4f8b\u5982\u5728Mac\u4e0a\u4f7f\u7528homebrew\u6216MacPorts\u3002 1.4 Python\u5e94\u7528\u7a0b\u5e8f \u2693\ufe0e \u4e3a\u81ea\u52a8\u5316\u6d41\u7a0b\u521b\u5efa\u811a\u672c\u901a\u5e38\u5f88\u65b9\u4fbf\u3002\u4f7f\u7528PyQGIS\uff0c\u8fd9\u662f\u5b8c\u5168\u53ef\u80fd\u7684\u2014\u2014\u5bfc\u5165 qgis.core \u6a21\u5757\uff0c\u521d\u59cb\u5316\u5b83\uff0c\u4f60\u5c31\u53ef\u4ee5\u8fdb\u884c\u5904\u7406\u4e86\u3002 \u6216\u8005\u4f60\u53ef\u80fd\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528GIS\u529f\u80fd\u7684\u4ea4\u4e92\u5f0f\u5e94\u7528\u7a0b\u5e8f\u2014\u2014\u6267\u884c\u6d4b\u91cf\u3001\u5c06\u5730\u56fe\u5bfc\u51fa\u4e3aPDF\u6216\u4efb\u4f55\u5176\u4ed6\u529f\u80fd\u3002 qgis.gui \u6a21\u5757\u63d0\u4f9b\u4e86\u5404\u79cdGUI\u90e8\u4ef6\uff0c\u6700\u503c\u5f97\u6ce8\u610f\u7684\u662f\u53ef\u4ee5\u5408\u5e76\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u5730\u56fe\u753b\u5e03\u63a7\u4ef6\u2014\u2014\u652f\u6301\u7f29\u653e\uff0c\u5e73\u79fb\u548c\u4efb\u4f55\u5176\u4ed6\u81ea\u5b9a\u4e49\u5730\u56fe\u5de5\u5177\u3002 \u5fc5\u987b\u914d\u7f6ePyQGIS\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u6216\u72ec\u7acb\u811a\u672c\u4ee5\u5b9a\u4f4dQGIS\u8d44\u6e90\uff0c\u4f8b\u5982\u6295\u5f71\u4fe1\u606f\uff0c\u7528\u4e8e\u8bfb\u53d6\u77e2\u91cf\u548c\u6805\u683c\u56fe\u5c42\u7684\u6570\u636e\u63d0\u4f9b\u8005\u7b49\u3002QGIS\u8d44\u6e90\u901a\u8fc7\u5728\u5e94\u7528\u7a0b\u5e8f\u6216\u811a\u672c\u7684\u5f00\u5934\u6dfb\u52a0\u51e0\u884c\uff08\u4ee3\u7801\uff09\u6765\u521d\u59cb\u5316\u3002\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u548c\u72ec\u7acb\u811a\u672c\u521d\u59cb\u5316QGIS\u7684\u4ee3\u7801\u7c7b\u4f3c\u3002\u4ee5\u4e0b\u63d0\u4f9b\u5404\u81ea\u7684\u5b9e\u4f8b\u3002 \u63d0\u793a \u5343\u4e07\u4e0d\u80fd\u4f7f\u7528 qgis.py \u4f5c\u4e3a\u4f60\u7684\u6d4b\u8bd5\u811a\u672c\u7684\u540d\u79f0\uff0c\u5426\u5219Python\u5c06\u65e0\u6cd5\u5bfc\u5165\u7ed1\u5b9a\u3002 1.4.1 \u5728\u72ec\u7acb\u811a\u672c\u4e2d\u4f7f\u7528PyQGIS \u2693\ufe0e \u542f\u52a8\u72ec\u7acb\u811a\u672c\uff0c\u5728\u811a\u672c\u5f00\u5934\u521d\u59cb\u5316QGIS\u8d44\u6e90\uff0c\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 from qgis.core import * # \u63d0\u4f9bqgis\u5b89\u88c5\u4f4d\u7f6e\u7684\u8def\u5f84(windows\u9ed8\u8ba4\uff1aC:\\Program Files\\QGIS 3.x\\apps\\qgis-ltr) QgsApplication . setPrefixPath ( \"/path/to/qgis/installation\" , True ) # \u521b\u5efa\u5bf9QgsApplication\u7684\u5f15\u7528\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3aFalse\u5c06\u7981\u7528GUI qgs = QgsApplication ([], False ) # \u52a0\u8f7d\u63d0\u4f9b\u8005 qgs . initQgis () # \u5728\u8fd9\u91cc\u7f16\u5199\u4ee3\u7801\uff0c\u52a0\u8f7d\u4e00\u4e9b\u56fe\u5c42\uff0c\u4f7f\u7528\u5904\u7406\u7b97\u6cd5\u7b49 # \u811a\u672c\u5b8c\u6210\u540e\uff0c\u8c03\u7528exitQgis\uff08\uff09\u4ece\u5185\u5b58\u4e2d\u5220\u9664\u63d0\u4f9b\u8005\u548c\u56fe\u5c42\u6ce8\u518c qgs . exitQgis () \u6211\u4eec\u9996\u5148\u5bfc\u5165 qgis.core \u6a21\u5757\uff0c\u7136\u540e\u914d\u7f6e\u524d\u7f00\u8def\u5f84\u3002\u524d\u7f00\u8def\u5f84\u662f\u5b89\u88c5QGIS\u7684\u8def\u5f84\u3002\u5b83\u901a\u8fc7\u8c03\u7528 setPrefixPath \u65b9\u6cd5\u5728\u811a\u672c\u4e2d\u914d\u7f6e\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3a True \uff0c\u5b83\u63a7\u5236\u662f\u5426\u4f7f\u7528\u9ed8\u8ba4\u8def\u5f84\u3002 QGIS\u5b89\u88c5\u8def\u5f84\u56e0\u5e73\u53f0\u800c\u5f02\uff0c\u5728\u7cfb\u7edf\u4e2d\u627e\u5230\u5b83\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u5728QGIS\u4e2d\u4f7f\u7528 1.1 \u5728Python\u63a7\u5236\u53f0\u4e2d\u7f16\u5199\u811a\u672c \u8fd0\u884c QgsApplication.prefixPath() \u5e76\u67e5\u770b\u8f93\u51fa\u3002 \u914d\u7f6e\u524d\u7f00\u8def\u5f84\u540e\uff0c\u6211\u4eec\u5728\u53d8\u91cf qgs \u4e2d\u4fdd\u5b58\u4e86\u4e00\u4e2a\u5bf9 QgsApplication \u7684\u5f15\u7528\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3a False \uff0c\u8868\u793a\u6211\u4eec\u4e0d\u6253\u7b97\u4f7f\u7528GUI\uff0c\u56e0\u4e3a\u6211\u4eec\u6b63\u5728\u7f16\u5199\u4e00\u4e2a\u72ec\u7acb\u7684\u811a\u672c\u3002\u914d\u7f6e QgsApplication \u540e \uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u7528 qgs.initQgis() \u65b9\u6cd5\u52a0\u8f7dQGIS\u6570\u636e\u63d0\u4f9b\u8005\u548c\u56fe\u5c42\u6ce8\u518c\u3002\u5728QGIS\u521d\u59cb\u5316\u540e\uff0c\u6211\u4eec\u51c6\u5907\u7f16\u5199\u811a\u672c\u7684\u5176\u4f59\u90e8\u5206\u3002\u6700\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u7528 qgs.exitQgis() \u4ece\u5185\u5b58\u4e2d\u5220\u9664\u6570\u636e\u63d0\u4f9b\u8005\u548c\u56fe\u5c42\u6ce8\u518c\u3002 1.4.2 \u5728\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528PyQGIS \u2693\ufe0e 1.4.1 \u5728\u72ec\u7acb\u811a\u672c\u4e2d\u4f7f\u7528PyQGIS \u548c\u81ea\u5b9a\u4e49PyQGIS\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u552f\u4e00\u7684\u533a\u522b\u662f\u5728\u5b9e\u4f8b\u5316 QgsApplication \u65f6\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\u4f20\u9012 True \u800c\u4e0d\u662f False \uff0c\u8868\u793a\u6211\u4eec\u8ba1\u5212\u4f7f\u7528GUI\u3002 1 2 3 4 5 6 7 8 9 10 from qgis.core import * # \u63d0\u4f9bqgis\u5b89\u88c5\u4f4d\u7f6e\u7684\u8def\u5f84(windows\u9ed8\u8ba4\uff1aC:\\Program Files\\QGIS 3.x\\apps\\qgis-ltr) QgsApplication . setPrefixPath ( \"/path/to/qgis/installation\" , True ) # \u521b\u5efa\u5bf9QgsApplication\u8bbe\u7f6e\u7684\u5f15\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3aTrue\u542f\u7528GUI\uff0c\u6211\u4eec\u9700\u8981\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f qgs = QgsApplication ([], True ) # \u52a0\u8f7d\u63d0\u4f9b\u8005 qgs . initQgis () # \u5728\u8fd9\u91cc\u7f16\u5199\u4ee3\u7801\uff0c\u52a0\u8f7d\u4e00\u4e9b\u56fe\u5c42\uff0c\u4f7f\u7528\u5904\u7406\u7b97\u6cd5\u7b49 # \u811a\u672c\u5b8c\u6210\u540e\uff0c\u8c03\u7528exitQgis\uff08\uff09\u4ece\u5185\u5b58\u4e2d\u5220\u9664\u63d0\u4f9b\u8005\u548c\u56fe\u5c42\u6ce8\u518c qgs . exitQgis () \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528QGIS API\u2014\u2014\u52a0\u8f7d\u56fe\u5c42\u5e76\u6267\u884c\u4e00\u4e9b\u5904\u7406\u6216\u4f7f\u7528\u5730\u56fe\u753b\u5e03\u542f\u52a8GUI\u3002\u53ef\u80fd\u6027\u662f\u65e0\u6b62\u5883\u7684:-) 1.4.3 \u8fd0\u884c\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f \u2693\ufe0e \u5982\u679c\u5b83\u4eec\u4e0d\u5728\u4e00\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u4f4d\u7f6e\uff0c\u4f60\u9700\u8981\u544a\u8bc9\u7cfb\u7edf\u5728\u54ea\u91cc\u641c\u7d22QGIS\u5e93\u548c\u5408\u9002\u7684Python\u6a21\u5757\u2014\u2014\u5426\u5219Python\u4f1a\u629b\u51fa\u5f02\u5e38\uff1a 1 2 >>> import qgis.core ImportError : No module named qgis . core \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e PYTHONPATH \u73af\u5883\u53d8\u91cf\u6765\u4fee\u590d\u3002\u5728\u4ee5\u4e0b\u547d\u4ee4\u4e2d\uff0c <qgispath> \u5e94\u66ff\u6362\u4e3a\u4f60\u7684\u5b9e\u9645QGIS\u5b89\u88c5\u8def\u5f84\uff1a \u5728Linux\u4e0a\uff1a export PYTHONPATH=/<qgispath>/share/qgis/python \u5728Windows\u4e0a\uff1a set PYTHONPATH=c:\\<qgispath>\\python \u5728macOS\u4e0a\uff1a export PYTHONPATH=/<qgispath>/Contents/Resources/python \u73b0\u5728\uff0cPyQGIS\u6a21\u5757\u7684\u8def\u5f84\u8bbe\u7f6e\u5b8c\u6210\uff0c\u4f46\u5b83\u4eec\u4f9d\u8d56\u4e8e qgis_core \u548c qgis_gui \u5e93\uff08\u4ec5\u4ec5\u4f5c\u4e3a\u5c01\u88c5\u7684Python\u6a21\u5757\uff09\u3002\u8fd9\u4e9b\u5e93\u7684\u8def\u5f84\u901a\u5e38\u662f\u64cd\u4f5c\u7cfb\u7edf\u672a\u77e5\u7684\uff0c\u56e0\u6b64\u518d\u6b21\u51fa\u73b0\u5bfc\u5165\u9519\u8bef\uff08\u9519\u8bef\u6d88\u606f\u53ef\u80fd\u56e0\u7cfb\u7edf\u800c\u5f02\uff09\uff1a 1 2 >>> import qgis.core ImportError : libqgis_core . so .3.2.0 : cannot open shared object file : No such file or directory \u901a\u8fc7\u5c06QGIS\u5e93\u6240\u5728\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u52a8\u6001\u94fe\u63a5\u5668\u7684\u641c\u7d22\u8def\u5f84\u6765\u89e3\u51b3\u6b64\u95ee\u9898\uff1a \u5728Linux\u4e0a\uff1a export LD_LIBRARY_PATH=/qgispath/lib \u5728Windows\u4e0a\uff1a set PATH=C:\\qgispath\\BIN; C:\\qgispath\\APPS\\qgisrelease\\BIN;PATH\uff05 \uff0c\u5176\u4e2d qgisrelease \u5e94\u66ff\u6362\u6210\u4f60\u7684\u53d1\u5e03\u7c7b\u578b\uff08\u4f8b\u5982\uff0c qgis-ltr \uff0c qgis \uff0c qgis-dev \uff09 \u8fd9\u4e9b\u547d\u4ee4\u53ef\u4ee5\u653e\u5165\u4e00\u4e2a\u5f15\u5bfc\u811a\u672c\uff0c\u8d1f\u8d23\u542f\u52a8\u3002\u4f7f\u7528PyQGIS\u90e8\u7f72\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u901a\u5e38\u6709\u4e24\u79cd\u53ef\u80fd\uff1a \u8981\u6c42\u7528\u6237\u5728\u5b89\u88c5\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\u5728\u5176\u5e73\u53f0\u4e0a\u5b89\u88c5QGIS\u3002\u5e94\u7528\u7a0b\u5e8f\u5b89\u88c5\u7a0b\u5e8f\u5e94\u67e5\u627eQGIS\u5e93\u7684\u9ed8\u8ba4\u4f4d\u7f6e\uff0c\u5e76\u5141\u8bb8\u7528\u6237\u8bbe\u7f6e\u8def\u5f84\uff08\u5982\u679c\u672a\u627e\u5230\uff09\u3002\u8be5\u65b9\u6cd5\u66f4\u7b80\u5355\uff0c\u4f46\u662f\u5b83\u9700\u8981\u7528\u6237\u6267\u884c\u66f4\u591a\u6b65\u9aa4\u3002 \u5c06QGIS\u4e0e\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u8d77\u6253\u5305\u3002\u53d1\u5e03\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u66f4\u5177\u6311\u6218\u6027\uff0c\u5e76\u4e14\u7a0b\u5e8f\u5305\u5c06\u66f4\u5927\uff0c\u4f46\u7528\u6237\u5c06\u514d\u4e8e\u4e0b\u8f7d\u548c\u5b89\u88c5\u5176\u4ed6\u8f6f\u4ef6\u7684\u8d1f\u62c5\u3002 \u8fd9\u4e24\u79cd\u90e8\u7f72\u65b9\u5f0f\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\u2014\u2014\u5728Windows\u548cmacOS\u4e0a\u90e8\u7f72\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u662f\u5bf9\u4e8eLinux\uff0c\u5c06QGIS\u7684\u5b89\u88c5\u7559\u7ed9\u7528\u6237\u548c\u4ed6\u7684\u5305\u7ba1\u7406\u5668\u3002 1.5 \u5173\u4e8ePyQt\u548cSIP\u7684\u6280\u672f\u8bf4\u660e \u2693\ufe0e \u6211\u4eec\u51b3\u5b9a\u4f7f\u7528Python\uff0c\u56e0\u4e3a\u5b83\u662f\u6700\u53d7\u6b22\u8fce\u7684\u811a\u672c\u8bed\u8a00\u4e4b\u4e00\u3002QGIS3\u4e2d\u7684PyQGIS\u7ed1\u5b9a\u4f9d\u8d56\u4e8eSIP\u548cPyQt5\u3002\u4f7f\u7528SIP\u800c\u4e0d\u662f\u4f7f\u7528\u66f4\u5e7f\u6cdb\u4f7f\u7528\u7684SWIG\u7684\u539f\u56e0\u662fQGIS\u4ee3\u7801\u4f9d\u8d56\u4e8eQt\u5e93\u3002Qt\uff08PyQt\uff09\u7684Python\u7ed1\u5b9a\u4f7f\u7528SIP\u5b8c\u6210\uff0c\u8fd9\u5141\u8bb8PyQGIS\u4e0ePyQt\u65e0\u7f1d\u96c6\u6210\u3002","title":"1-\u5f15\u8a00"},{"location":"1-%E5%BC%95%E8%A8%80/#1","text":"\u672c\u6587\u6863\u65e2\u53ef\u4f5c\u4e3a\u6559\u7a0b\uff0c\u4e5f\u53ef\u4f5c\u4e3a\u53c2\u8003\u6307\u5357\u3002\u867d\u7136\u6ca1\u6709\u5217\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u6848\u4f8b\uff0c\u4f46\u662f\u5bf9\u4e3b\u8981\u529f\u80fd\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6982\u8ff0\u3002 \u5bf9\u4e8ePython\u7684\u652f\u6301\u6700\u521d\u662f\u5728QGIS 0.9\u4e2d\u5f15\u5165\u7684\u3002 \u76ee\u524d\uff0c\u5728QGIS\u684c\u9762\u7248\u4e2d\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u7528Python\uff0c\u5982\u4e0b\uff1a \u5728QGIS\u7684Python\u63a7\u5236\u53f0\u4e2d \u521b\u5efa\u5e76\u4f7f\u7528\u63d2\u4ef6 QGIS\u542f\u52a8\u65f6\u81ea\u52a8\u8fd0\u884cPython\u4ee3\u7801 \u521b\u5efa\u5904\u7406\u7b97\u6cd5 \u5728QGIS\u4e2d\u4e3a\u8868\u8fbe\u5f0f\u521b\u5efa\u51fd\u6570 \u57fa\u4e8eQGIS API\u521b\u5efa\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f Python\u652f\u6301\u5728QGIS 0.9\u4e2d\u9996\u6b21\u5f15\u5165\u3002\u8fd9\u91cc\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5728QGIS\u684c\u9762\u8f6f\u4ef6\u4e2d\u4f7f\u7528Python\uff08\u6db5\u76d6\u4e00\u4e0b\u90e8\u5206\uff09\uff1a \u5728QGIS\u4e2d\u7684Python\u63a7\u5236\u53f0\u4e2d\u4f7f\u7528\u547d\u4ee4 \u521b\u5efa\u5e76\u4f7f\u7528\u63d2\u4ef6 \u5f53QGIS\u542f\u52a8\u65f6\u81ea\u52a8\u8fd0\u884cPython\u4ee3\u7801 \u521b\u5efa\u5904\u7406\u7b97\u6cd5 \u5728QGIS\u4e2d\u521b\u5efa\u51fd\u6570\u8868\u8fbe\u5f0f \u57fa\u4e8eQGIS API\u521b\u5efa\u81ea\u5b9a\u4e49\u5e94\u7528 Python\u7ed1\u5b9a\u4e5f\u53ef\u7528\u4e8eQGIS\u670d\u52a1\uff0c\u5305\u62ecPython\u63d2\u4ef6\uff08\u8bf7\u53c2\u9605 20-QGIS\u670d\u52a1\u5668\u548cPython \uff09\u548cPython\u7ed1\u5b9a\uff0c\u53ef\u7528\u4e8e\u5c06QGIS\u670d\u52a1\u5d4c\u5165\u5230Python\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a \u5b8c\u6574\u7684QGIS C++ API \u53c2\u8003\u2014\u2014\u7528\u4e8e\u8bb0\u5f55QGIS\u5e93\u4e2d\u7684\u7c7b\u3002 Pythonic QGIS API\uff08pyqgis\uff09 \u51e0\u4e4e\u4e0eC ++ API\u76f8\u540c\u3002 \u5b66\u4e60\u6267\u884c\u5e38\u89c1\u4efb\u52a1\u7684\u53e6\u4e00\u4e2a\u597d\u529e\u6cd5\u662f\u4ece \u63d2\u4ef6\u4ed3\u5e93 \u4e0b\u8f7d\u73b0\u6709\u63d2\u4ef6\u5e76\u5b66\u4e60\u5b83\u4eec\u7684\u4ee3\u7801\u3002","title":"1 \u5f15\u8a00"},{"location":"1-%E5%BC%95%E8%A8%80/#11-python","text":"QGIS\u4e3a\u811a\u672c\u7f16\u5199\u63d0\u4f9b\u4e86\u4e00\u4e2a\u96c6\u6210\u7684python\u63a7\u5236\u53f0\u3002\u53ef\u4ee5\u4ece\u63d2\u4ef6\u2192python\u63a7\u5236\u53f0\u83dc\u5355\u4e2d\u6253\u5f00\uff1a \u4e0a\u9762\u7684\u622a\u56fe\u8bf4\u660e\u4e86\u5982\u4f55\u83b7\u53d6\u56fe\u5c42\u5217\u8868\u4e2d\u5f53\u524d\u9009\u5b9a\u7684\u56fe\u5c42\uff0c\u5e76\u663e\u793a\u5176ID\uff0c\u5982\u679c\u662f\u77e2\u91cf\u56fe\u5c42\uff0c\u8fd8\u53ef\u4ee5\u663e\u793a\u8981\u7d20\u4e2a\u6570\u3002\u5bf9\u4e8e\u4e0eQGIS\u4ea4\u4e92\u73af\u5883\uff0c\u6709\u4e00\u4e2a iface \u53d8\u91cf\uff0c\u5b83\u662f QgisInterface \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u6b64\u63a5\u53e3\u5141\u8bb8\u8bbf\u95ee\u5730\u56fe\u753b\u5e03\u3001\u83dc\u5355\u3001\u5de5\u5177\u680f\u548cQGIS\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206\u3002 \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\uff0c\u5728\u542f\u52a8\u63a7\u5236\u53f0\u65f6\u5c06\u4f1a\u6267\u884c\u4ee5\u4e0b\u8bed\u53e5\uff08\u5c06\u6765\u53ef\u4ee5\u8bbe\u7f6e\u66f4\u591a\u7684\u521d\u59cb\u547d\u4ee4\uff09 1 2 from qgis.core import * import qgis.utils \u5bf9\u4e8e\u7ecf\u5e38\u4f7f\u7528\u63a7\u5236\u53f0\u7684\u7528\u6237\uff0c\u8bbe\u7f6e\u6253\u5f00\u63a7\u5236\u53f0\u7684\u5feb\u6377\u952e\u53ef\u80fd\u5f88\u6709\u7528\uff08\u5728\u8bbe\u7f6e\u2192\u952e\u76d8\u5feb\u6377\u952e\u4e2d...\uff09","title":"1.1 \u5728Python\u63a7\u5236\u53f0\u4e2d\u7f16\u5199\u811a\u672c"},{"location":"1-%E5%BC%95%E8%A8%80/#12-python","text":"\u53ef\u4ee5\u4f7f\u7528\u63d2\u4ef6\u6765\u6269\u5c55QGIS\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u4f7f\u7528Python\u7f16\u5199\u63d2\u4ef6\u3002\u4e0eC ++\u63d2\u4ef6\u76f8\u6bd4\uff0c\u4e3b\u8981\u4f18\u70b9\u662f\u5206\u53d1\u7b80\u5355\uff08\u4e0d\u5bf9\u6bcf\u4e2a\u5e73\u53f0\u8fdb\u884c\u7f16\u8bd1\uff09\u3001\u66f4\u5bb9\u6613\u7684\u5f00\u53d1\u3002 \u81ea\u4ece\u5f15\u5165\u5bf9Python\u7684\u652f\u6301\u4ee5\u6765\uff0c\u5df2\u7ecf\u7f16\u5199\u4e86\u8bb8\u591a\u6db5\u76d6\u5404\u79cd\u529f\u80fd\u7684\u63d2\u4ef6\u3002\u63d2\u4ef6\u5b89\u88c5\u7a0b\u5e8f\u5141\u8bb8\u7528\u6237\u5f88\u5bb9\u6613\u83b7\u53d6\u3001\u5347\u7ea7\u548c\u5220\u9664Python\u63d2\u4ef6\u3002\u6709\u5173\u63d2\u4ef6\u548c\u63d2\u4ef6\u5f00\u53d1\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Python\u63d2\u4ef6 \u9875\u9762\u3002 \u4f7f\u7528Python\u521b\u5efa\u63d2\u4ef6\u5f88\u7b80\u5355\uff0c\u8be6\u7ec6\u8bf4\u660e\u8bf7\u53c2\u9605 16-\u5f00\u53d1Python\u63d2\u4ef6 \u3002 \u63d0\u793a Python\u63d2\u4ef6\u4e5f\u53ef\u7528\u4e8eQGIS\u670d\u52a1\uff0c\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 20-QGIS\u670d\u52a1\u5668\u548cPython \u3002","title":"1.2 Python\u63d2\u4ef6"},{"location":"1-%E5%BC%95%E8%A8%80/#121","text":"\u5904\u7406\u63d2\u4ef6\u53ef\u88ab\u7528\u4e8e\u5904\u7406\u6570\u636e\u3002\u5b83\u4eec\u6bd4Python\u63d2\u4ef6\u66f4\u5bb9\u6613\u5f00\u53d1\u3001\u66f4\u5177\u4f53\u3001\u66f4\u8f7b\u91cf\u3002 17-\u7f16\u5199\u5904\u7406\u63d2\u4ef6 \u9610\u8ff0\u4e86\u4ec0\u4e48\u65f6\u5019\u8be5\u4f7f\u7528\u5904\u7406\u7b97\u6cd5\uff0c\u5e76\u4e14\u600e\u4e48\u5f00\u53d1\u5b83\u4eec\u3002","title":"1.2.1 \u5904\u7406\u63d2\u4ef6"},{"location":"1-%E5%BC%95%E8%A8%80/#13-qgispython","text":"\u6bcf\u6b21QGIS\u542f\u52a8\u65f6\uff0c\u90fd\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u8fd0\u884cPython\u4ee3\u7801\u3002 \u521b\u5efastartup.py\u811a\u672c \u5c06 PYQGIS_STARTUP \u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u73b0\u6709Python\u6587\u4ef6","title":"1.3 QGIS\u542f\u52a8\u65f6\u8fd0\u884cPython\u4ee3\u7801"},{"location":"1-%E5%BC%95%E8%A8%80/#131-startuppy","text":"\u6bcf\u6b21QGIS\u542f\u52a8\u65f6\uff0c\u7528\u6237\u7684Python\u4e3b\u76ee\u5f55\u90fd\u4f1a\u5728\u4ee5\u4e0b\u76ee\u5f55\u641c\u7d22\u540d\u4e3a startup.py \u7684\u6587\u4ef6\u3002 \u5982\u679c\u8be5\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u7531\u5d4c\u5165\u5f0fPython\u89e3\u91ca\u5668\u6267\u884c\u3002 Linux\uff1a .local/share/QGIS/QGIS3 Windows\uff1a AppData\\Roaming\\QGIS\\QGIS3 macOS\uff1a Library/Application Support/QGIS/QGIS3 \u63d0\u793a \u9ed8\u8ba4\u8def\u5f84\u53d6\u51b3\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u3002\u8981\u67e5\u627e\u9002\u5408\u4f60\u7684\u8def\u5f84\uff0c\u6253\u5f00Python\u63a7\u5236\u53f0\uff0c\u5e76\u8fd0\u884c QStandardPaths.standardLocations(QStandardPaths.AppDataLocation) \u67e5\u770b\u9ed8\u8ba4\u76ee\u5f55\u5217\u8868\u3002","title":"1.3.1 startup.py\u6587\u4ef6"},{"location":"1-%E5%BC%95%E8%A8%80/#132-pyqgis_startup","text":"\u4f60\u53ef\u4ee5\u5728QGIS\u521d\u59cb\u5316\u5b8c\u6210\u4e4b\u524d\u5c06 PYQGIS_STARTUP \u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u73b0\u6709Python\u6587\u4ef6\u7684\u8def\u5f84\u6765\u8fd0\u884cPython\u4ee3\u7801\u3002 \u6b64\u4ee3\u7801\u5c06\u5728QGIS\u521d\u59cb\u5316\u5b8c\u6210\u4e4b\u524d\u8fd0\u884c\u3002\u6b64\u65b9\u6cd5\u5bf9\u4e8e\u6e05\u7406sys.path\u975e\u5e38\u6709\u7528\u2014\u2014\u53ef\u80fd\u5b58\u5728\u4e0d\u9700\u8981\u7684\u8def\u5f84\uff0c\u6216\u7528\u4e8e\u9694\u79bb/\u52a0\u8f7d\u521d\u59cb\u73af\u5883\u2014\u2014\u65e0\u9700\u865a\u62df\u73af\u5883\uff0c\u4f8b\u5982\u5728Mac\u4e0a\u4f7f\u7528homebrew\u6216MacPorts\u3002","title":"1.3.2 PYQGIS_STARTUP\u73af\u5883\u53d8\u91cf"},{"location":"1-%E5%BC%95%E8%A8%80/#14-python","text":"\u4e3a\u81ea\u52a8\u5316\u6d41\u7a0b\u521b\u5efa\u811a\u672c\u901a\u5e38\u5f88\u65b9\u4fbf\u3002\u4f7f\u7528PyQGIS\uff0c\u8fd9\u662f\u5b8c\u5168\u53ef\u80fd\u7684\u2014\u2014\u5bfc\u5165 qgis.core \u6a21\u5757\uff0c\u521d\u59cb\u5316\u5b83\uff0c\u4f60\u5c31\u53ef\u4ee5\u8fdb\u884c\u5904\u7406\u4e86\u3002 \u6216\u8005\u4f60\u53ef\u80fd\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528GIS\u529f\u80fd\u7684\u4ea4\u4e92\u5f0f\u5e94\u7528\u7a0b\u5e8f\u2014\u2014\u6267\u884c\u6d4b\u91cf\u3001\u5c06\u5730\u56fe\u5bfc\u51fa\u4e3aPDF\u6216\u4efb\u4f55\u5176\u4ed6\u529f\u80fd\u3002 qgis.gui \u6a21\u5757\u63d0\u4f9b\u4e86\u5404\u79cdGUI\u90e8\u4ef6\uff0c\u6700\u503c\u5f97\u6ce8\u610f\u7684\u662f\u53ef\u4ee5\u5408\u5e76\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u5730\u56fe\u753b\u5e03\u63a7\u4ef6\u2014\u2014\u652f\u6301\u7f29\u653e\uff0c\u5e73\u79fb\u548c\u4efb\u4f55\u5176\u4ed6\u81ea\u5b9a\u4e49\u5730\u56fe\u5de5\u5177\u3002 \u5fc5\u987b\u914d\u7f6ePyQGIS\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u6216\u72ec\u7acb\u811a\u672c\u4ee5\u5b9a\u4f4dQGIS\u8d44\u6e90\uff0c\u4f8b\u5982\u6295\u5f71\u4fe1\u606f\uff0c\u7528\u4e8e\u8bfb\u53d6\u77e2\u91cf\u548c\u6805\u683c\u56fe\u5c42\u7684\u6570\u636e\u63d0\u4f9b\u8005\u7b49\u3002QGIS\u8d44\u6e90\u901a\u8fc7\u5728\u5e94\u7528\u7a0b\u5e8f\u6216\u811a\u672c\u7684\u5f00\u5934\u6dfb\u52a0\u51e0\u884c\uff08\u4ee3\u7801\uff09\u6765\u521d\u59cb\u5316\u3002\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u548c\u72ec\u7acb\u811a\u672c\u521d\u59cb\u5316QGIS\u7684\u4ee3\u7801\u7c7b\u4f3c\u3002\u4ee5\u4e0b\u63d0\u4f9b\u5404\u81ea\u7684\u5b9e\u4f8b\u3002 \u63d0\u793a \u5343\u4e07\u4e0d\u80fd\u4f7f\u7528 qgis.py \u4f5c\u4e3a\u4f60\u7684\u6d4b\u8bd5\u811a\u672c\u7684\u540d\u79f0\uff0c\u5426\u5219Python\u5c06\u65e0\u6cd5\u5bfc\u5165\u7ed1\u5b9a\u3002","title":"1.4 Python\u5e94\u7528\u7a0b\u5e8f"},{"location":"1-%E5%BC%95%E8%A8%80/#141-pyqgis","text":"\u542f\u52a8\u72ec\u7acb\u811a\u672c\uff0c\u5728\u811a\u672c\u5f00\u5934\u521d\u59cb\u5316QGIS\u8d44\u6e90\uff0c\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 from qgis.core import * # \u63d0\u4f9bqgis\u5b89\u88c5\u4f4d\u7f6e\u7684\u8def\u5f84(windows\u9ed8\u8ba4\uff1aC:\\Program Files\\QGIS 3.x\\apps\\qgis-ltr) QgsApplication . setPrefixPath ( \"/path/to/qgis/installation\" , True ) # \u521b\u5efa\u5bf9QgsApplication\u7684\u5f15\u7528\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3aFalse\u5c06\u7981\u7528GUI qgs = QgsApplication ([], False ) # \u52a0\u8f7d\u63d0\u4f9b\u8005 qgs . initQgis () # \u5728\u8fd9\u91cc\u7f16\u5199\u4ee3\u7801\uff0c\u52a0\u8f7d\u4e00\u4e9b\u56fe\u5c42\uff0c\u4f7f\u7528\u5904\u7406\u7b97\u6cd5\u7b49 # \u811a\u672c\u5b8c\u6210\u540e\uff0c\u8c03\u7528exitQgis\uff08\uff09\u4ece\u5185\u5b58\u4e2d\u5220\u9664\u63d0\u4f9b\u8005\u548c\u56fe\u5c42\u6ce8\u518c qgs . exitQgis () \u6211\u4eec\u9996\u5148\u5bfc\u5165 qgis.core \u6a21\u5757\uff0c\u7136\u540e\u914d\u7f6e\u524d\u7f00\u8def\u5f84\u3002\u524d\u7f00\u8def\u5f84\u662f\u5b89\u88c5QGIS\u7684\u8def\u5f84\u3002\u5b83\u901a\u8fc7\u8c03\u7528 setPrefixPath \u65b9\u6cd5\u5728\u811a\u672c\u4e2d\u914d\u7f6e\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3a True \uff0c\u5b83\u63a7\u5236\u662f\u5426\u4f7f\u7528\u9ed8\u8ba4\u8def\u5f84\u3002 QGIS\u5b89\u88c5\u8def\u5f84\u56e0\u5e73\u53f0\u800c\u5f02\uff0c\u5728\u7cfb\u7edf\u4e2d\u627e\u5230\u5b83\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u5728QGIS\u4e2d\u4f7f\u7528 1.1 \u5728Python\u63a7\u5236\u53f0\u4e2d\u7f16\u5199\u811a\u672c \u8fd0\u884c QgsApplication.prefixPath() \u5e76\u67e5\u770b\u8f93\u51fa\u3002 \u914d\u7f6e\u524d\u7f00\u8def\u5f84\u540e\uff0c\u6211\u4eec\u5728\u53d8\u91cf qgs \u4e2d\u4fdd\u5b58\u4e86\u4e00\u4e2a\u5bf9 QgsApplication \u7684\u5f15\u7528\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3a False \uff0c\u8868\u793a\u6211\u4eec\u4e0d\u6253\u7b97\u4f7f\u7528GUI\uff0c\u56e0\u4e3a\u6211\u4eec\u6b63\u5728\u7f16\u5199\u4e00\u4e2a\u72ec\u7acb\u7684\u811a\u672c\u3002\u914d\u7f6e QgsApplication \u540e \uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u7528 qgs.initQgis() \u65b9\u6cd5\u52a0\u8f7dQGIS\u6570\u636e\u63d0\u4f9b\u8005\u548c\u56fe\u5c42\u6ce8\u518c\u3002\u5728QGIS\u521d\u59cb\u5316\u540e\uff0c\u6211\u4eec\u51c6\u5907\u7f16\u5199\u811a\u672c\u7684\u5176\u4f59\u90e8\u5206\u3002\u6700\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u7528 qgs.exitQgis() \u4ece\u5185\u5b58\u4e2d\u5220\u9664\u6570\u636e\u63d0\u4f9b\u8005\u548c\u56fe\u5c42\u6ce8\u518c\u3002","title":"1.4.1 \u5728\u72ec\u7acb\u811a\u672c\u4e2d\u4f7f\u7528PyQGIS"},{"location":"1-%E5%BC%95%E8%A8%80/#142-pyqgis","text":"1.4.1 \u5728\u72ec\u7acb\u811a\u672c\u4e2d\u4f7f\u7528PyQGIS \u548c\u81ea\u5b9a\u4e49PyQGIS\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u552f\u4e00\u7684\u533a\u522b\u662f\u5728\u5b9e\u4f8b\u5316 QgsApplication \u65f6\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\u4f20\u9012 True \u800c\u4e0d\u662f False \uff0c\u8868\u793a\u6211\u4eec\u8ba1\u5212\u4f7f\u7528GUI\u3002 1 2 3 4 5 6 7 8 9 10 from qgis.core import * # \u63d0\u4f9bqgis\u5b89\u88c5\u4f4d\u7f6e\u7684\u8def\u5f84(windows\u9ed8\u8ba4\uff1aC:\\Program Files\\QGIS 3.x\\apps\\qgis-ltr) QgsApplication . setPrefixPath ( \"/path/to/qgis/installation\" , True ) # \u521b\u5efa\u5bf9QgsApplication\u8bbe\u7f6e\u7684\u5f15\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3aTrue\u542f\u7528GUI\uff0c\u6211\u4eec\u9700\u8981\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f qgs = QgsApplication ([], True ) # \u52a0\u8f7d\u63d0\u4f9b\u8005 qgs . initQgis () # \u5728\u8fd9\u91cc\u7f16\u5199\u4ee3\u7801\uff0c\u52a0\u8f7d\u4e00\u4e9b\u56fe\u5c42\uff0c\u4f7f\u7528\u5904\u7406\u7b97\u6cd5\u7b49 # \u811a\u672c\u5b8c\u6210\u540e\uff0c\u8c03\u7528exitQgis\uff08\uff09\u4ece\u5185\u5b58\u4e2d\u5220\u9664\u63d0\u4f9b\u8005\u548c\u56fe\u5c42\u6ce8\u518c qgs . exitQgis () \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528QGIS API\u2014\u2014\u52a0\u8f7d\u56fe\u5c42\u5e76\u6267\u884c\u4e00\u4e9b\u5904\u7406\u6216\u4f7f\u7528\u5730\u56fe\u753b\u5e03\u542f\u52a8GUI\u3002\u53ef\u80fd\u6027\u662f\u65e0\u6b62\u5883\u7684:-)","title":"1.4.2 \u5728\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528PyQGIS"},{"location":"1-%E5%BC%95%E8%A8%80/#143","text":"\u5982\u679c\u5b83\u4eec\u4e0d\u5728\u4e00\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u4f4d\u7f6e\uff0c\u4f60\u9700\u8981\u544a\u8bc9\u7cfb\u7edf\u5728\u54ea\u91cc\u641c\u7d22QGIS\u5e93\u548c\u5408\u9002\u7684Python\u6a21\u5757\u2014\u2014\u5426\u5219Python\u4f1a\u629b\u51fa\u5f02\u5e38\uff1a 1 2 >>> import qgis.core ImportError : No module named qgis . core \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e PYTHONPATH \u73af\u5883\u53d8\u91cf\u6765\u4fee\u590d\u3002\u5728\u4ee5\u4e0b\u547d\u4ee4\u4e2d\uff0c <qgispath> \u5e94\u66ff\u6362\u4e3a\u4f60\u7684\u5b9e\u9645QGIS\u5b89\u88c5\u8def\u5f84\uff1a \u5728Linux\u4e0a\uff1a export PYTHONPATH=/<qgispath>/share/qgis/python \u5728Windows\u4e0a\uff1a set PYTHONPATH=c:\\<qgispath>\\python \u5728macOS\u4e0a\uff1a export PYTHONPATH=/<qgispath>/Contents/Resources/python \u73b0\u5728\uff0cPyQGIS\u6a21\u5757\u7684\u8def\u5f84\u8bbe\u7f6e\u5b8c\u6210\uff0c\u4f46\u5b83\u4eec\u4f9d\u8d56\u4e8e qgis_core \u548c qgis_gui \u5e93\uff08\u4ec5\u4ec5\u4f5c\u4e3a\u5c01\u88c5\u7684Python\u6a21\u5757\uff09\u3002\u8fd9\u4e9b\u5e93\u7684\u8def\u5f84\u901a\u5e38\u662f\u64cd\u4f5c\u7cfb\u7edf\u672a\u77e5\u7684\uff0c\u56e0\u6b64\u518d\u6b21\u51fa\u73b0\u5bfc\u5165\u9519\u8bef\uff08\u9519\u8bef\u6d88\u606f\u53ef\u80fd\u56e0\u7cfb\u7edf\u800c\u5f02\uff09\uff1a 1 2 >>> import qgis.core ImportError : libqgis_core . so .3.2.0 : cannot open shared object file : No such file or directory \u901a\u8fc7\u5c06QGIS\u5e93\u6240\u5728\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u52a8\u6001\u94fe\u63a5\u5668\u7684\u641c\u7d22\u8def\u5f84\u6765\u89e3\u51b3\u6b64\u95ee\u9898\uff1a \u5728Linux\u4e0a\uff1a export LD_LIBRARY_PATH=/qgispath/lib \u5728Windows\u4e0a\uff1a set PATH=C:\\qgispath\\BIN; C:\\qgispath\\APPS\\qgisrelease\\BIN;PATH\uff05 \uff0c\u5176\u4e2d qgisrelease \u5e94\u66ff\u6362\u6210\u4f60\u7684\u53d1\u5e03\u7c7b\u578b\uff08\u4f8b\u5982\uff0c qgis-ltr \uff0c qgis \uff0c qgis-dev \uff09 \u8fd9\u4e9b\u547d\u4ee4\u53ef\u4ee5\u653e\u5165\u4e00\u4e2a\u5f15\u5bfc\u811a\u672c\uff0c\u8d1f\u8d23\u542f\u52a8\u3002\u4f7f\u7528PyQGIS\u90e8\u7f72\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u901a\u5e38\u6709\u4e24\u79cd\u53ef\u80fd\uff1a \u8981\u6c42\u7528\u6237\u5728\u5b89\u88c5\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\u5728\u5176\u5e73\u53f0\u4e0a\u5b89\u88c5QGIS\u3002\u5e94\u7528\u7a0b\u5e8f\u5b89\u88c5\u7a0b\u5e8f\u5e94\u67e5\u627eQGIS\u5e93\u7684\u9ed8\u8ba4\u4f4d\u7f6e\uff0c\u5e76\u5141\u8bb8\u7528\u6237\u8bbe\u7f6e\u8def\u5f84\uff08\u5982\u679c\u672a\u627e\u5230\uff09\u3002\u8be5\u65b9\u6cd5\u66f4\u7b80\u5355\uff0c\u4f46\u662f\u5b83\u9700\u8981\u7528\u6237\u6267\u884c\u66f4\u591a\u6b65\u9aa4\u3002 \u5c06QGIS\u4e0e\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u8d77\u6253\u5305\u3002\u53d1\u5e03\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u66f4\u5177\u6311\u6218\u6027\uff0c\u5e76\u4e14\u7a0b\u5e8f\u5305\u5c06\u66f4\u5927\uff0c\u4f46\u7528\u6237\u5c06\u514d\u4e8e\u4e0b\u8f7d\u548c\u5b89\u88c5\u5176\u4ed6\u8f6f\u4ef6\u7684\u8d1f\u62c5\u3002 \u8fd9\u4e24\u79cd\u90e8\u7f72\u65b9\u5f0f\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\u2014\u2014\u5728Windows\u548cmacOS\u4e0a\u90e8\u7f72\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u662f\u5bf9\u4e8eLinux\uff0c\u5c06QGIS\u7684\u5b89\u88c5\u7559\u7ed9\u7528\u6237\u548c\u4ed6\u7684\u5305\u7ba1\u7406\u5668\u3002","title":"1.4.3 \u8fd0\u884c\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f"},{"location":"1-%E5%BC%95%E8%A8%80/#15-pyqtsip","text":"\u6211\u4eec\u51b3\u5b9a\u4f7f\u7528Python\uff0c\u56e0\u4e3a\u5b83\u662f\u6700\u53d7\u6b22\u8fce\u7684\u811a\u672c\u8bed\u8a00\u4e4b\u4e00\u3002QGIS3\u4e2d\u7684PyQGIS\u7ed1\u5b9a\u4f9d\u8d56\u4e8eSIP\u548cPyQt5\u3002\u4f7f\u7528SIP\u800c\u4e0d\u662f\u4f7f\u7528\u66f4\u5e7f\u6cdb\u4f7f\u7528\u7684SWIG\u7684\u539f\u56e0\u662fQGIS\u4ee3\u7801\u4f9d\u8d56\u4e8eQt\u5e93\u3002Qt\uff08PyQt\uff09\u7684Python\u7ed1\u5b9a\u4f7f\u7528SIP\u5b8c\u6210\uff0c\u8fd9\u5141\u8bb8PyQGIS\u4e0ePyQt\u65e0\u7f1d\u96c6\u6210\u3002","title":"1.5 \u5173\u4e8ePyQt\u548cSIP\u7684\u6280\u672f\u8bf4\u660e"},{"location":"10-%E5%9C%B0%E5%9B%BE%E6%B8%B2%E6%9F%93%E5%92%8C%E6%89%93%E5%8D%B0/","text":"\u672c\u8282\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import os from qgis.core import ( QgsGeometry , QgsMapSettings , QgsPrintLayout , QgsMapSettings , QgsMapRendererParallelJob , QgsLayoutItemLabel , QgsLayoutItemLegend , QgsLayoutItemMap , QgsLayoutItemPolygon , QgsLayoutItemScaleBar , QgsLayoutExporter , QgsLayoutItem , QgsLayoutPoint , QgsLayoutSize , QgsUnitTypes , QgsProject , QgsFillSymbol , ) from qgis.PyQt.QtGui import ( QPolygonF , QColor , ) from qgis.PyQt.QtCore import ( QPointF , QRectF , QSize , ) 10 \u5730\u56fe\u6e32\u67d3\u548c\u6253\u5370 \u2693\ufe0e \u5f53\u8f93\u5165\u6570\u636e\u4f5c\u4e3a\u5730\u56fe\u5448\u73b0\u65f6\uff0c\u901a\u5e38\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\u4f7f\u7528*QgsMapRendererJob*\u5feb\u901f\u8fdb\u884c\uff0c\u6216\u8005\u4f7f\u7528 QgsLayout \u7c7b\u7ec4\u5408\u5730\u56fe\u6765\u751f\u6210\u66f4\u7cbe\u7ec6\u7684\u8f93\u51fa\u3002 10.1 \u7b80\u5355\u7684\u6e32\u67d3 \u2693\ufe0e \u6e32\u67d3\u5b8c\u6210\u540e\uff0c\u521b\u5efa\u4e00\u4e2a QgsMapSettings \u5bf9\u8c61\u6765\u5b9a\u4e49\u6e32\u67d3\u9009\u9879\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u9009\u9879\u6784\u5efa\u4e00\u4e2a QgsMapRendererJob \u7c7b\u3002\u7136\u540e\u4f7f\u7528\u540e\u8005\u6765\u521b\u5efa\u56fe\u50cf\u3002 \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 image_location = os . path . join ( QgsProject . instance () . homePath (), \"render.png\" ) vlayer = iface . activeLayer () settings = QgsMapSettings () settings . setLayers ([ vlayer ]) settings . setBackgroundColor ( QColor ( 255 , 255 , 255 )) settings . setOutputSize ( QSize ( 800 , 600 )) settings . setExtent ( vlayer . extent ()) render = QgsMapRendererParallelJob ( options ) def finished (): img = render . renderedImage () # \u4fdd\u5b58\u56fe\u50cf; e.g. img.save(\"/Users/myuser/render.png\",\"png\") img . save ( image_location , \"png\" ) render . finished . connect ( finished ) # \u5f00\u59cb\u6e32\u67d3 render . start () # \u901a\u5e38\u4e0d\u9700\u8981\u5faa\u73af\uff0c\u56e0\u4e3a\u8fd9\u91cc\u662f\u5355\u72ec\u4f7f\u7528 from qgis.PyQt.QtCore import QEventLoop loop = QEventLoop () render . finished . connect ( loop . quit ) loop . exec_ () 10.2 \u4f7f\u7528\u4e0d\u540c\u7684CRS\u6e32\u67d3\u56fe\u5c42 \u2693\ufe0e \u5982\u679c\u4f60\u6709\u591a\u4e2a\u56fe\u5c42\u5e76\u4e14\u5b83\u4eec\u5177\u6709\u4e0d\u540c\u7684CRS\uff0c\u4e0a\u9762\u7684\u7b80\u5355\u793a\u4f8b\u53ef\u80fd\u4e0d\u8d77\u4f5c\u7528\uff1a\u4ece\u8303\u56f4\u8ba1\u7b97\u4e2d\u83b7\u53d6\u6b63\u786e\u7684\u503c\uff0c\u4f60\u5fc5\u987b\u663e\u5f0f\u8bbe\u7f6e\u76ee\u6807CRS 1 2 3 layers = [ iface . activeLayer ()] settings . setLayers ( layers ) render . setDestinationCrs ( layers [ 0 ] . crs ()) 10.3 \u4f7f\u7528\u6253\u5370\u5e03\u5c40\u8f93\u51fa \u2693\ufe0e \u5982\u679c\u4f60\u60f3\u8981\u6bd4\u4e0a\u9762\u663e\u793a\u7684\u7b80\u5355\u6e32\u67d3\u66f4\u590d\u6742\u7684\u8f93\u51fa\uff0c\u6253\u5370\u5e03\u5c40\u662f\u4e00\u4e2a\u975e\u5e38\u65b9\u4fbf\u7684\u5de5\u5177\u3002\u53ef\u4ee5\u521b\u5efa\u590d\u6742\u7684\u5730\u56fe\u5e03\u5c40\uff0c\u5305\u62ec\u5730\u56fe\u89c6\u56fe\uff0c\u6807\u7b7e\uff0c\u56fe\u4f8b\uff0c\u8868\u683c\u4ee5\u53ca\u901a\u5e38\u51fa\u73b0\u5728\u7eb8\u8d28\u5730\u56fe\u4e0a\u7684\u5176\u4ed6\u5143\u7d20\u3002\u7136\u540e\u53ef\u4ee5\u5c06\u5e03\u5c40\u5bfc\u51fa\u4e3aPDF\uff0c\u6805\u683c\u56fe\u50cf\u6216\u76f4\u63a5\u6253\u5370\u5728\u6253\u5370\u673a\u4e0a\u3002 \u5e03\u5c40\u7531\u4e00\u5806\u7c7b\u7ec4\u6210\u3002\u5b83\u4eec\u90fd\u5c5e\u4e8e\u6838\u5fc3\u5e93\u3002QGIS\u5e94\u7528\u7a0b\u5e8f\u6709\u4e00\u4e2a\u65b9\u4fbf\u7684GUI\u5e03\u5c40\u5143\u7d20\uff0c\u867d\u7136\u5b83\u5728GUI\u5e93\u4e2d\u4e0d\u53ef\u7528\u3002\u5982\u679c\u4f60\u4e0d\u719f\u6089 Qt Graphics View\u6846\u67b6 \uff0c\u90a3\u4e48\u5efa\u8bae\u4f60\u67e5\u770b\u6587\u6863\uff0c\u56e0\u4e3a\u5e03\u5c40\u662f\u57fa\u4e8e\u5b83\u7684\u3002 \u5e03\u5c40\u7684\u4e2d\u5fc3\u7c7b\u662f QgsLayout \u7c7b\uff0c\u5b83\u662f\u4eceQt QGraphicsScene \u7c7b\u6d3e\u751f\u7684\u3002\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5b83\u7684\u5b9e\u4f8b\uff1a 1 2 3 p = QgsProject () layout = QgsLayout ( p ) layout . initializeDefaults () \u8fd9\u5c06\u4f7f\u7528\u4e00\u4e9b\u9ed8\u8ba4\u8bbe\u7f6e\u521d\u59cb\u5316\u5e03\u5c40\uff0c\u5c06\u7a7a\u7684A4\u9875\u6dfb\u52a0\u5230\u5e03\u5c40\u4e2d\u3002\u4f60\u53ef\u4ee5\u5728\u4e0d\u8c03\u7528 initializeDefaults() \u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u5e03\u5c40\uff0c\u4f46\u4f60\u9700\u8981\u81ea\u5df1\u5411\u5e03\u5c40\u4e2d\u6dfb\u52a0\u9875\u9762\u3002 \u4e4b\u524d\u7684\u4ee3\u7801\u521b\u5efa\u4e86\u5728GUI\u4e2d\u4e0d\u53ef\u89c1\u7684\u201c\u4e34\u65f6\u201d\u5e03\u5c40\u3002\u5b83\u53ef\u4ee5\u65b9\u4fbf\u5feb\u901f\u5730\u6dfb\u52a0\u67d0\u4e9b\u9879\u5e76\u5bfc\u51fa\uff0c\u800c\u4e0d\u4fee\u6539\u9879\u672c\u8eab\uff0c\u4e5f\u4e0d\u4f1a\u5411\u6237\u516c\u5f00\u8fd9\u4e9b\u66f4\u6539\u3002\u5982\u679c\u4f60\u5e0c\u671b\u5c06\u5e03\u5c40\u4e0e\u9879\u76ee\u4e00\u8d77\u4fdd\u5b58\u6216\u6062\u590d\uff0c\u5e76\u4f7f\u5176\u5728\u5e03\u5c40\u7ba1\u7406\u5668\u4e2d\u53ef\u7528\uff0c\u6dfb\u52a0\uff1a 1 2 layout . setName ( \"MyLayout\" ) project . layoutManager () . addLayout ( layout ) \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u5e03\u5c40\u4e2d\u6dfb\u52a0\u5404\u79cd\u5143\u7d20\uff08map\uff0clabel\uff0c...\uff09\u3002\u6240\u6709\u8fd9\u4e9b\u5bf9\u8c61\u90fd\u7ee7\u627f\u81ea\u57fa\u7c7b QgsLayoutItem \u3002 \u4ee5\u4e0b\u662f\u53ef\u4ee5\u6dfb\u52a0\u5230\u5e03\u5c40\u7684\u4e00\u4e9b\u4e3b\u8981\u5e03\u5c40\u9879\u7684\u8bf4\u660e\u3002 \u5730\u56fe\u2014\u2014 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5730\u56fe\u5e76\u5c06\u5176\u62c9\u4f38\u5230\u6574\u4e2a\u7eb8\u5f20\u5927\u5c0f 1 2 3 4 5 6 7 map = QgsLayoutItemMap ( layout ) # \u8bbe\u7f6e\u5730\u56fe\u9879\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\uff08\u9ed8\u8ba4\u662f\u5bbd\u9ad8\u90fd\u662f0\uff0c\u4f4d\u7f6e\u57280\uff0c0\uff09 map . attemptMove ( QgsLayoutPoint ( 5 , 5 , QgsUnitTypes . LayoutMillimeters )) map . attemptResize ( QgsLayoutSize ( 200 , 200 , QgsUnitTypes . LayoutMillimeters )) # \u63d0\u4f9b\u6e32\u67d3\u8303\u56f4 map . zoomToExtent ( iface . mapCanvas () . extent ()) layout . addItem ( map ) \u6807\u7b7e\u2014\u2014\u5141\u8bb8\u663e\u793a\u6807\u7b7e\u3002\u53ef\u4ee5\u4fee\u6539\u5176\u5b57\u4f53\uff0c\u989c\u8272\uff0c\u5bf9\u9f50\u548c\u8fb9\u8ddd 1 2 3 4 label = QgsLayoutItemLabel ( layout ) label . setText ( \"Hello world\" ) label . adjustSizeToText () layout . addItem ( label ) \u56fe\u4f8b 1 2 3 legend = QgsLayoutItemLegend ( layout ) legend . setLinkedMap ( map ) # map\u662f\u4e00\u4e2aQgsLayoutItemMap\u5b9e\u4f8b layout . addItem ( legend ) \u6bd4\u4f8b\u5c3a 1 2 3 4 5 item = QgsLayoutItemScaleBar ( layout ) item . setStyle ( 'Numeric' ) # \u53ef\u9009\u62e9\u4fee\u6539\u6837\u5f0f item . setLinkedMap ( map ) # map\u662f\u4e00\u4e2aQgsLayoutItemMap\u5b9e\u4f8b item . applyDefaultSize () layout . addItem ( item ) \u7bad\u5934 \u56fe\u7247 \u57fa\u672c\u5f62\u72b6 \u57fa\u4e8e\u8282\u70b9\u7684\u5f62\u72b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 polygon = QPolygonF () polygon . append ( QPointF ( 0.0 , 0.0 )) polygon . append ( QPointF ( 100.0 , 0.0 )) polygon . append ( QPointF ( 200.0 , 100.0 )) polygon . append ( QPointF ( 100.0 , 200.0 )) polygonItem = QgsLayoutItemPolygon ( polygon , layout ) layout . addItem ( polygonItem ) props = {} props [ \"color\" ] = \"green\" props [ \"style\" ] = \"solid\" props [ \"style_border\" ] = \"solid\" props [ \"color_border\" ] = \"black\" props [ \"width_border\" ] = \"10.0\" props [ \"joinstyle\" ] = \"miter\" symbol = QgsFillSymbol . createSimple ( props ) polygonItem . setSymbol ( symbol ) \u8868\u683c \u5c06\u9879\u6dfb\u52a0\u5230\u5e03\u5c40\u540e\uff0c\u53ef\u4ee5\u79fb\u52a8\u5e76\u8c03\u6574\u5176\u5927\u5c0f\uff1a 1 2 item . attemptMove ( QgsLayoutPoint ( 1.4 , 1.8 , QgsUnitTypes . LayoutCentimeters )) item . attemptResize ( QgsLayoutSize ( 2.8 , 2.2 , QgsUnitTypes . LayoutCentimeters )) \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u9879\u76ee\u5468\u56f4\u90fd\u4f1a\u7ed8\u5236\u4e00\u4e2a\u6846\u67b6\uff0c\u4f60\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u5220\u9664\u5b83\uff1a 1 label . setFrameEnabled ( False ) \u9664\u4e86\u624b\u52a8\u521b\u5efa\u5e03\u5c40\u9879\u5916\uff0cQGIS\u8fd8\u652f\u6301\u5e03\u5c40\u6a21\u677f\uff0c\u8fd9\u4e9b\u5e03\u5c40\u6a21\u677f\u672c\u8d28\u4e0a\u662f\u5c06\u6240\u6709\u9879\u4fdd\u5b58\u5230.qpt\u6587\u4ef6\u4e2d\uff08\u4f7f\u7528XML\u8bed\u6cd5\uff09\u3002 \u4e00\u65e6\u7ec4\u5408\u51c6\u5907\u5c31\u7eea\uff08\u5e03\u5c40\u9879\u5df2\u7ecf\u521b\u5efa\u5e76\u6dfb\u52a0\u5230\u7ec4\u5408\u4e2d\uff09\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7ee7\u7eed\u751f\u6210\u6805\u683c\u6216\u8005\u77e2\u91cf\u8f93\u51fa\u3002 10.3.1 \u5bfc\u51fa\u5e03\u5c40 \u2693\ufe0e \u5bfc\u51fa\u5e03\u5c40\uff0c\u5fc5\u987b\u4f7f\u7528 QgsLayoutExporter \u7c7b\u3002 1 2 3 4 pdf_path = os . path . join ( QgsProject . instance () . homePath (), \"output.pdf\" ) exporter = QgsLayoutExporter ( layout ) exporter . exportToPdf ( pdf_path , QgsLayoutExporter . PdfExportSettings ()) \u4f7f\u7528 exportToImage() \u5bfc\u51fa\u56fe\u50cf\uff0c\u800c\u4e0d\u662f\u4e00\u4e2aPDF\u6587\u4ef6\u3002 10.3.2 \u5bfc\u51fa\u5e03\u5c40\u56fe\u96c6 \u2693\ufe0e \u5982\u679c\u8981\u4ece\u5e03\u5c40\u4e2d\u5bfc\u51fa\u6240\u6709\u9875\u9762\uff08\u5728\u914d\u7f6e\u4e2d\u542f\u7528\u4e86\u56fe\u96c6\u9009\u9879\uff09\uff0c\u5219\u9700\u8981\u5728\u5bfc\u51fa\u5668\uff08 QgsLayoutExporter \uff09\u4e2d\u4f7f\u7528 altas() \u65b9\u6cd5\uff0c\u5e76\u8fdb\u884c\u5c11\u91cf\u8c03\u6574\u3002\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u9875\u9762\u5bfc\u51fa\u4e3aPNG\u56fe\u50cf\uff1a 1 exporter . exportToImage ( layout . atlas (), base_path , 'png' , QgsLayoutExporter . ImageExportSettings ()) \u8bf7\u6ce8\u610f\uff0c\u8f93\u51fa\u4fdd\u5b58\u5728\u57fa\u672c\u8def\u5f84\u6587\u4ef6\u5939\u4e2d\uff0c\u4f7f\u7528\u56fe\u96c6\u4e0a\u914d\u7f6e\u7684\u8f93\u51fa\u6587\u4ef6\u540d\u8868\u8fbe\u5f0f\u3002","title":"10-\u5730\u56fe\u6e32\u67d3\u548c\u6253\u5370"},{"location":"10-%E5%9C%B0%E5%9B%BE%E6%B8%B2%E6%9F%93%E5%92%8C%E6%89%93%E5%8D%B0/#10","text":"\u5f53\u8f93\u5165\u6570\u636e\u4f5c\u4e3a\u5730\u56fe\u5448\u73b0\u65f6\uff0c\u901a\u5e38\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\u4f7f\u7528*QgsMapRendererJob*\u5feb\u901f\u8fdb\u884c\uff0c\u6216\u8005\u4f7f\u7528 QgsLayout \u7c7b\u7ec4\u5408\u5730\u56fe\u6765\u751f\u6210\u66f4\u7cbe\u7ec6\u7684\u8f93\u51fa\u3002","title":"10 \u5730\u56fe\u6e32\u67d3\u548c\u6253\u5370"},{"location":"10-%E5%9C%B0%E5%9B%BE%E6%B8%B2%E6%9F%93%E5%92%8C%E6%89%93%E5%8D%B0/#101","text":"\u6e32\u67d3\u5b8c\u6210\u540e\uff0c\u521b\u5efa\u4e00\u4e2a QgsMapSettings \u5bf9\u8c61\u6765\u5b9a\u4e49\u6e32\u67d3\u9009\u9879\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u9009\u9879\u6784\u5efa\u4e00\u4e2a QgsMapRendererJob \u7c7b\u3002\u7136\u540e\u4f7f\u7528\u540e\u8005\u6765\u521b\u5efa\u56fe\u50cf\u3002 \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 image_location = os . path . join ( QgsProject . instance () . homePath (), \"render.png\" ) vlayer = iface . activeLayer () settings = QgsMapSettings () settings . setLayers ([ vlayer ]) settings . setBackgroundColor ( QColor ( 255 , 255 , 255 )) settings . setOutputSize ( QSize ( 800 , 600 )) settings . setExtent ( vlayer . extent ()) render = QgsMapRendererParallelJob ( options ) def finished (): img = render . renderedImage () # \u4fdd\u5b58\u56fe\u50cf; e.g. img.save(\"/Users/myuser/render.png\",\"png\") img . save ( image_location , \"png\" ) render . finished . connect ( finished ) # \u5f00\u59cb\u6e32\u67d3 render . start () # \u901a\u5e38\u4e0d\u9700\u8981\u5faa\u73af\uff0c\u56e0\u4e3a\u8fd9\u91cc\u662f\u5355\u72ec\u4f7f\u7528 from qgis.PyQt.QtCore import QEventLoop loop = QEventLoop () render . finished . connect ( loop . quit ) loop . exec_ ()","title":"10.1 \u7b80\u5355\u7684\u6e32\u67d3"},{"location":"10-%E5%9C%B0%E5%9B%BE%E6%B8%B2%E6%9F%93%E5%92%8C%E6%89%93%E5%8D%B0/#102-crs","text":"\u5982\u679c\u4f60\u6709\u591a\u4e2a\u56fe\u5c42\u5e76\u4e14\u5b83\u4eec\u5177\u6709\u4e0d\u540c\u7684CRS\uff0c\u4e0a\u9762\u7684\u7b80\u5355\u793a\u4f8b\u53ef\u80fd\u4e0d\u8d77\u4f5c\u7528\uff1a\u4ece\u8303\u56f4\u8ba1\u7b97\u4e2d\u83b7\u53d6\u6b63\u786e\u7684\u503c\uff0c\u4f60\u5fc5\u987b\u663e\u5f0f\u8bbe\u7f6e\u76ee\u6807CRS 1 2 3 layers = [ iface . activeLayer ()] settings . setLayers ( layers ) render . setDestinationCrs ( layers [ 0 ] . crs ())","title":"10.2 \u4f7f\u7528\u4e0d\u540c\u7684CRS\u6e32\u67d3\u56fe\u5c42"},{"location":"10-%E5%9C%B0%E5%9B%BE%E6%B8%B2%E6%9F%93%E5%92%8C%E6%89%93%E5%8D%B0/#103","text":"\u5982\u679c\u4f60\u60f3\u8981\u6bd4\u4e0a\u9762\u663e\u793a\u7684\u7b80\u5355\u6e32\u67d3\u66f4\u590d\u6742\u7684\u8f93\u51fa\uff0c\u6253\u5370\u5e03\u5c40\u662f\u4e00\u4e2a\u975e\u5e38\u65b9\u4fbf\u7684\u5de5\u5177\u3002\u53ef\u4ee5\u521b\u5efa\u590d\u6742\u7684\u5730\u56fe\u5e03\u5c40\uff0c\u5305\u62ec\u5730\u56fe\u89c6\u56fe\uff0c\u6807\u7b7e\uff0c\u56fe\u4f8b\uff0c\u8868\u683c\u4ee5\u53ca\u901a\u5e38\u51fa\u73b0\u5728\u7eb8\u8d28\u5730\u56fe\u4e0a\u7684\u5176\u4ed6\u5143\u7d20\u3002\u7136\u540e\u53ef\u4ee5\u5c06\u5e03\u5c40\u5bfc\u51fa\u4e3aPDF\uff0c\u6805\u683c\u56fe\u50cf\u6216\u76f4\u63a5\u6253\u5370\u5728\u6253\u5370\u673a\u4e0a\u3002 \u5e03\u5c40\u7531\u4e00\u5806\u7c7b\u7ec4\u6210\u3002\u5b83\u4eec\u90fd\u5c5e\u4e8e\u6838\u5fc3\u5e93\u3002QGIS\u5e94\u7528\u7a0b\u5e8f\u6709\u4e00\u4e2a\u65b9\u4fbf\u7684GUI\u5e03\u5c40\u5143\u7d20\uff0c\u867d\u7136\u5b83\u5728GUI\u5e93\u4e2d\u4e0d\u53ef\u7528\u3002\u5982\u679c\u4f60\u4e0d\u719f\u6089 Qt Graphics View\u6846\u67b6 \uff0c\u90a3\u4e48\u5efa\u8bae\u4f60\u67e5\u770b\u6587\u6863\uff0c\u56e0\u4e3a\u5e03\u5c40\u662f\u57fa\u4e8e\u5b83\u7684\u3002 \u5e03\u5c40\u7684\u4e2d\u5fc3\u7c7b\u662f QgsLayout \u7c7b\uff0c\u5b83\u662f\u4eceQt QGraphicsScene \u7c7b\u6d3e\u751f\u7684\u3002\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5b83\u7684\u5b9e\u4f8b\uff1a 1 2 3 p = QgsProject () layout = QgsLayout ( p ) layout . initializeDefaults () \u8fd9\u5c06\u4f7f\u7528\u4e00\u4e9b\u9ed8\u8ba4\u8bbe\u7f6e\u521d\u59cb\u5316\u5e03\u5c40\uff0c\u5c06\u7a7a\u7684A4\u9875\u6dfb\u52a0\u5230\u5e03\u5c40\u4e2d\u3002\u4f60\u53ef\u4ee5\u5728\u4e0d\u8c03\u7528 initializeDefaults() \u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u5e03\u5c40\uff0c\u4f46\u4f60\u9700\u8981\u81ea\u5df1\u5411\u5e03\u5c40\u4e2d\u6dfb\u52a0\u9875\u9762\u3002 \u4e4b\u524d\u7684\u4ee3\u7801\u521b\u5efa\u4e86\u5728GUI\u4e2d\u4e0d\u53ef\u89c1\u7684\u201c\u4e34\u65f6\u201d\u5e03\u5c40\u3002\u5b83\u53ef\u4ee5\u65b9\u4fbf\u5feb\u901f\u5730\u6dfb\u52a0\u67d0\u4e9b\u9879\u5e76\u5bfc\u51fa\uff0c\u800c\u4e0d\u4fee\u6539\u9879\u672c\u8eab\uff0c\u4e5f\u4e0d\u4f1a\u5411\u6237\u516c\u5f00\u8fd9\u4e9b\u66f4\u6539\u3002\u5982\u679c\u4f60\u5e0c\u671b\u5c06\u5e03\u5c40\u4e0e\u9879\u76ee\u4e00\u8d77\u4fdd\u5b58\u6216\u6062\u590d\uff0c\u5e76\u4f7f\u5176\u5728\u5e03\u5c40\u7ba1\u7406\u5668\u4e2d\u53ef\u7528\uff0c\u6dfb\u52a0\uff1a 1 2 layout . setName ( \"MyLayout\" ) project . layoutManager () . addLayout ( layout ) \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u5e03\u5c40\u4e2d\u6dfb\u52a0\u5404\u79cd\u5143\u7d20\uff08map\uff0clabel\uff0c...\uff09\u3002\u6240\u6709\u8fd9\u4e9b\u5bf9\u8c61\u90fd\u7ee7\u627f\u81ea\u57fa\u7c7b QgsLayoutItem \u3002 \u4ee5\u4e0b\u662f\u53ef\u4ee5\u6dfb\u52a0\u5230\u5e03\u5c40\u7684\u4e00\u4e9b\u4e3b\u8981\u5e03\u5c40\u9879\u7684\u8bf4\u660e\u3002 \u5730\u56fe\u2014\u2014 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5730\u56fe\u5e76\u5c06\u5176\u62c9\u4f38\u5230\u6574\u4e2a\u7eb8\u5f20\u5927\u5c0f 1 2 3 4 5 6 7 map = QgsLayoutItemMap ( layout ) # \u8bbe\u7f6e\u5730\u56fe\u9879\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\uff08\u9ed8\u8ba4\u662f\u5bbd\u9ad8\u90fd\u662f0\uff0c\u4f4d\u7f6e\u57280\uff0c0\uff09 map . attemptMove ( QgsLayoutPoint ( 5 , 5 , QgsUnitTypes . LayoutMillimeters )) map . attemptResize ( QgsLayoutSize ( 200 , 200 , QgsUnitTypes . LayoutMillimeters )) # \u63d0\u4f9b\u6e32\u67d3\u8303\u56f4 map . zoomToExtent ( iface . mapCanvas () . extent ()) layout . addItem ( map ) \u6807\u7b7e\u2014\u2014\u5141\u8bb8\u663e\u793a\u6807\u7b7e\u3002\u53ef\u4ee5\u4fee\u6539\u5176\u5b57\u4f53\uff0c\u989c\u8272\uff0c\u5bf9\u9f50\u548c\u8fb9\u8ddd 1 2 3 4 label = QgsLayoutItemLabel ( layout ) label . setText ( \"Hello world\" ) label . adjustSizeToText () layout . addItem ( label ) \u56fe\u4f8b 1 2 3 legend = QgsLayoutItemLegend ( layout ) legend . setLinkedMap ( map ) # map\u662f\u4e00\u4e2aQgsLayoutItemMap\u5b9e\u4f8b layout . addItem ( legend ) \u6bd4\u4f8b\u5c3a 1 2 3 4 5 item = QgsLayoutItemScaleBar ( layout ) item . setStyle ( 'Numeric' ) # \u53ef\u9009\u62e9\u4fee\u6539\u6837\u5f0f item . setLinkedMap ( map ) # map\u662f\u4e00\u4e2aQgsLayoutItemMap\u5b9e\u4f8b item . applyDefaultSize () layout . addItem ( item ) \u7bad\u5934 \u56fe\u7247 \u57fa\u672c\u5f62\u72b6 \u57fa\u4e8e\u8282\u70b9\u7684\u5f62\u72b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 polygon = QPolygonF () polygon . append ( QPointF ( 0.0 , 0.0 )) polygon . append ( QPointF ( 100.0 , 0.0 )) polygon . append ( QPointF ( 200.0 , 100.0 )) polygon . append ( QPointF ( 100.0 , 200.0 )) polygonItem = QgsLayoutItemPolygon ( polygon , layout ) layout . addItem ( polygonItem ) props = {} props [ \"color\" ] = \"green\" props [ \"style\" ] = \"solid\" props [ \"style_border\" ] = \"solid\" props [ \"color_border\" ] = \"black\" props [ \"width_border\" ] = \"10.0\" props [ \"joinstyle\" ] = \"miter\" symbol = QgsFillSymbol . createSimple ( props ) polygonItem . setSymbol ( symbol ) \u8868\u683c \u5c06\u9879\u6dfb\u52a0\u5230\u5e03\u5c40\u540e\uff0c\u53ef\u4ee5\u79fb\u52a8\u5e76\u8c03\u6574\u5176\u5927\u5c0f\uff1a 1 2 item . attemptMove ( QgsLayoutPoint ( 1.4 , 1.8 , QgsUnitTypes . LayoutCentimeters )) item . attemptResize ( QgsLayoutSize ( 2.8 , 2.2 , QgsUnitTypes . LayoutCentimeters )) \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u9879\u76ee\u5468\u56f4\u90fd\u4f1a\u7ed8\u5236\u4e00\u4e2a\u6846\u67b6\uff0c\u4f60\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u5220\u9664\u5b83\uff1a 1 label . setFrameEnabled ( False ) \u9664\u4e86\u624b\u52a8\u521b\u5efa\u5e03\u5c40\u9879\u5916\uff0cQGIS\u8fd8\u652f\u6301\u5e03\u5c40\u6a21\u677f\uff0c\u8fd9\u4e9b\u5e03\u5c40\u6a21\u677f\u672c\u8d28\u4e0a\u662f\u5c06\u6240\u6709\u9879\u4fdd\u5b58\u5230.qpt\u6587\u4ef6\u4e2d\uff08\u4f7f\u7528XML\u8bed\u6cd5\uff09\u3002 \u4e00\u65e6\u7ec4\u5408\u51c6\u5907\u5c31\u7eea\uff08\u5e03\u5c40\u9879\u5df2\u7ecf\u521b\u5efa\u5e76\u6dfb\u52a0\u5230\u7ec4\u5408\u4e2d\uff09\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7ee7\u7eed\u751f\u6210\u6805\u683c\u6216\u8005\u77e2\u91cf\u8f93\u51fa\u3002","title":"10.3 \u4f7f\u7528\u6253\u5370\u5e03\u5c40\u8f93\u51fa"},{"location":"10-%E5%9C%B0%E5%9B%BE%E6%B8%B2%E6%9F%93%E5%92%8C%E6%89%93%E5%8D%B0/#1031","text":"\u5bfc\u51fa\u5e03\u5c40\uff0c\u5fc5\u987b\u4f7f\u7528 QgsLayoutExporter \u7c7b\u3002 1 2 3 4 pdf_path = os . path . join ( QgsProject . instance () . homePath (), \"output.pdf\" ) exporter = QgsLayoutExporter ( layout ) exporter . exportToPdf ( pdf_path , QgsLayoutExporter . PdfExportSettings ()) \u4f7f\u7528 exportToImage() \u5bfc\u51fa\u56fe\u50cf\uff0c\u800c\u4e0d\u662f\u4e00\u4e2aPDF\u6587\u4ef6\u3002","title":"10.3.1 \u5bfc\u51fa\u5e03\u5c40"},{"location":"10-%E5%9C%B0%E5%9B%BE%E6%B8%B2%E6%9F%93%E5%92%8C%E6%89%93%E5%8D%B0/#1032","text":"\u5982\u679c\u8981\u4ece\u5e03\u5c40\u4e2d\u5bfc\u51fa\u6240\u6709\u9875\u9762\uff08\u5728\u914d\u7f6e\u4e2d\u542f\u7528\u4e86\u56fe\u96c6\u9009\u9879\uff09\uff0c\u5219\u9700\u8981\u5728\u5bfc\u51fa\u5668\uff08 QgsLayoutExporter \uff09\u4e2d\u4f7f\u7528 altas() \u65b9\u6cd5\uff0c\u5e76\u8fdb\u884c\u5c11\u91cf\u8c03\u6574\u3002\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u9875\u9762\u5bfc\u51fa\u4e3aPNG\u56fe\u50cf\uff1a 1 exporter . exportToImage ( layout . atlas (), base_path , 'png' , QgsLayoutExporter . ImageExportSettings ()) \u8bf7\u6ce8\u610f\uff0c\u8f93\u51fa\u4fdd\u5b58\u5728\u57fa\u672c\u8def\u5f84\u6587\u4ef6\u5939\u4e2d\uff0c\u4f7f\u7528\u56fe\u96c6\u4e0a\u914d\u7f6e\u7684\u8f93\u51fa\u6587\u4ef6\u540d\u8868\u8fbe\u5f0f\u3002","title":"10.3.2 \u5bfc\u51fa\u5e03\u5c40\u56fe\u96c6"},{"location":"11-%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E8%BF%87%E6%BB%A4%E5%92%8C%E8%AE%A1%E7%AE%97%E5%80%BC/","text":"11 \u8868\u8fbe\u5f0f\uff0c\u8fc7\u6ee4\u548c\u8ba1\u7b97\u503c \u2693\ufe0e \u6b64\u9875\u9762\u4e0a\u7684\u4ee3\u7801\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from qgis.core import ( edit , QgsExpression , QgsExpressionContext , QgsFeature , QgsFeatureRequest , QgsField , QgsFields , QgsVectorLayer , QgsPointXY , QgsGeometry , QgsProject , QgsExpressionContextUtils ) QGIS\u652f\u6301\u89e3\u6790\u7c7b\u4f3cSQL\u7684\u8868\u8fbe\u5f0f\u3002\u4ec5\u652f\u6301\u4e00\u5c0f\u90e8\u5206SQL\u8bed\u6cd5\u3002\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4f5c\u4e3a\u5e03\u5c14\u503c\uff08\u8fd4\u56deTrue\u6216False\uff09\u6216\u4f5c\u4e3a\u51fd\u6570\uff08\u8fd4\u56de\u6807\u91cf\u503c\uff09\u6765\u8ba1\u7b97\u3002\u6709\u5173\u53ef\u7528\u529f\u80fd\u7684\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u53c2\u9605\u201c\u7528\u6237\u624b\u518c\u201d\u4e2d\u7684\u201c \u8868\u8fbe\u5f0f\u201d \u3002 \u652f\u6301\u4e09\u79cd\u57fa\u672c\u7c7b\u578b\uff1a \u6570\u5b57\u2014\u2014\u6574\u6570\u548c\u5c0f\u6570\uff0c\u4f8b\u5982 123 \uff0c 3.14 \u5b57\u7b26\u4e32\u2014\u2014\u5b83\u4eec\u5fc5\u987b\u7528\u5355\u5f15\u53f7\u62ec\u8d77\u6765\uff1a 'hello world' \u5217\u5f15\u7528\u2014\u2014\u5728\u8bc4\u4f30\u65f6\uff0c\u5f15\u7528\u5c06\u66ff\u6362\u4e3a\u5b57\u6bb5\u7684\u5b9e\u9645\u503c\u3002\u540d\u79f0\u4e0d\u4f1a\u88ab\u8f6c\u4e49\u3002 \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u7b97\u672f\u8fd0\u7b97\u7b26\uff1a + \uff0c - \uff0c * \uff0c / \uff0c ^ \u62ec\u53f7\uff1a\u7528\u4e8e\u5f3a\u5236\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\uff1a (1 + 1) * 3 \u4e00\u5143\u52a0\u51cf\uff1a -12 \uff0c +5 \u6570\u5b66\u51fd\u6570\uff1a sqrt \uff0c sin \uff0c cos \uff0c tan \uff0c asin \uff0c acos \uff0c atan \u8f6c\u6362\u51fd\u6570\uff1a to_int \uff0c to_real \uff0c to_string \uff0c to_date \u51e0\u4f55\u51fd\u6570\uff1a $area \uff0c $length \u51e0\u4f55\u5904\u7406\u51fd\u6570\uff1a $x \uff0c $y \uff0c $geometry \uff0c num_geometries \uff0c centroid \u652f\u6301\u4ee5\u4e0b\u8fd0\u7b97\uff1a \u6bd4\u8f83\uff1a = \uff0c != \uff0c > \uff0c >= \uff0c < \uff0c <= \u6a21\u5f0f\u5339\u914d\uff1a LIKE \uff08\u4f7f\u7528\uff05\u548c_\uff09\uff0c ~ \uff08\u6b63\u5219\u8868\u8fbe\u5f0f\uff09 \u903b\u8f91\u8c13\u8bcd\uff1a AND \uff0c OR \uff0c NOT NULL\u503c\u68c0\u67e5\uff1a\uff0c IS NULL \uff0c IS NOT NULL \u793a\u4f8b\uff1a 1 + 2 = 3 sin(angle) > 0 'Hello' LIKE 'He%' (x > 10 AND y > 10) OR z = 0 \u6807\u91cf\u8868\u8fbe\u5f0f\u7684\u793a\u4f8b\uff1a 2 ^ 10 sqrt(val) $length + 1 11.1 \u89e3\u6790\u8868\u8fbe\u5f0f \u2693\ufe0e \u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u68c0\u67e5\u4e00\u4e2a\u8868\u8fbe\u5f0f\u662f\u5426\u80fd\u88ab\u6b63\u786e\u89e3\u6790\uff1a 1 2 3 4 5 6 7 exp = QgsExpression ( '1 + 1 = 2' ) assert ( not exp . hasParserError ()) exp = QgsExpression ( '1 + 1 = ' ) assert ( exp . hasParserError ()) assert ( exp . parserErrorString () == ' \\n syntax error, unexpected $end' ) 11.2 \u8bc4\u4f30\u8868\u8fbe\u5f0f \u2693\ufe0e \u8868\u8fbe\u5f0f\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff0c\u4f8b\u5982\u8fc7\u6ee4\u8981\u7d20\u6216\u8ba1\u7b97\u65b0\u7684\u5b57\u6bb5\u503c\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u8868\u8fbe\u5f0f\u90fd\u5fc5\u987b\u88ab\u8bc4\u4f30\u3002\u8fd9\u610f\u5473\u7740\u5b83\u7684\u503c\u662f\u901a\u8fc7\u6267\u884c\u6307\u5b9a\u7684\u8ba1\u7b97\u6b65\u9aa4\u8ba1\u7b97\u51fa\u6765\u7684\uff0c\u8ba1\u7b97\u6b65\u9aa4\u53ef\u4ee5\u4ece\u7b80\u5355\u7684\u7b97\u672f\u5230\u96c6\u5408\u8868\u8fbe\u5f0f\u3002 11.2.1 \u57fa\u672c\u8868\u8fbe\u5f0f \u2693\ufe0e \u6b64\u57fa\u672c\u8868\u8fbe\u5f0f\u4ee3\u8868\u4e00\u4e2a\u7b80\u5355\u7684\u7b97\u672f\u8fd0\u7b97\uff1a 1 2 3 4 5 6 exp = QgsExpression ( '2 * 3' ) print ( exp ) print ( exp . evaluate ()) # <QgsExpression: '2 * 3'> # 6 \u8868\u8fbe\u5f0f\u4e5f\u53ef\u7528\u4e8e\u6bd4\u8f83\uff0c1\u4e3a\u771f\uff0c0\u4e3a\u5047 1 2 3 4 exp = QgsExpression ( '1 + 1 = 2' ) exp . evaluate () # 1 11.2.2 \u8981\u7d20\u8868\u8fbe\u5f0f \u2693\ufe0e \u8981\u5bf9\u4e00\u4e2a\u8981\u7d20\u8fdb\u884c\u8868\u8fbe\u5f0f\u8bc4\u4f30\uff0c\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a QgsExpressionContext \u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 evaluation \u51fd\u6570\uff0c\u4ee5\u5141\u8bb8\u8868\u8fbe\u5f0f\u8bbf\u95ee\u8be5\u8981\u7d20\u7684\u5b57\u6bb5\u503c\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a \"Column \"\u5b57\u6bb5\u7684\u8981\u7d20\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u8be5\u8981\u7d20\u6dfb\u52a0\u5230\u8868\u8fbe\u5f0f\u4e0a\u4e0b\u6587\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 fields = QgsFields () field = QgsField ( 'Column' ) fields . append ( field ) feature = QgsFeature () feature . setFields ( fields ) feature . setAttribute ( 0 , 99 ) exp = QgsExpression ( '\"Column\"' ) context = QgsExpressionContext () context . setFeature ( feature ) exp . evaluate ( context ) # 99 \u4e0b\u9762\u662f\u4e00\u4e2a\u6bd4\u8f83\u5b8c\u6574\u7684\u4f8b\u5b50\uff0c\u8bf4\u660e\u5982\u4f55\u5728\u77e2\u91cf\u56fe\u5c42\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u8868\u8fbe\u5f0f\uff0c\u4ee5\u8ba1\u7b97\u65b0\u7684\u5b57\u6bb5\u503c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 from qgis.PyQt.QtCore import QVariant # \u521b\u5efa\u77e2\u91cf\u56fe\u5c42 vl = QgsVectorLayer ( \"Point\" , \"Companies\" , \"memory\" ) pr = vl . dataProvider () pr . addAttributes ([ QgsField ( \"Name\" , QVariant . String ), QgsField ( \"Employees\" , QVariant . Int ), QgsField ( \"Revenue\" , QVariant . Double ), QgsField ( \"Rev. per employee\" , QVariant . Double ), QgsField ( \"Sum\" , QVariant . Double ), QgsField ( \"Fun\" , QVariant . Double )]) vl . updateFields () # \u5c06\u6570\u636e\u6dfb\u52a0\u5230\u524d\u4e09\u4e2a\u5b57\u6bb5 my_data = [ { 'x' : 0 , 'y' : 0 , 'name' : 'ABC' , 'emp' : 10 , 'rev' : 100.1 }, { 'x' : 1 , 'y' : 1 , 'name' : 'DEF' , 'emp' : 2 , 'rev' : 50.5 }, { 'x' : 5 , 'y' : 5 , 'name' : 'GHI' , 'emp' : 100 , 'rev' : 725.9 }] for rec in my_data : f = QgsFeature () pt = QgsPointXY ( rec [ 'x' ], rec [ 'y' ]) f . setGeometry ( QgsGeometry . fromPointXY ( pt )) f . setAttributes ([ rec [ 'name' ], rec [ 'emp' ], rec [ 'rev' ]]) pr . addFeature ( f ) vl . updateExtents () QgsProject . instance () . addMapLayer ( vl ) # \u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u8ba1\u7b97\u6bcf\u4e2a\u5458\u5de5\u7684\u6536\u5165 # \u7b2c\u4e8c\u4e2a\u8ba1\u7b97\u56fe\u5c42\u4e2d\u6240\u6709\u6536\u5165\u503c\u7684\u603b\u548c\u3002 # \u7b2c\u4e09\u4e2a\u8868\u8fbe\u5f0f\u5e76\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\uff0c\u4f46\u662f\u8bf4\u660e\u4e86\u6211\u4eec\u53ef\u4ee5\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u5404\u79cd\u8868\u8fbe\u5f0f\u51fd\u6570\uff08\u4f8b\u5982area\u548cbuffer\uff09\uff1a expression1 = QgsExpression ( '\"Revenue\"/\"Employees\"' ) expression2 = QgsExpression ( 'sum(\"Revenue\")' ) expression3 = QgsExpression ( 'area(buffer($geometry,\"Employees\"))' ) # QgsExpressionContextUtils.globalProjectLayerScopes()\u662f\u4e00\u4e2a\u65b9\u4fbf\u51fd\u6570\uff0c\u53ef\u4e00\u6b21\u6dfb\u52a0\u5168\u5c40\uff0c\u9879\u76ee\u548c\u56fe\u5c42\u8303\u56f4\u3002\u53e6\u5916\uff0c\u8fd9\u4e9b\u8303\u56f4\u4e5f\u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u91cd\u8981\u7684\u662f\u59cb\u7ec8\u4ece\u201c\u6700\u901a\u7528\u201d\u5230\u201c\u6700\u5177\u4f53\u201d\u7684\u8303\u56f4\uff0c\u5373\u4ece\u5168\u5c40\u5230\u9879\u76ee\u518d\u5230\u56fe\u5c42 context = QgsExpressionContext () context . appendScopes ( QgsExpressionContextUtils . globalProjectLayerScopes ( vl )) with edit ( vl ): for f in vl . getFeatures (): context . setFeature ( f ) f [ 'Rev. per employee' ] = expression1 . evaluate ( context ) f [ 'Sum' ] = expression2 . evaluate ( context ) f [ 'Fun' ] = expression3 . evaluate ( context ) vl . updateFeature ( f ) print ( f [ 'Sum' ]) # 876.5 11.2.3 \u8868\u8fbe\u5f0f\u8fc7\u6ee4\u56fe\u5c42 \u2693\ufe0e \u4ee5\u4e0b\u793a\u4f8b\u53ef\u7528\u4e8e\u8fc7\u6ee4\u56fe\u5c42\u5e76\u8fd4\u56de\u4e0e\u8c13\u8bcd\u5339\u914d\u7684\u6240\u6709\u8981\u7d20\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 layer = QgsVectorLayer ( \"Point?field=Test:integer\" , \"addfeat\" , \"memory\" ) layer . startEditing () for i in range ( 10 ): feature = QgsFeature () feature . setAttributes ([ i ]) assert ( layer . addFeature ( feature )) layer . commitChanges () expression = 'Test >= 3' request = QgsFeatureRequest () . setFilterExpression ( expression ) matches = 0 for f in layer . getFeatures ( request ): matches += 1 print ( matches ) # 7 11.3 \u5904\u7406\u5f02\u5e38\u9519\u8bef \u2693\ufe0e \u5728\u8868\u8fbe\u5f0f\u89e3\u6790\u6216\u8bc4\u4f30\u671f\u95f4\uff0c\u53ef\u80fd\u53d1\u751f\u8868\u8fbe\u76f8\u5173\u7684\u9519\u8bef\uff1a 1 2 3 4 5 6 7 exp = QgsExpression ( \"1 + 1 = 2 \" ) if exp . hasParserError (): raise Exception ( exp . parserErrorString ()) value = exp . evaluate () if exp . hasEvalError (): raise ValueError ( exp . evalErrorString ())","title":"11-\u8868\u8fbe\u5f0f\uff0c\u8fc7\u6ee4\u548c\u8ba1\u7b97\u503c"},{"location":"11-%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E8%BF%87%E6%BB%A4%E5%92%8C%E8%AE%A1%E7%AE%97%E5%80%BC/#11","text":"\u6b64\u9875\u9762\u4e0a\u7684\u4ee3\u7801\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from qgis.core import ( edit , QgsExpression , QgsExpressionContext , QgsFeature , QgsFeatureRequest , QgsField , QgsFields , QgsVectorLayer , QgsPointXY , QgsGeometry , QgsProject , QgsExpressionContextUtils ) QGIS\u652f\u6301\u89e3\u6790\u7c7b\u4f3cSQL\u7684\u8868\u8fbe\u5f0f\u3002\u4ec5\u652f\u6301\u4e00\u5c0f\u90e8\u5206SQL\u8bed\u6cd5\u3002\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4f5c\u4e3a\u5e03\u5c14\u503c\uff08\u8fd4\u56deTrue\u6216False\uff09\u6216\u4f5c\u4e3a\u51fd\u6570\uff08\u8fd4\u56de\u6807\u91cf\u503c\uff09\u6765\u8ba1\u7b97\u3002\u6709\u5173\u53ef\u7528\u529f\u80fd\u7684\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u53c2\u9605\u201c\u7528\u6237\u624b\u518c\u201d\u4e2d\u7684\u201c \u8868\u8fbe\u5f0f\u201d \u3002 \u652f\u6301\u4e09\u79cd\u57fa\u672c\u7c7b\u578b\uff1a \u6570\u5b57\u2014\u2014\u6574\u6570\u548c\u5c0f\u6570\uff0c\u4f8b\u5982 123 \uff0c 3.14 \u5b57\u7b26\u4e32\u2014\u2014\u5b83\u4eec\u5fc5\u987b\u7528\u5355\u5f15\u53f7\u62ec\u8d77\u6765\uff1a 'hello world' \u5217\u5f15\u7528\u2014\u2014\u5728\u8bc4\u4f30\u65f6\uff0c\u5f15\u7528\u5c06\u66ff\u6362\u4e3a\u5b57\u6bb5\u7684\u5b9e\u9645\u503c\u3002\u540d\u79f0\u4e0d\u4f1a\u88ab\u8f6c\u4e49\u3002 \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u7b97\u672f\u8fd0\u7b97\u7b26\uff1a + \uff0c - \uff0c * \uff0c / \uff0c ^ \u62ec\u53f7\uff1a\u7528\u4e8e\u5f3a\u5236\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\uff1a (1 + 1) * 3 \u4e00\u5143\u52a0\u51cf\uff1a -12 \uff0c +5 \u6570\u5b66\u51fd\u6570\uff1a sqrt \uff0c sin \uff0c cos \uff0c tan \uff0c asin \uff0c acos \uff0c atan \u8f6c\u6362\u51fd\u6570\uff1a to_int \uff0c to_real \uff0c to_string \uff0c to_date \u51e0\u4f55\u51fd\u6570\uff1a $area \uff0c $length \u51e0\u4f55\u5904\u7406\u51fd\u6570\uff1a $x \uff0c $y \uff0c $geometry \uff0c num_geometries \uff0c centroid \u652f\u6301\u4ee5\u4e0b\u8fd0\u7b97\uff1a \u6bd4\u8f83\uff1a = \uff0c != \uff0c > \uff0c >= \uff0c < \uff0c <= \u6a21\u5f0f\u5339\u914d\uff1a LIKE \uff08\u4f7f\u7528\uff05\u548c_\uff09\uff0c ~ \uff08\u6b63\u5219\u8868\u8fbe\u5f0f\uff09 \u903b\u8f91\u8c13\u8bcd\uff1a AND \uff0c OR \uff0c NOT NULL\u503c\u68c0\u67e5\uff1a\uff0c IS NULL \uff0c IS NOT NULL \u793a\u4f8b\uff1a 1 + 2 = 3 sin(angle) > 0 'Hello' LIKE 'He%' (x > 10 AND y > 10) OR z = 0 \u6807\u91cf\u8868\u8fbe\u5f0f\u7684\u793a\u4f8b\uff1a 2 ^ 10 sqrt(val) $length + 1","title":"11 \u8868\u8fbe\u5f0f\uff0c\u8fc7\u6ee4\u548c\u8ba1\u7b97\u503c"},{"location":"11-%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E8%BF%87%E6%BB%A4%E5%92%8C%E8%AE%A1%E7%AE%97%E5%80%BC/#111","text":"\u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u68c0\u67e5\u4e00\u4e2a\u8868\u8fbe\u5f0f\u662f\u5426\u80fd\u88ab\u6b63\u786e\u89e3\u6790\uff1a 1 2 3 4 5 6 7 exp = QgsExpression ( '1 + 1 = 2' ) assert ( not exp . hasParserError ()) exp = QgsExpression ( '1 + 1 = ' ) assert ( exp . hasParserError ()) assert ( exp . parserErrorString () == ' \\n syntax error, unexpected $end' )","title":"11.1 \u89e3\u6790\u8868\u8fbe\u5f0f"},{"location":"11-%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E8%BF%87%E6%BB%A4%E5%92%8C%E8%AE%A1%E7%AE%97%E5%80%BC/#112","text":"\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff0c\u4f8b\u5982\u8fc7\u6ee4\u8981\u7d20\u6216\u8ba1\u7b97\u65b0\u7684\u5b57\u6bb5\u503c\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u8868\u8fbe\u5f0f\u90fd\u5fc5\u987b\u88ab\u8bc4\u4f30\u3002\u8fd9\u610f\u5473\u7740\u5b83\u7684\u503c\u662f\u901a\u8fc7\u6267\u884c\u6307\u5b9a\u7684\u8ba1\u7b97\u6b65\u9aa4\u8ba1\u7b97\u51fa\u6765\u7684\uff0c\u8ba1\u7b97\u6b65\u9aa4\u53ef\u4ee5\u4ece\u7b80\u5355\u7684\u7b97\u672f\u5230\u96c6\u5408\u8868\u8fbe\u5f0f\u3002","title":"11.2 \u8bc4\u4f30\u8868\u8fbe\u5f0f"},{"location":"11-%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E8%BF%87%E6%BB%A4%E5%92%8C%E8%AE%A1%E7%AE%97%E5%80%BC/#1121","text":"\u6b64\u57fa\u672c\u8868\u8fbe\u5f0f\u4ee3\u8868\u4e00\u4e2a\u7b80\u5355\u7684\u7b97\u672f\u8fd0\u7b97\uff1a 1 2 3 4 5 6 exp = QgsExpression ( '2 * 3' ) print ( exp ) print ( exp . evaluate ()) # <QgsExpression: '2 * 3'> # 6 \u8868\u8fbe\u5f0f\u4e5f\u53ef\u7528\u4e8e\u6bd4\u8f83\uff0c1\u4e3a\u771f\uff0c0\u4e3a\u5047 1 2 3 4 exp = QgsExpression ( '1 + 1 = 2' ) exp . evaluate () # 1","title":"11.2.1 \u57fa\u672c\u8868\u8fbe\u5f0f"},{"location":"11-%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E8%BF%87%E6%BB%A4%E5%92%8C%E8%AE%A1%E7%AE%97%E5%80%BC/#1122","text":"\u8981\u5bf9\u4e00\u4e2a\u8981\u7d20\u8fdb\u884c\u8868\u8fbe\u5f0f\u8bc4\u4f30\uff0c\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a QgsExpressionContext \u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 evaluation \u51fd\u6570\uff0c\u4ee5\u5141\u8bb8\u8868\u8fbe\u5f0f\u8bbf\u95ee\u8be5\u8981\u7d20\u7684\u5b57\u6bb5\u503c\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a \"Column \"\u5b57\u6bb5\u7684\u8981\u7d20\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u8be5\u8981\u7d20\u6dfb\u52a0\u5230\u8868\u8fbe\u5f0f\u4e0a\u4e0b\u6587\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 fields = QgsFields () field = QgsField ( 'Column' ) fields . append ( field ) feature = QgsFeature () feature . setFields ( fields ) feature . setAttribute ( 0 , 99 ) exp = QgsExpression ( '\"Column\"' ) context = QgsExpressionContext () context . setFeature ( feature ) exp . evaluate ( context ) # 99 \u4e0b\u9762\u662f\u4e00\u4e2a\u6bd4\u8f83\u5b8c\u6574\u7684\u4f8b\u5b50\uff0c\u8bf4\u660e\u5982\u4f55\u5728\u77e2\u91cf\u56fe\u5c42\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u8868\u8fbe\u5f0f\uff0c\u4ee5\u8ba1\u7b97\u65b0\u7684\u5b57\u6bb5\u503c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 from qgis.PyQt.QtCore import QVariant # \u521b\u5efa\u77e2\u91cf\u56fe\u5c42 vl = QgsVectorLayer ( \"Point\" , \"Companies\" , \"memory\" ) pr = vl . dataProvider () pr . addAttributes ([ QgsField ( \"Name\" , QVariant . String ), QgsField ( \"Employees\" , QVariant . Int ), QgsField ( \"Revenue\" , QVariant . Double ), QgsField ( \"Rev. per employee\" , QVariant . Double ), QgsField ( \"Sum\" , QVariant . Double ), QgsField ( \"Fun\" , QVariant . Double )]) vl . updateFields () # \u5c06\u6570\u636e\u6dfb\u52a0\u5230\u524d\u4e09\u4e2a\u5b57\u6bb5 my_data = [ { 'x' : 0 , 'y' : 0 , 'name' : 'ABC' , 'emp' : 10 , 'rev' : 100.1 }, { 'x' : 1 , 'y' : 1 , 'name' : 'DEF' , 'emp' : 2 , 'rev' : 50.5 }, { 'x' : 5 , 'y' : 5 , 'name' : 'GHI' , 'emp' : 100 , 'rev' : 725.9 }] for rec in my_data : f = QgsFeature () pt = QgsPointXY ( rec [ 'x' ], rec [ 'y' ]) f . setGeometry ( QgsGeometry . fromPointXY ( pt )) f . setAttributes ([ rec [ 'name' ], rec [ 'emp' ], rec [ 'rev' ]]) pr . addFeature ( f ) vl . updateExtents () QgsProject . instance () . addMapLayer ( vl ) # \u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u8ba1\u7b97\u6bcf\u4e2a\u5458\u5de5\u7684\u6536\u5165 # \u7b2c\u4e8c\u4e2a\u8ba1\u7b97\u56fe\u5c42\u4e2d\u6240\u6709\u6536\u5165\u503c\u7684\u603b\u548c\u3002 # \u7b2c\u4e09\u4e2a\u8868\u8fbe\u5f0f\u5e76\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\uff0c\u4f46\u662f\u8bf4\u660e\u4e86\u6211\u4eec\u53ef\u4ee5\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u5404\u79cd\u8868\u8fbe\u5f0f\u51fd\u6570\uff08\u4f8b\u5982area\u548cbuffer\uff09\uff1a expression1 = QgsExpression ( '\"Revenue\"/\"Employees\"' ) expression2 = QgsExpression ( 'sum(\"Revenue\")' ) expression3 = QgsExpression ( 'area(buffer($geometry,\"Employees\"))' ) # QgsExpressionContextUtils.globalProjectLayerScopes()\u662f\u4e00\u4e2a\u65b9\u4fbf\u51fd\u6570\uff0c\u53ef\u4e00\u6b21\u6dfb\u52a0\u5168\u5c40\uff0c\u9879\u76ee\u548c\u56fe\u5c42\u8303\u56f4\u3002\u53e6\u5916\uff0c\u8fd9\u4e9b\u8303\u56f4\u4e5f\u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u91cd\u8981\u7684\u662f\u59cb\u7ec8\u4ece\u201c\u6700\u901a\u7528\u201d\u5230\u201c\u6700\u5177\u4f53\u201d\u7684\u8303\u56f4\uff0c\u5373\u4ece\u5168\u5c40\u5230\u9879\u76ee\u518d\u5230\u56fe\u5c42 context = QgsExpressionContext () context . appendScopes ( QgsExpressionContextUtils . globalProjectLayerScopes ( vl )) with edit ( vl ): for f in vl . getFeatures (): context . setFeature ( f ) f [ 'Rev. per employee' ] = expression1 . evaluate ( context ) f [ 'Sum' ] = expression2 . evaluate ( context ) f [ 'Fun' ] = expression3 . evaluate ( context ) vl . updateFeature ( f ) print ( f [ 'Sum' ]) # 876.5","title":"11.2.2 \u8981\u7d20\u8868\u8fbe\u5f0f"},{"location":"11-%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E8%BF%87%E6%BB%A4%E5%92%8C%E8%AE%A1%E7%AE%97%E5%80%BC/#1123","text":"\u4ee5\u4e0b\u793a\u4f8b\u53ef\u7528\u4e8e\u8fc7\u6ee4\u56fe\u5c42\u5e76\u8fd4\u56de\u4e0e\u8c13\u8bcd\u5339\u914d\u7684\u6240\u6709\u8981\u7d20\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 layer = QgsVectorLayer ( \"Point?field=Test:integer\" , \"addfeat\" , \"memory\" ) layer . startEditing () for i in range ( 10 ): feature = QgsFeature () feature . setAttributes ([ i ]) assert ( layer . addFeature ( feature )) layer . commitChanges () expression = 'Test >= 3' request = QgsFeatureRequest () . setFilterExpression ( expression ) matches = 0 for f in layer . getFeatures ( request ): matches += 1 print ( matches ) # 7","title":"11.2.3 \u8868\u8fbe\u5f0f\u8fc7\u6ee4\u56fe\u5c42"},{"location":"11-%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E8%BF%87%E6%BB%A4%E5%92%8C%E8%AE%A1%E7%AE%97%E5%80%BC/#113","text":"\u5728\u8868\u8fbe\u5f0f\u89e3\u6790\u6216\u8bc4\u4f30\u671f\u95f4\uff0c\u53ef\u80fd\u53d1\u751f\u8868\u8fbe\u76f8\u5173\u7684\u9519\u8bef\uff1a 1 2 3 4 5 6 7 exp = QgsExpression ( \"1 + 1 = 2 \" ) if exp . hasParserError (): raise Exception ( exp . parserErrorString ()) value = exp . evaluate () if exp . hasEvalError (): raise ValueError ( exp . evalErrorString ())","title":"11.3 \u5904\u7406\u5f02\u5e38\u9519\u8bef"},{"location":"12-%E8%AF%BB%E5%8F%96%E5%92%8C%E5%AD%98%E5%82%A8%E8%AE%BE%E7%BD%AE/","text":"12 \u8bfb\u53d6\u548c\u5b58\u50a8\u8bbe\u7f6e \u2693\ufe0e \u6b64\u9875\u4e0a\u7684\u4ee3\u7801\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 from qgis.core import ( QgsProject , QgsSettings , QgsVectorLayer ) \u5f88\u591a\u65f6\u5019\uff0c\u63d2\u4ef6\u4fdd\u5b58\u4e00\u4e9b\u53d8\u91cf\u975e\u5e38\u6709\u7528\uff0c\u8fd9\u6837\u7528\u6237\u4e0b\u6b21\u8fd0\u884c\u63d2\u4ef6\u65f6\u5c31\u4e0d\u5fc5\u518d\u8f93\u5165\u6216\u9009\u62e9\u5b83\u4eec\u3002 \u501f\u52a9Qt\u548cQGIS API\u53ef\u4ee5\u4fdd\u5b58\u548c\u68c0\u7d22\u8fd9\u4e9b\u53d8\u91cf\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u53d8\u91cf\uff0c\u4f60\u5e94\u8be5\u9009\u62e9\u4e00\u4e2a\u7528\u4e8e\u8bbf\u95ee\u53d8\u91cf\u7684\u952e\u2014\u2014\u5bf9\u4e8e\u7528\u6237\u559c\u6b22\u7684\u989c\u8272\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u952e\u201cfavourite_color\u201d\u6216\u4efb\u4f55\u5176\u4ed6\u6709\u610f\u4e49\u7684\u5b57\u7b26\u4e32\u3002\u5efa\u8bae\u4e3a\u952e\u7684\u547d\u540d\u63d0\u4f9b\u4e00\u4e9b\u7ed3\u6784\u3002 \u6211\u4eec\u53ef\u4ee5\u533a\u5206\u51e0\u79cd\u7c7b\u578b\u7684\u8bbe\u7f6e\uff1a \u5168\u5c40\u8bbe\u7f6e\uff1a \u5b83\u4eec\u7ed1\u5b9a\u5230\u7279\u5b9a\u8ba1\u7b97\u673a\u4e0a\u7684\u7528\u6237\u3002QGIS\u672c\u8eab\u5b58\u50a8\u4e86\u8bb8\u591a\u5168\u5c40\u8bbe\u7f6e\uff0c\u4f8b\u5982\uff0c\u4e3b\u7a97\u53e3\u5927\u5c0f\u6216\u9ed8\u8ba4\u6355\u6349\u5bb9\u5dee\u3002\u4f7f\u7528 QgsSettings \u7c7b\u5904\u7406\u8bbe\u7f6e\uff0c\u8be5\u7c7b\u63d0\u4f9b setValue() \u548c value() \u65b9\u6cd5 \u5728\u8fd9\u91cc\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def store (): s = QgsSettings () s . setValue ( \"myplugin/mytext\" , \"hello world\" ) s . setValue ( \"myplugin/myint\" , 10 ) s . setValue ( \"myplugin/myreal\" , 3.14 ) def read (): s = QgsSettings () mytext = s . value ( \"myplugin/mytext\" , \"default text\" ) myint = s . value ( \"myplugin/myint\" , 123 ) myreal = s . value ( \"myplugin/myreal\" , 2.71 ) nonexistent = s . value ( \"myplugin/nonexistent\" , None ) print ( mytext ) print ( myint ) print ( myreal ) print ( nonexistent ) value() \u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u8fd4\u56de\u9ed8\u8ba4\u503c\u3002 \u901a\u8fc7 global_settings.ini \u6587\u4ef6\u5728\u5168\u5c40\u8bbe\u7f6e\u4e2d\u9884\u914d\u7f6e\u9ed8\u8ba4\u503c\uff0c\u66f4\u591a\u8be6\u60c5\u67e5\u770b Deploying QGIS within an organization \u9879\u76ee\u8bbe\u7f6e\uff1a \u5728\u4e0d\u540c\u9879\u76ee\u4e4b\u95f4\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u6b64\u5b83\u4eec\u4e0e\u9879\u76ee\u6587\u4ef6\u76f8\u5173\u8054\u3002\u4ee5\u5730\u56fe\u753b\u5e03\u80cc\u666f\u989c\u8272\u6216\u76ee\u6807\u5750\u6807\u53c2\u8003\u7cfb\u7edf\uff08CRS\uff09\u4f5c\u4e3a\u4f8b\u5b50\u2014\u2014\u767d\u8272\u80cc\u666f\u548cWGS84\u53ef\u80fd\u9002\u7528\u4e8e\u4e00\u4e2a\u9879\u76ee\uff0c\u800c\u9ec4\u8272\u80cc\u666f\u548cUTM\u6295\u5f71\u9002\u7528\u4e8e\u53e6\u4e00\u4e2a\u9879\u76ee\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7528\u6cd5\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 proj = QgsProject . instance () # \u5b58\u50a8\u503c proj . writeEntry ( \"myplugin\" , \"mytext\" , \"hello world\" ) proj . writeEntry ( \"myplugin\" , \"myint\" , 10 ) proj . writeEntry ( \"myplugin\" , \"mydouble\" , 0.01 ) proj . writeEntry ( \"myplugin\" , \"mybool\" , True ) # \u8bfb\u53d6\u503c\uff08\u8fd4\u56de\u5177\u6709\u503c\u7684\u5143\u7ec4\uff0c\u548c\u4e00\u4e2a\u5e03\u5c14\u72b6\u6001\uff0c\u68c0\u7d22\u5230\u7684\u503c\u662f\u5426\u53ef\u4ee5\u8f6c\u6362\u5230\u5b83\u7684\u7c7b\u578b\uff0c string, an integer, a double and a boolean\uff09 mytext , type_conversion_ok = proj . readEntry ( \"myplugin\" , \"mytext\" , \"default text\" ) myint , type_conversion_ok = proj . readNumEntry ( \"myplugin\" , \"myint\" , 123 ) mydouble , type_conversion_ok = proj . readDoubleEntry ( \"myplugin\" , \"mydouble\" , 123 ) mybool , type_conversion_ok = proj . readBoolEntry ( \"myplugin\" , \"mybool\" , 123 ) \u5982\u4f60\u6240\u89c1\uff0c writeEntry() \u65b9\u6cd5\u7528\u4e8e\u8bb8\u591a\u6570\u636e\u7c7b\u578b(integer, string, list)\uff0c\u4f46\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bfb\u53d6\u8bbe\u7f6e\u503c\uff0c\u800c\u4e14\u5fc5\u987b\u4e3a\u6bcf\u79cd\u6570\u636e\u7c7b\u578b\u9009\u62e9\u76f8\u5e94\u7684\u4e00\u4e2a\u3002 \u5730\u56fe\u56fe\u5c42\u8bbe\u7f6e \uff1a\u8fd9\u4e9b\u8bbe\u7f6e\u4e0e\u9879\u76ee\u7684\u56fe\u5c42\u5b9e\u4f8b\u76f8\u5173\u3002\u5b83\u4eec\u4e0d\u4e0e\u56fe\u5c42\u7684\u57fa\u7840\u6570\u636e\u6e90\u8fde\u63a5\uff0c\u56e0\u6b64\u5982\u679c\u4f60\u521b\u5efa\u4e24\u4e2ashapefile\u56fe\u5c42\u5b9e\u4f8b\uff0c\u5219\u5b83\u4eec\u4e0d\u4f1a\u5171\u4eab\u8bbe\u7f6e\u3002\u8bbe\u7f6e\u5b58\u50a8\u5728\u9879\u76ee\u6587\u4ef6\u4e2d\uff0c\u56e0\u6b64\u5982\u679c\u7528\u6237\u518d\u6b21\u6253\u5f00\u9879\u76ee\uff0c\u5219\u4e0e\u56fe\u5c42\u76f8\u5173\u7684\u8bbe\u7f6e\u5c06\u518d\u6b21\u5b58\u5728\u3002\u4f7f\u7528 customProperty() \u65b9\u6cd5\u68c0\u7d22\u7ed9\u5b9a\u8bbe\u7f6e\u7684\u503c\uff0c\u5e76\u53ef\u4f7f\u7528 setCustomProperty() \u8fdb\u884c\u8bbe\u7f6e\u3002 1 2 3 4 5 6 vlayer = QgsVectorLayer () # \u4fdd\u5b58\u503c vlayer . setCustomProperty ( \"mytext\" , \"hello world\" ) # \u518d\u6b21\u8bfb\u53d6\uff08\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de\u201cdefault text\u201d\uff09 mytext = vlayer . customProperty ( \"mytext\" , \"default text\" )","title":"12-\u8bfb\u53d6\u548c\u5b58\u50a8\u8bbe\u7f6e"},{"location":"12-%E8%AF%BB%E5%8F%96%E5%92%8C%E5%AD%98%E5%82%A8%E8%AE%BE%E7%BD%AE/#12","text":"\u6b64\u9875\u4e0a\u7684\u4ee3\u7801\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 from qgis.core import ( QgsProject , QgsSettings , QgsVectorLayer ) \u5f88\u591a\u65f6\u5019\uff0c\u63d2\u4ef6\u4fdd\u5b58\u4e00\u4e9b\u53d8\u91cf\u975e\u5e38\u6709\u7528\uff0c\u8fd9\u6837\u7528\u6237\u4e0b\u6b21\u8fd0\u884c\u63d2\u4ef6\u65f6\u5c31\u4e0d\u5fc5\u518d\u8f93\u5165\u6216\u9009\u62e9\u5b83\u4eec\u3002 \u501f\u52a9Qt\u548cQGIS API\u53ef\u4ee5\u4fdd\u5b58\u548c\u68c0\u7d22\u8fd9\u4e9b\u53d8\u91cf\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u53d8\u91cf\uff0c\u4f60\u5e94\u8be5\u9009\u62e9\u4e00\u4e2a\u7528\u4e8e\u8bbf\u95ee\u53d8\u91cf\u7684\u952e\u2014\u2014\u5bf9\u4e8e\u7528\u6237\u559c\u6b22\u7684\u989c\u8272\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u952e\u201cfavourite_color\u201d\u6216\u4efb\u4f55\u5176\u4ed6\u6709\u610f\u4e49\u7684\u5b57\u7b26\u4e32\u3002\u5efa\u8bae\u4e3a\u952e\u7684\u547d\u540d\u63d0\u4f9b\u4e00\u4e9b\u7ed3\u6784\u3002 \u6211\u4eec\u53ef\u4ee5\u533a\u5206\u51e0\u79cd\u7c7b\u578b\u7684\u8bbe\u7f6e\uff1a \u5168\u5c40\u8bbe\u7f6e\uff1a \u5b83\u4eec\u7ed1\u5b9a\u5230\u7279\u5b9a\u8ba1\u7b97\u673a\u4e0a\u7684\u7528\u6237\u3002QGIS\u672c\u8eab\u5b58\u50a8\u4e86\u8bb8\u591a\u5168\u5c40\u8bbe\u7f6e\uff0c\u4f8b\u5982\uff0c\u4e3b\u7a97\u53e3\u5927\u5c0f\u6216\u9ed8\u8ba4\u6355\u6349\u5bb9\u5dee\u3002\u4f7f\u7528 QgsSettings \u7c7b\u5904\u7406\u8bbe\u7f6e\uff0c\u8be5\u7c7b\u63d0\u4f9b setValue() \u548c value() \u65b9\u6cd5 \u5728\u8fd9\u91cc\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def store (): s = QgsSettings () s . setValue ( \"myplugin/mytext\" , \"hello world\" ) s . setValue ( \"myplugin/myint\" , 10 ) s . setValue ( \"myplugin/myreal\" , 3.14 ) def read (): s = QgsSettings () mytext = s . value ( \"myplugin/mytext\" , \"default text\" ) myint = s . value ( \"myplugin/myint\" , 123 ) myreal = s . value ( \"myplugin/myreal\" , 2.71 ) nonexistent = s . value ( \"myplugin/nonexistent\" , None ) print ( mytext ) print ( myint ) print ( myreal ) print ( nonexistent ) value() \u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u8fd4\u56de\u9ed8\u8ba4\u503c\u3002 \u901a\u8fc7 global_settings.ini \u6587\u4ef6\u5728\u5168\u5c40\u8bbe\u7f6e\u4e2d\u9884\u914d\u7f6e\u9ed8\u8ba4\u503c\uff0c\u66f4\u591a\u8be6\u60c5\u67e5\u770b Deploying QGIS within an organization \u9879\u76ee\u8bbe\u7f6e\uff1a \u5728\u4e0d\u540c\u9879\u76ee\u4e4b\u95f4\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u6b64\u5b83\u4eec\u4e0e\u9879\u76ee\u6587\u4ef6\u76f8\u5173\u8054\u3002\u4ee5\u5730\u56fe\u753b\u5e03\u80cc\u666f\u989c\u8272\u6216\u76ee\u6807\u5750\u6807\u53c2\u8003\u7cfb\u7edf\uff08CRS\uff09\u4f5c\u4e3a\u4f8b\u5b50\u2014\u2014\u767d\u8272\u80cc\u666f\u548cWGS84\u53ef\u80fd\u9002\u7528\u4e8e\u4e00\u4e2a\u9879\u76ee\uff0c\u800c\u9ec4\u8272\u80cc\u666f\u548cUTM\u6295\u5f71\u9002\u7528\u4e8e\u53e6\u4e00\u4e2a\u9879\u76ee\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7528\u6cd5\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 proj = QgsProject . instance () # \u5b58\u50a8\u503c proj . writeEntry ( \"myplugin\" , \"mytext\" , \"hello world\" ) proj . writeEntry ( \"myplugin\" , \"myint\" , 10 ) proj . writeEntry ( \"myplugin\" , \"mydouble\" , 0.01 ) proj . writeEntry ( \"myplugin\" , \"mybool\" , True ) # \u8bfb\u53d6\u503c\uff08\u8fd4\u56de\u5177\u6709\u503c\u7684\u5143\u7ec4\uff0c\u548c\u4e00\u4e2a\u5e03\u5c14\u72b6\u6001\uff0c\u68c0\u7d22\u5230\u7684\u503c\u662f\u5426\u53ef\u4ee5\u8f6c\u6362\u5230\u5b83\u7684\u7c7b\u578b\uff0c string, an integer, a double and a boolean\uff09 mytext , type_conversion_ok = proj . readEntry ( \"myplugin\" , \"mytext\" , \"default text\" ) myint , type_conversion_ok = proj . readNumEntry ( \"myplugin\" , \"myint\" , 123 ) mydouble , type_conversion_ok = proj . readDoubleEntry ( \"myplugin\" , \"mydouble\" , 123 ) mybool , type_conversion_ok = proj . readBoolEntry ( \"myplugin\" , \"mybool\" , 123 ) \u5982\u4f60\u6240\u89c1\uff0c writeEntry() \u65b9\u6cd5\u7528\u4e8e\u8bb8\u591a\u6570\u636e\u7c7b\u578b(integer, string, list)\uff0c\u4f46\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bfb\u53d6\u8bbe\u7f6e\u503c\uff0c\u800c\u4e14\u5fc5\u987b\u4e3a\u6bcf\u79cd\u6570\u636e\u7c7b\u578b\u9009\u62e9\u76f8\u5e94\u7684\u4e00\u4e2a\u3002 \u5730\u56fe\u56fe\u5c42\u8bbe\u7f6e \uff1a\u8fd9\u4e9b\u8bbe\u7f6e\u4e0e\u9879\u76ee\u7684\u56fe\u5c42\u5b9e\u4f8b\u76f8\u5173\u3002\u5b83\u4eec\u4e0d\u4e0e\u56fe\u5c42\u7684\u57fa\u7840\u6570\u636e\u6e90\u8fde\u63a5\uff0c\u56e0\u6b64\u5982\u679c\u4f60\u521b\u5efa\u4e24\u4e2ashapefile\u56fe\u5c42\u5b9e\u4f8b\uff0c\u5219\u5b83\u4eec\u4e0d\u4f1a\u5171\u4eab\u8bbe\u7f6e\u3002\u8bbe\u7f6e\u5b58\u50a8\u5728\u9879\u76ee\u6587\u4ef6\u4e2d\uff0c\u56e0\u6b64\u5982\u679c\u7528\u6237\u518d\u6b21\u6253\u5f00\u9879\u76ee\uff0c\u5219\u4e0e\u56fe\u5c42\u76f8\u5173\u7684\u8bbe\u7f6e\u5c06\u518d\u6b21\u5b58\u5728\u3002\u4f7f\u7528 customProperty() \u65b9\u6cd5\u68c0\u7d22\u7ed9\u5b9a\u8bbe\u7f6e\u7684\u503c\uff0c\u5e76\u53ef\u4f7f\u7528 setCustomProperty() \u8fdb\u884c\u8bbe\u7f6e\u3002 1 2 3 4 5 6 vlayer = QgsVectorLayer () # \u4fdd\u5b58\u503c vlayer . setCustomProperty ( \"mytext\" , \"hello world\" ) # \u518d\u6b21\u8bfb\u53d6\uff08\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de\u201cdefault text\u201d\uff09 mytext = vlayer . customProperty ( \"mytext\" , \"default text\" )","title":"12 \u8bfb\u53d6\u548c\u5b58\u50a8\u8bbe\u7f6e"},{"location":"13-%E4%B8%8E%E7%94%A8%E6%88%B7%E9%80%9A%E4%BF%A1/","text":"13 \u4e0e\u7528\u6237\u901a\u4fe1 \u2693\ufe0e \u672c\u8282\u4ee3\u7801\u7247\u6bb5\u9700\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from qgis.core import ( QgsMessageLog , QgsGeometry , ) from qgis.gui import ( QgsMessageBar , ) from qgis.PyQt.QtWidgets import ( QSizePolicy , QPushButton , QDialog , QGridLayout , QDialogButtonBox , ) \u672c\u8282\u4ecb\u7ecd\u7528\u4e8e\u4e0e\u7528\u6237\u901a\u4fe1\u7684\u4e00\u4e9b\u65b9\u6cd5\u548c\u5143\u7d20\uff0c\u4ee5\u4fdd\u6301\u7528\u6237\u63a5\u53e3\u7684\u4e00\u81f4\u6027\u3002 13.1 \u663e\u793a\u6d88\u606f\u2014\u2014QgsMessageBar \u2693\ufe0e \u4ece\u7528\u6237\u4f53\u9a8c\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4f7f\u7528\u6d88\u606f\u6846\u53ef\u80fd\u662f\u4e2a\u574f\u4e3b\u610f\u3002\u4e3a\u4e86\u663e\u793a\u4e00\u5c0f\u884c\u4fe1\u606f\u6216\u8b66\u544a/\u9519\u8bef\u6d88\u606f\uff0cQGIS\u6d88\u606f\u680f\u901a\u5e38\u662f\u66f4\u597d\u7684\u9009\u62e9\u3002 \u4f7f\u7528QGIS\u63a5\u53e3\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u5728\u6d88\u606f\u680f\u4e2d\u663e\u793a\u6d88\u606f 1 2 from qgis.core import Qgis iface . messageBar () . pushMessage ( \"Error\" , \"I'm sorry Dave, I'm afraid I can't do that\" , level = Qgis . Critical ) QGIS\u6d88\u606f\u680f \u4f60\u53ef\u4ee5\u8bbe\u7f6e\u6301\u7eed\u65f6\u95f4\uff0c\u5728\u6709\u9650\u65f6\u95f4\u5185\u663e\u793a\u5b83 1 iface . messageBar () . pushMessage ( \"Ooops\" , \"The plugin is not working as it should\" , level = Qgis . Critical , duration = 3 ) \u5e26\u5b9a\u65f6\u5668\u7684QGIS\u6d88\u606f\u680f \u4e0a\u9762\u7684\u793a\u4f8b\u663e\u793a\u4e86\u9519\u8bef\u680f\uff0c\u4f46 level \u53c2\u6570\u53ef\u7528\u4e8e\u521b\u5efa\u8b66\u544a\u6d88\u606f\u6216\u6b63\u5e38\u6d88\u606f\u2014\u2014\u4f7f\u7528 Qgis.MessageLevel \u679a\u4e3e\uff0c\u4f60\u6700\u591a\u53ef\u4ee5\u4f7f\u75284\u4e2a\u4e0d\u540c\u7ea7\u522b\uff1a Info Warning Critical Success QGIS\u6d88\u606f\u680f\uff08info\uff09 \u63a7\u4ef6\u53ef\u4ee5\u6dfb\u52a0\u5230\u6d88\u606f\u680f\u4e2d\uff0c\u4f8b\u5982\u7528\u4e8e\u663e\u793a\u66f4\u591a\u4fe1\u606f\u7684\u6309\u94ae 1 2 3 4 5 6 7 8 9 def showError (): pass widget = iface . messageBar () . createMessage ( \"Missing Layers\" , \"Show Me\" ) button = QPushButton ( widget ) button . setText ( \"Show Me\" ) button . pressed . connect ( showError ) widget . layout () . addWidget ( button ) iface . messageBar () . pushWidget ( widget , Qgis . Warning ) \u5e26\u6709\u6309\u94ae\u7684QGIS\u6d88\u606f\u680f \u4f60\u751a\u81f3\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u5bf9\u8bdd\u6846\u4e2d\u4f7f\u7528\u6d88\u606f\u680f\uff0c\u8fd9\u6837\u5c31\u4e0d\u5fc5\u663e\u793a\u6d88\u606f\u6846\uff0c\u6216\u8005\u5728\u4e3bQGIS\u7a97\u53e3\u4e2d\u663e\u793a\u6d88\u606f\u65f6\u6ca1\u6709\u610f\u4e49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class MyDialog ( QDialog ): def __init__ ( self ): QDialog . __init__ ( self ) self . bar = QgsMessageBar () self . bar . setSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Fixed ) self . setLayout ( QGridLayout ()) self . layout () . setContentsMargins ( 0 , 0 , 0 , 0 ) self . buttonbox = QDialogButtonBox ( QDialogButtonBox . Ok ) self . buttonbox . accepted . connect ( self . run ) self . layout () . addWidget ( self . buttonbox , 0 , 0 , 2 , 1 ) self . layout () . addWidget ( self . bar , 0 , 0 , 1 , 1 ) def run ( self ): self . bar . pushMessage ( \"Hello\" , \"World\" , level = Qgis . Info ) myDlg = MyDialog () myDlg . show () \u81ea\u5b9a\u4e49\u5bf9\u8bdd\u6846\u4e2d\u7684QGIS\u6d88\u606f\u680f 13.2 \u663e\u793a\u8fdb\u5ea6\u6761 \u2693\ufe0e \u8fdb\u5ea6\u6761\u4e5f\u53ef\u4ee5\u653e\u5728QGIS\u6d88\u606f\u680f\u4e2d\uff0c\u6b63\u5982\u6211\u4eec\u6240\u89c1\uff0c\u5b83\u63a5\u53d7\u63a7\u4ef6\u3002\u4ee5\u4e0b\u662f\u4f60\u53ef\u4ee5\u5728\u63a7\u5236\u53f0\u4e2d\u5c1d\u8bd5\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import time from qgis.PyQt.QtWidgets import QProgressBar from qgis.PyQt.QtCore import * progressMessageBar = iface . messageBar () . createMessage ( \"Doing something boring...\" ) progress = QProgressBar () progress . setMaximum ( 10 ) progress . setAlignment ( Qt . AlignLeft | Qt . AlignVCenter ) progressMessageBar . layout () . addWidget ( progress ) iface . messageBar () . pushWidget ( progressMessageBar , Qgis . Info ) for i in range ( 10 ): time . sleep ( 1 ) progress . setValue ( i + 1 ) iface . messageBar () . clearWidgets () \u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u72b6\u6001\u680f\u62a5\u544a\u8fdb\u5ea6\uff0c\u5982\u4e0b\u793a\u4f8b\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 vlayer = iface . activeLayer () count = vlayer . featureCount () features = vlayer . getFeatures () for i , feature in enumerate ( features ): # \u505a\u4e00\u4e9b\u8017\u65f6\u4efb\u52a1 print ( '' ) # \u7ed9\u4e88\u8db3\u591f\u7684\u65f6\u95f4\u6765\u6253\u5370\u8fdb\u5ea6 percent = i / float ( count ) * 100 # iface.mainWindow().statusBar().showMessage(\"Processed {} %\".format(int(percent))) iface . statusBarIface () . showMessage ( \"Processed {} %\" . format ( int ( percent ))) iface . statusBarIface () . clearMessage () 13.3 \u65e5\u5fd7 \u2693\ufe0e QGIS\u6709\u4e09\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0c\u8bb0\u5f55\u548c\u4fdd\u5b58\u6709\u5173\u4ee3\u7801\u6267\u884c\u7684\u6240\u6709\u4fe1\u606f\u3002\u6bcf\u79cd\u7c7b\u578b\u90fd\u6709\u7279\u5b9a\u7684\u8f93\u51fa\u4f4d\u7f6e\u3002\u8bf7\u8003\u8651\u4f7f\u7528\u6b63\u786e\u7684\u65e5\u5fd7\u8bb0\u5f55\u65b9\u5f0f\uff1a QgsMessageLog \u7528\u4e8e\u5411\u7528\u6237\u4f20\u8fbe\u95ee\u9898\u3002QgsMessageLog\u7684\u8f93\u51fa\u663e\u793a\u5728\u65e5\u5fd7\u6d88\u606f\u9762\u677f\u4e2d\u3002 Python\u7684**logging**\u6a21\u5757\u7528\u4e8e\u8c03\u8bd5QGIS Python API\uff08PyQGIS\uff09\u3002\u5efa\u8baePython\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u5176\u8c03\u8bd5\u4ee3\u7801\uff0c\u4f8b\u5982\uff0c\u8981\u7d20\u7684id\u6216\u8005\u51e0\u4f55\u3002 QgsLogger \u7528\u4e8eQGIS\u5185\u90e8\u8c03\u8bd5/\u5f00\u53d1\uff08\u4f8b\u5982\uff1a\u5f53\u4f60\u6000\u7591\u67d0\u4e9b\u5185\u5bb9\u5f15\u8d77\u4e86\u5d29\u6e83\uff09\u3002\u53ea\u6709QGIS\u7684\u5f00\u53d1\u8005\u7248\u672c\u53ef\u7528\u3002 \u4e0d\u540c\u65e5\u5fd7\u8bb0\u5f55\u7c7b\u578b\u7684\u793a\u4f8b\u5982\u4e0b\u6240\u793a\u3002 \u8b66\u544a \u5728\u591a\u7ebf\u7a0b\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528Python print \u8bed\u53e5\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u5e76\u4e14\u5f88\u5927\u7a0b\u5ea6\u964d\u4f4e\u7b97\u6cd5\u7684\u901f\u5ea6\u3002\u5305\u62ec\u51fd\u6570\u8868\u8fbe\u5f0f\uff0c\u6e32\u67d3\u5668\uff0c\u7b26\u53f7\u5c42\u548c\u5904\u7406\u7b97\u6cd5\uff08\u7b49\u7b49\uff09\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u5e94\u8be5\u59cb\u7ec8\u4f7f\u7528Python **logging**\u6a21\u5757\u6216\u7ebf\u7a0b\u5b89\u5168\u7c7b\uff08 QgsLogger \u6216 QgsMessageLog \uff09\u3002 13.3.1 QgsMessageLog \u2693\ufe0e 1 2 3 4 # \u4f60\u53ef\u4ee5\u9009\u62e9\u4f20\u9012'tag'\u548c'level'\u53c2\u6570 QgsMessageLog . logMessage ( \"Your plugin code has been executed correctly\" , 'MyPlugin' , level = Qgis . Info ) QgsMessageLog . logMessage ( \"Your plugin code might have some problems\" , level = Qgis . Warning ) QgsMessageLog . logMessage ( \"Your plugin code has crashed!\" , level = Qgis . Critical ) \u63d0\u793a \u4f60\u53ef\u4ee5\u5728 \u65e5\u5fd7\u6d88\u606f\u9762\u677f \u4e2d\u67e5\u770b QgsMessageLog \u8f93\u51fa\u7684\u65e5\u5fd7\u3002 13.3.2 python logging\u6a21\u5757 \u2693\ufe0e 1 2 3 4 5 6 7 8 9 import logging formatter = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' logfilename = r 'c:\\temp\\example.log' logging . basicConfig ( filename = logfilename , level = logging . DEBUG , format = formatter ) logging . info ( \"This logging info text goes into the file\" ) logging . debug ( \"This logging debug text goes into the file as well\" ) # 2020-10-08 13:14:42,998 - root - INFO - This logging text goes into the file # 2020-10-08 13:14:42,998 - root - DEBUG - This logging debug text goes into the file as well basicConfig\u65b9\u6cd5\u914d\u7f6e\u65e5\u5fd7\u8bb0\u5f55\u7684\u57fa\u672c\u8bbe\u7f6e\u3002\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5b9a\u4e49\u4e86\u6587\u4ef6\u540d\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u548c\u683c\u5f0f\u3002\u6587\u4ef6\u540d\u6307\u7684\u662f\u5c06\u65e5\u5fd7\u6587\u4ef6\u5199\u5165\u7684\u4f4d\u7f6e\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u5b9a\u4e49\u8f93\u51fa\u7684\u7ea7\u522b\uff0c\u683c\u5f0f\u5b9a\u4e49\u8f93\u51fa\u6bcf\u4e2a\u6d88\u606f\u7684\u683c\u5f0f\u3002 \u5982\u679c\u4f60\u60f3\u8981\u6bcf\u6b21\u5728\u6267\u884c\u811a\u672c\u65f6\u5220\u9664\u65e5\u5fd7\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a 1 2 3 if os . path . isfile ( logfilename ): with open ( logfilename , 'w' ) as file : pass \u5982\u4f55\u4f7f\u7528\u5982\u4f55\u4f7f\u7528Python\u65e5\u5fd7\u8bb0\u5f55\u5de5\u5177\u7684\u66f4\u591a\u8d44\u6e90\uff1a https://docs.python.org/3/library/logging.html https://docs.python.org/3/howto/logging.html https://docs.python.org/3/howto/logging-cookbook.html \u8b66\u544a \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4e0d\u8bbe\u7f6e\u65e5\u5fd7\u6587\u4ef6\uff0c\u65e5\u5fd7\u53ef\u80fd\u662f\u591a\u7ebf\u7a0b\u7684\uff0c\u8fd9\u4f1a\u4e25\u91cd\u51cf\u6162\u8f93\u51fa\u901f\u5ea6","title":"13-\u4e0e\u7528\u6237\u901a\u4fe1"},{"location":"13-%E4%B8%8E%E7%94%A8%E6%88%B7%E9%80%9A%E4%BF%A1/#13","text":"\u672c\u8282\u4ee3\u7801\u7247\u6bb5\u9700\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from qgis.core import ( QgsMessageLog , QgsGeometry , ) from qgis.gui import ( QgsMessageBar , ) from qgis.PyQt.QtWidgets import ( QSizePolicy , QPushButton , QDialog , QGridLayout , QDialogButtonBox , ) \u672c\u8282\u4ecb\u7ecd\u7528\u4e8e\u4e0e\u7528\u6237\u901a\u4fe1\u7684\u4e00\u4e9b\u65b9\u6cd5\u548c\u5143\u7d20\uff0c\u4ee5\u4fdd\u6301\u7528\u6237\u63a5\u53e3\u7684\u4e00\u81f4\u6027\u3002","title":"13 \u4e0e\u7528\u6237\u901a\u4fe1"},{"location":"13-%E4%B8%8E%E7%94%A8%E6%88%B7%E9%80%9A%E4%BF%A1/#131-qgsmessagebar","text":"\u4ece\u7528\u6237\u4f53\u9a8c\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4f7f\u7528\u6d88\u606f\u6846\u53ef\u80fd\u662f\u4e2a\u574f\u4e3b\u610f\u3002\u4e3a\u4e86\u663e\u793a\u4e00\u5c0f\u884c\u4fe1\u606f\u6216\u8b66\u544a/\u9519\u8bef\u6d88\u606f\uff0cQGIS\u6d88\u606f\u680f\u901a\u5e38\u662f\u66f4\u597d\u7684\u9009\u62e9\u3002 \u4f7f\u7528QGIS\u63a5\u53e3\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u5728\u6d88\u606f\u680f\u4e2d\u663e\u793a\u6d88\u606f 1 2 from qgis.core import Qgis iface . messageBar () . pushMessage ( \"Error\" , \"I'm sorry Dave, I'm afraid I can't do that\" , level = Qgis . Critical ) QGIS\u6d88\u606f\u680f \u4f60\u53ef\u4ee5\u8bbe\u7f6e\u6301\u7eed\u65f6\u95f4\uff0c\u5728\u6709\u9650\u65f6\u95f4\u5185\u663e\u793a\u5b83 1 iface . messageBar () . pushMessage ( \"Ooops\" , \"The plugin is not working as it should\" , level = Qgis . Critical , duration = 3 ) \u5e26\u5b9a\u65f6\u5668\u7684QGIS\u6d88\u606f\u680f \u4e0a\u9762\u7684\u793a\u4f8b\u663e\u793a\u4e86\u9519\u8bef\u680f\uff0c\u4f46 level \u53c2\u6570\u53ef\u7528\u4e8e\u521b\u5efa\u8b66\u544a\u6d88\u606f\u6216\u6b63\u5e38\u6d88\u606f\u2014\u2014\u4f7f\u7528 Qgis.MessageLevel \u679a\u4e3e\uff0c\u4f60\u6700\u591a\u53ef\u4ee5\u4f7f\u75284\u4e2a\u4e0d\u540c\u7ea7\u522b\uff1a Info Warning Critical Success QGIS\u6d88\u606f\u680f\uff08info\uff09 \u63a7\u4ef6\u53ef\u4ee5\u6dfb\u52a0\u5230\u6d88\u606f\u680f\u4e2d\uff0c\u4f8b\u5982\u7528\u4e8e\u663e\u793a\u66f4\u591a\u4fe1\u606f\u7684\u6309\u94ae 1 2 3 4 5 6 7 8 9 def showError (): pass widget = iface . messageBar () . createMessage ( \"Missing Layers\" , \"Show Me\" ) button = QPushButton ( widget ) button . setText ( \"Show Me\" ) button . pressed . connect ( showError ) widget . layout () . addWidget ( button ) iface . messageBar () . pushWidget ( widget , Qgis . Warning ) \u5e26\u6709\u6309\u94ae\u7684QGIS\u6d88\u606f\u680f \u4f60\u751a\u81f3\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u5bf9\u8bdd\u6846\u4e2d\u4f7f\u7528\u6d88\u606f\u680f\uff0c\u8fd9\u6837\u5c31\u4e0d\u5fc5\u663e\u793a\u6d88\u606f\u6846\uff0c\u6216\u8005\u5728\u4e3bQGIS\u7a97\u53e3\u4e2d\u663e\u793a\u6d88\u606f\u65f6\u6ca1\u6709\u610f\u4e49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class MyDialog ( QDialog ): def __init__ ( self ): QDialog . __init__ ( self ) self . bar = QgsMessageBar () self . bar . setSizePolicy ( QSizePolicy . Minimum , QSizePolicy . Fixed ) self . setLayout ( QGridLayout ()) self . layout () . setContentsMargins ( 0 , 0 , 0 , 0 ) self . buttonbox = QDialogButtonBox ( QDialogButtonBox . Ok ) self . buttonbox . accepted . connect ( self . run ) self . layout () . addWidget ( self . buttonbox , 0 , 0 , 2 , 1 ) self . layout () . addWidget ( self . bar , 0 , 0 , 1 , 1 ) def run ( self ): self . bar . pushMessage ( \"Hello\" , \"World\" , level = Qgis . Info ) myDlg = MyDialog () myDlg . show () \u81ea\u5b9a\u4e49\u5bf9\u8bdd\u6846\u4e2d\u7684QGIS\u6d88\u606f\u680f","title":"13.1 \u663e\u793a\u6d88\u606f\u2014\u2014QgsMessageBar"},{"location":"13-%E4%B8%8E%E7%94%A8%E6%88%B7%E9%80%9A%E4%BF%A1/#132","text":"\u8fdb\u5ea6\u6761\u4e5f\u53ef\u4ee5\u653e\u5728QGIS\u6d88\u606f\u680f\u4e2d\uff0c\u6b63\u5982\u6211\u4eec\u6240\u89c1\uff0c\u5b83\u63a5\u53d7\u63a7\u4ef6\u3002\u4ee5\u4e0b\u662f\u4f60\u53ef\u4ee5\u5728\u63a7\u5236\u53f0\u4e2d\u5c1d\u8bd5\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import time from qgis.PyQt.QtWidgets import QProgressBar from qgis.PyQt.QtCore import * progressMessageBar = iface . messageBar () . createMessage ( \"Doing something boring...\" ) progress = QProgressBar () progress . setMaximum ( 10 ) progress . setAlignment ( Qt . AlignLeft | Qt . AlignVCenter ) progressMessageBar . layout () . addWidget ( progress ) iface . messageBar () . pushWidget ( progressMessageBar , Qgis . Info ) for i in range ( 10 ): time . sleep ( 1 ) progress . setValue ( i + 1 ) iface . messageBar () . clearWidgets () \u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u72b6\u6001\u680f\u62a5\u544a\u8fdb\u5ea6\uff0c\u5982\u4e0b\u793a\u4f8b\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 vlayer = iface . activeLayer () count = vlayer . featureCount () features = vlayer . getFeatures () for i , feature in enumerate ( features ): # \u505a\u4e00\u4e9b\u8017\u65f6\u4efb\u52a1 print ( '' ) # \u7ed9\u4e88\u8db3\u591f\u7684\u65f6\u95f4\u6765\u6253\u5370\u8fdb\u5ea6 percent = i / float ( count ) * 100 # iface.mainWindow().statusBar().showMessage(\"Processed {} %\".format(int(percent))) iface . statusBarIface () . showMessage ( \"Processed {} %\" . format ( int ( percent ))) iface . statusBarIface () . clearMessage ()","title":"13.2 \u663e\u793a\u8fdb\u5ea6\u6761"},{"location":"13-%E4%B8%8E%E7%94%A8%E6%88%B7%E9%80%9A%E4%BF%A1/#133","text":"QGIS\u6709\u4e09\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0c\u8bb0\u5f55\u548c\u4fdd\u5b58\u6709\u5173\u4ee3\u7801\u6267\u884c\u7684\u6240\u6709\u4fe1\u606f\u3002\u6bcf\u79cd\u7c7b\u578b\u90fd\u6709\u7279\u5b9a\u7684\u8f93\u51fa\u4f4d\u7f6e\u3002\u8bf7\u8003\u8651\u4f7f\u7528\u6b63\u786e\u7684\u65e5\u5fd7\u8bb0\u5f55\u65b9\u5f0f\uff1a QgsMessageLog \u7528\u4e8e\u5411\u7528\u6237\u4f20\u8fbe\u95ee\u9898\u3002QgsMessageLog\u7684\u8f93\u51fa\u663e\u793a\u5728\u65e5\u5fd7\u6d88\u606f\u9762\u677f\u4e2d\u3002 Python\u7684**logging**\u6a21\u5757\u7528\u4e8e\u8c03\u8bd5QGIS Python API\uff08PyQGIS\uff09\u3002\u5efa\u8baePython\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u5176\u8c03\u8bd5\u4ee3\u7801\uff0c\u4f8b\u5982\uff0c\u8981\u7d20\u7684id\u6216\u8005\u51e0\u4f55\u3002 QgsLogger \u7528\u4e8eQGIS\u5185\u90e8\u8c03\u8bd5/\u5f00\u53d1\uff08\u4f8b\u5982\uff1a\u5f53\u4f60\u6000\u7591\u67d0\u4e9b\u5185\u5bb9\u5f15\u8d77\u4e86\u5d29\u6e83\uff09\u3002\u53ea\u6709QGIS\u7684\u5f00\u53d1\u8005\u7248\u672c\u53ef\u7528\u3002 \u4e0d\u540c\u65e5\u5fd7\u8bb0\u5f55\u7c7b\u578b\u7684\u793a\u4f8b\u5982\u4e0b\u6240\u793a\u3002 \u8b66\u544a \u5728\u591a\u7ebf\u7a0b\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528Python print \u8bed\u53e5\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u5e76\u4e14\u5f88\u5927\u7a0b\u5ea6\u964d\u4f4e\u7b97\u6cd5\u7684\u901f\u5ea6\u3002\u5305\u62ec\u51fd\u6570\u8868\u8fbe\u5f0f\uff0c\u6e32\u67d3\u5668\uff0c\u7b26\u53f7\u5c42\u548c\u5904\u7406\u7b97\u6cd5\uff08\u7b49\u7b49\uff09\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u5e94\u8be5\u59cb\u7ec8\u4f7f\u7528Python **logging**\u6a21\u5757\u6216\u7ebf\u7a0b\u5b89\u5168\u7c7b\uff08 QgsLogger \u6216 QgsMessageLog \uff09\u3002","title":"13.3 \u65e5\u5fd7"},{"location":"13-%E4%B8%8E%E7%94%A8%E6%88%B7%E9%80%9A%E4%BF%A1/#1331-qgsmessagelog","text":"1 2 3 4 # \u4f60\u53ef\u4ee5\u9009\u62e9\u4f20\u9012'tag'\u548c'level'\u53c2\u6570 QgsMessageLog . logMessage ( \"Your plugin code has been executed correctly\" , 'MyPlugin' , level = Qgis . Info ) QgsMessageLog . logMessage ( \"Your plugin code might have some problems\" , level = Qgis . Warning ) QgsMessageLog . logMessage ( \"Your plugin code has crashed!\" , level = Qgis . Critical ) \u63d0\u793a \u4f60\u53ef\u4ee5\u5728 \u65e5\u5fd7\u6d88\u606f\u9762\u677f \u4e2d\u67e5\u770b QgsMessageLog \u8f93\u51fa\u7684\u65e5\u5fd7\u3002","title":"13.3.1 QgsMessageLog"},{"location":"13-%E4%B8%8E%E7%94%A8%E6%88%B7%E9%80%9A%E4%BF%A1/#1332-python-logging","text":"1 2 3 4 5 6 7 8 9 import logging formatter = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' logfilename = r 'c:\\temp\\example.log' logging . basicConfig ( filename = logfilename , level = logging . DEBUG , format = formatter ) logging . info ( \"This logging info text goes into the file\" ) logging . debug ( \"This logging debug text goes into the file as well\" ) # 2020-10-08 13:14:42,998 - root - INFO - This logging text goes into the file # 2020-10-08 13:14:42,998 - root - DEBUG - This logging debug text goes into the file as well basicConfig\u65b9\u6cd5\u914d\u7f6e\u65e5\u5fd7\u8bb0\u5f55\u7684\u57fa\u672c\u8bbe\u7f6e\u3002\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5b9a\u4e49\u4e86\u6587\u4ef6\u540d\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u548c\u683c\u5f0f\u3002\u6587\u4ef6\u540d\u6307\u7684\u662f\u5c06\u65e5\u5fd7\u6587\u4ef6\u5199\u5165\u7684\u4f4d\u7f6e\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u5b9a\u4e49\u8f93\u51fa\u7684\u7ea7\u522b\uff0c\u683c\u5f0f\u5b9a\u4e49\u8f93\u51fa\u6bcf\u4e2a\u6d88\u606f\u7684\u683c\u5f0f\u3002 \u5982\u679c\u4f60\u60f3\u8981\u6bcf\u6b21\u5728\u6267\u884c\u811a\u672c\u65f6\u5220\u9664\u65e5\u5fd7\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a 1 2 3 if os . path . isfile ( logfilename ): with open ( logfilename , 'w' ) as file : pass \u5982\u4f55\u4f7f\u7528\u5982\u4f55\u4f7f\u7528Python\u65e5\u5fd7\u8bb0\u5f55\u5de5\u5177\u7684\u66f4\u591a\u8d44\u6e90\uff1a https://docs.python.org/3/library/logging.html https://docs.python.org/3/howto/logging.html https://docs.python.org/3/howto/logging-cookbook.html \u8b66\u544a \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4e0d\u8bbe\u7f6e\u65e5\u5fd7\u6587\u4ef6\uff0c\u65e5\u5fd7\u53ef\u80fd\u662f\u591a\u7ebf\u7a0b\u7684\uff0c\u8fd9\u4f1a\u4e25\u91cd\u51cf\u6162\u8f93\u51fa\u901f\u5ea6","title":"13.3.2 python logging\u6a21\u5757"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/","text":"14 \u8ba4\u8bc1\u57fa\u7840 \u2693\ufe0e \u672c\u8282\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from qgis.core import ( QgsApplication , QgsRasterLayer , QgsAuthMethodConfig , QgsDataSourceUri , QgsPkiBundle , QgsMessageLog , ) from qgis.gui import ( QgsAuthAuthoritiesEditor , QgsAuthConfigEditor , QgsAuthConfigSelect , QgsAuthSettingsWidget , ) from qgis.PyQt.QtWidgets import ( QWidget , QTabWidget , ) from qgis.PyQt.QtNetwork import QSslCertificate 14.1 \u4ecb\u7ecd \u2693\ufe0e \u8ba4\u8bc1\u57fa\u7840\u7684\u7528\u6237\u53c2\u8003\u53ef\u4ee5\u5728\u7528\u6237\u624b\u518c\u7684 \u201c\u8ba4\u8bc1\u7cfb\u7edf\u6982\u8ff0\u201d \u4e2d\u9605\u8bfb\u3002 \u672c\u7ae0\u662f\u63cf\u8ff0\u4ece\u5f00\u53d1\u4eba\u5458\u89d2\u5ea6\u4f7f\u7528\u8ba4\u8bc1\u7cfb\u7edf\u7684\u6700\u4f73\u5b9e\u8df5\u3002 \u5728QGIS\u684c\u9762\u4e2d\uff0c\u5f53\u9700\u8981\u51ed\u8bc1\u6765\u8bbf\u95ee\u7279\u5b9a\u8d44\u6e90\u65f6\uff0c\u4f8b\u5982\u5f53\u4e00\u4e2a\u56fe\u5c42\u5efa\u7acb\u5728Postgres\u6570\u636e\u5e93\u8fde\u63a5\u65f6\uff0c\u6570\u636e\u63d0\u4f9b\u8005\u5c31\u5e7f\u6cdb\u5730\u4f7f\u7528\u4e86\u8ba4\u8bc1\u7cfb\u7edf\u3002 QGIS gui\u5e93\u4e2d\u8fd8\u6709\u4e00\u4e9b\u90e8\u4ef6\uff0c\u63d2\u4ef6\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u8f7b\u677e\u5730\u5c06\u8ba4\u8bc1\u57fa\u7840\u96c6\u6210\u5230\u4ee3\u7801\u4e2d\uff1a QgsAuthConfigEditor QgsAuthConfigSelect QgsAuthSettingsWidget \u53ef\u4ee5\u4ece\u8ba4\u8bc1\u57fa\u7840 \u6d4b\u8bd5\u4ee3\u7801 \u4e2d\u5b66\u4e60\u826f\u597d\u7684\u4ee3\u7801\u5f15\u7528\u3002 \u8b66\u544a \u7531\u4e8e\u8ba4\u8bc1\u57fa\u7840\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u8003\u8651\u5230\u5b89\u5168\u7ea6\u675f\uff0c\u53ea\u6709\u9009\u5b9a\u7684\u5185\u90e8\u65b9\u6cd5\u96c6\u53ef\u4ee5\u66b4\u9732\u7ed9Python\u3002 14.2 \u8bcd\u6c47\u8868 \u2693\ufe0e \u4ee5\u4e0b\u662f\u672c\u7ae0\u4e2d\u6700\u5e38\u89c1\u5bf9\u8c61\u7684\u4e00\u4e9b\u5b9a\u4e49\u3002 \u4e3b\u5bc6\u7801 \u5141\u8bb8\u8bbf\u95ee\u548c\u89e3\u5bc6\u5b58\u50a8\u5728QGIS\u8ba4\u8bc1\u4e2d\u51ed\u636e\u7684\u5bc6\u7801 \u8ba4\u8bc1\u6570\u636e\u5e93 \u4e00\u4e2a \u4e3b\u5bc6\u7801 \u52a0\u5bc6\u540e\u7684SQLite\u6570\u636e\u5e93 qgis-auth.db \uff0c\u5176\u4e2d \u8ba4\u8bc1\u914d\u7f6e \u5b58\u50a8\u5728\u8fd9\u91cc\u3002\u4f8b\u5982\u7528\u6237\u540d/\u5bc6\u7801\uff0c\u4e2a\u4eba\u8bc1\u4e66\u548c\u5bc6\u94a5\uff0c\u8bc1\u4e66\u9881\u53d1\u673a\u6784 \u8ba4\u8bc1\u6570\u636e\u5e93 \u8ba4\u8bc1\u6570\u636e\u5e93 \u8ba4\u8bc1\u914d\u7f6e \u4e00\u7ec4\u8ba4\u8bc1\u6570\u636e\uff0c\u53d6\u51b3\u4e8e \u8ba4\u8bc1\u65b9\u6cd5 \u3002\u4f8b\u5982\uff0c\u57fa\u672c\u8ba4\u8bc1\u65b9\u6cd5\u5b58\u50a8\u4e00\u5bf9\u7528\u6237\u540d/\u5bc6\u7801\u3002 \u8ba4\u8bc1\u65b9\u6cd5 \u7528\u4e8e\u83b7\u53d6\u8ba4\u8bc1\u7684\u7279\u5b9a\u65b9\u6cd5\u3002\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u6709\u81ea\u5df1\u7684\u534f\u8bae\uff0c\u7528\u4e8e\u83b7\u53d6\u8ba4\u8bc1\u7ea7\u522b\u3002\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u662f\u5728QGIS\u8ba4\u8bc1\u57fa\u7840\u521d\u59cb\u5316\u671f\u95f4\u52a8\u6001\u52a0\u8f7d\u7684\u5171\u4eab\u5e93\u3002 14.3 QgsAuthManager\u5165\u53e3 \u2693\ufe0e \u5355\u4f8b\u7c7b QgsAuthManager \u662f\u4f7f\u7528\u5b58\u50a8\u5728QGIS \u8ba4\u8bc1\u6570\u636e\u5e93 \u52a0\u5bc6\u8bc1\u4e66\u7684\u5165\u53e3\uff0c\u5373\uff0c\u5728\u5f53\u524d \u7528\u6237\u8d44\u6599 \u6587\u4ef6\u5939\u4e0b\u7684 qgis-auth.db \u6587\u4ef6\u3002 \u6b64\u7c7b\u8d1f\u8d23\u7528\u6237\u4ea4\u4e92\uff1a\u901a\u8fc7\u8bbe\u7f6e\u4e3b\u5bc6\u7801\u6216\u900f\u660e\u5730\u4f7f\u7528\u5b83\u6765\u8bbf\u95ee\u52a0\u5bc6\u7684\u5b58\u50a8\u4fe1\u606f\u3002 14.3.1 \u521d\u59cb\u5316\u7ba1\u7406\u5668\u5e76\u8bbe\u7f6e\u4e3b\u5bc6\u7801 \u2693\ufe0e \u4ee5\u4e0b\u4ee3\u7801\u6bb5\u63d0\u4f9b\u4e86\u4e00\u4e2a\u793a\u4f8b\uff0c\u8bbe\u7f6e\u4e3b\u5bc6\u7801\u6765\u6253\u5f00\u5bf9\u8ba4\u8bc1\u8bbe\u7f6e\u7684\u8bbf\u95ee\u6743\u9650\u3002\u4ee3\u7801\u6ce8\u91ca\u5bf9\u4e8e\u7406\u89e3\u4ee3\u7801\u975e\u5e38\u91cd\u8981\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 authMgr = QgsApplication . authManager () # \u68c0\u67e5QgsAuthManager\u662f\u5426\u5df2\u7ecf\u521d\u59cb\u5316... QgsAuthManager.init()\u7684\u989d\u5916\u4f5c\u7528\u662f\u8bbe\u7f6e\u4e86AuthDbPath\u3002 # QgsAuthManager.init()\u5728QGIS\u5e94\u7528\u7a0b\u5e8f\u521d\u59cb\u5316\u671f\u95f4\u6267\u884c\uff0c\u56e0\u6b64\u901a\u5e38\u4e0d\u9700\u8981\u76f4\u63a5\u8c03\u7528\u5b83\u3002 if authMgr . authenticationDatabasePath (): if authMgr . masterPasswordIsSet (): msg = 'Authentication master password not recognized' assert authMgr . masterPasswordSame ( \"your master password\" ), msg else : msg = 'Master password could not be set' # \u9a8c\u8bc1verify\u53c2\u6570\u5bc6\u7801\u7684\u54c8\u5e0c\u503c\u662f\u5426\u5df2\u4fdd\u5b58\u5728\u8ba4\u8bc1\u6570\u636e\u5e93\u4e2d assert authMgr . setMasterPassword ( \"your master password\" , verify = True ), msg else : # \u5728qgis\u73af\u5883\u4e4b\u5916\uff0c\u4f8b\u5982\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d=>\u5728\u6570\u636e\u5e93\u521d\u59cb\u5316\u4e4b\u524d\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf os . environ [ 'QGIS_AUTH_DB_DIR_PATH' ] = \"/path/where/located/qgis-auth.db\" msg = 'Master password could not be set' assert authMgr . setMasterPassword ( \"your master password\" , True ), msg authMgr . init ( \"/path/where/located/qgis-auth.db\" ) 14.3.2 \u4f7f\u7528\u65b0\u7684\u8ba4\u8bc1\u914d\u7f6e\u9879\u586b\u5145\u8ba4\u8bc1\u6570\u636e\u5e93 \u2693\ufe0e \u4efb\u4f55\u5b58\u50a8\u7684\u51ed\u8bc1\u90fd\u662f QgsAuthMethodConfig \u7c7b\u7684 \u8ba4\u8bc1\u914d\u7f6e \u5b9e\u4f8b\u2014\u2014\u4f7f\u7528\u552f\u4e00\u5b57\u7b26\u4e32\u8bbf\u95ee\uff1a 1 authcfg = 'fm1s770' \u8be5\u5b57\u7b26\u4e32\u662f\u5728\u4f7f\u7528QGIS API\u6216GUI\u521b\u5efa\u6761\u76ee\u65f6\u81ea\u52a8\u751f\u6210\u7684\uff0c\u4f46\u5982\u679c\u914d\u7f6e\u5fc5\u987b\u5728\u4e00\u4e2a\u7ec4\u7ec7\u5185\u7684\u591a\u4e2a\u7528\u6237\u4e4b\u95f4\u5171\u4eab\uff08\u4e0d\u540c\u7684\u51ed\u8bc1\uff09\uff0c\u5c06\u5176\u624b\u52a8\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5df2\u77e5\u503c\u53ef\u80fd\u662f\u6709\u7528\u7684\u3002 QgsAuthMethodConfig \u662f\u4efb\u4f55 \u8ba4\u8bc1\u65b9\u6cd5 \u7684\u57fa\u7c7b\u3002\u4efb\u4f55\u8ba4\u8bc1\u65b9\u6cd5\u96c6\u90fd\u4f1a\u914d\u7f6e\u54c8\u5e0c\u6620\u5c04\uff0c\u5176\u4e2d\u5b58\u50a8\u8ba4\u8bc1\u4fe1\u606f\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u6709\u7528\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u7528\u4e8e\u5b58\u50a8alice\u7528\u6237\u7684PKI\u8def\u5f84\u51ed\u8bc1\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 authMgr = QgsApplication . authManager () # \u8bbe\u7f6e alice PKI \u6570\u636e p_config = QgsAuthMethodConfig () p_config . setName ( \"alice\" ) p_config . setMethod ( \"PKI-Paths\" ) p_config . setUri ( \"https://example.com\" ) p_config . setConfig ( \"certpath\" , \"path/to/alice-cert.pem\" ) p_config . setConfig ( \"keypath\" , \"path/to/alice-key.pem\" ) # \u68c0\u67e5\u65b9\u6cd5\u53c2\u6570\u662f\u5426\u6b63\u786e\u8bbe\u7f6e assert p_config . isValid () # \u5728\u8ba4\u8bc1\u6570\u636e\u5e93\u4e2d\u6ce8\u518calice\u6570\u636e\uff0c\u8fd4\u56de\u5b58\u50a8\u7684\u2018authcfg\u2019\u914d\u7f6e authMgr . storeAuthenticationConfig ( p_config ) newAuthCfgId = p_config . id () assert ( newAuthCfgId ) 14.3.2.1 \u53ef\u7528\u7684\u8ba4\u8bc1\u65b9\u6cd5 \u2693\ufe0e \u8ba4\u8bc1\u65b9\u6cd5 \u5728\u8ba4\u8bc1\u7ba1\u7406\u5668\u521d\u59cb\u5316\u65f6\u52a8\u6001\u52a0\u8f7d\u3002\u53ef\u7528\u7684\u8ba4\u8bc1\u65b9\u6cd5\u5217\u8868\u5982\u4e0b\uff1a Basic \u7528\u6237\u548c\u5bc6\u7801\u9a8c\u8bc1 Esri-Token ESRI token \u57fa\u7840\u8ba4\u8bc1 Identity-Cert \u8eab\u4efd\u8bc1\u4e66\u8ba4\u8bc1 PKI-Paths PKI\u8def\u5f84\u8ba4\u8bc1 PKI-PKCS#12 PKI PKCS\uff0312\u8ba4\u8bc1 14.3.2.2 \u586b\u5145\u6743\u9650 \u2693\ufe0e 1 2 3 4 5 6 7 8 9 authMgr = QgsApplication . authManager () # \u6dfb\u52a0\u6743\u9650 cacerts = QSslCertificate . fromPath ( \"/path/to/ca_chains.pem\" ) assert cacerts is not None # \u5b58\u50a8 CA authMgr . storeCertAuthorities ( cacerts ) # \u91cd\u5efaCA\u7f13\u5b58 authMgr . rebuildCaCertsCache () authMgr . rebuildTrustedCaCertsCache () 14.3.2.3 \u4f7f\u7528QgsPkiBundle\u7ba1\u7406PKI \u2693\ufe0e QgsPkiBundle \u7c7b\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u7c7b\uff0c\u7528\u4e8e\u6253\u5305\u7531SslCert\u3001SslKey\u548cCA\u94fe\u7ec4\u6210\u7684PKI\u5305\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u83b7\u5f97\u5bc6\u7801\u4fdd\u62a4\u7684\u7247\u6bb5\uff1a 1 2 3 4 5 6 7 8 9 # \u5bc6\u94a5\u4e0e\u5bc6\u7801\u4e00\u8d77\u6dfb\u52a0alice\u8bc1\u4e66 caBundlesList = [] bundle = QgsPkiBundle . fromPemPaths ( \"/path/to/alice-cert.pem\" , \"/path/to/alice-key_w-pass.pem\" , \"unlock_pwd\" , caBundlesList ) assert bundle is not None # \u4f60\u53ef\u4ee5\u68c0\u67e5\u5b83\u662f\u5426\u6b63\u786e # bundle.isValid() \u8bf7\u53c2\u9605 QgsPkiBundle \u7c7b\u6587\u6863\uff0c\u4ece\u5305\u4e2d\u63d0\u53d6\u8bc1\u4e66/\u5bc6\u94a5/ CA. 14.3.3 \u4ece\u8ba4\u8bc1\u6570\u636e\u5e93\u4e2d\u5220\u9664\u6761\u76ee \u2693\ufe0e \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 authcfg \u6807\u8bc6\u7b26\u4ece \u8ba4\u8bc1\u6570\u636e\u5e93 \u4e2d\u5220\u9664\u6761\u76ee\uff1a 1 2 authMgr = QgsApplication . authManager () authMgr . removeAuthenticationConfig ( \"authCfg_Id_to_remove\" ) 14.3.4 \u4f7f\u7528QgsAuthManager\u6269\u5c55authcfg \u2693\ufe0e \u4f7f\u7528\u5b58\u50a8\u5728 \u8ba4\u8bc1\u6570\u636e\u5e93 \u4e2d\u7684 \u8ba4\u8bc1\u914d\u7f6e \u7684\u6700\u597d\u65b9\u6cd5\u662f\u7528\u552f\u4e00\u7684\u6807\u8bc6\u7b26 authcfg \u6765\u5f15\u7528\u5b83\u3002\u6269\u5c55\uff0c\u610f\u5473\u7740\u628a\u5b83\u4ece\u4e00\u4e2a\u6807\u8bc6\u7b26\u8f6c\u6362\u6210\u4e00\u5957\u5b8c\u6574\u7684\u51ed\u8bc1\u3002\u4f7f\u7528\u5b58\u50a8\u7684 \u8ba4\u8bc1\u914d\u7f6e \u7684\u6700\u4f73\u505a\u6cd5\uff0c\u662f\u8ba9\u5b83\u7531\u8ba4\u8bc1\u7ba1\u7406\u5668\u81ea\u52a8\u7ba1\u7406\u3002\u5b58\u50a8\u914d\u7f6e\u7684\u5e38\u89c1\u7528\u9014\u662f\u8fde\u63a5\u5230\u4e00\u4e2a\u542f\u7528\u4e86\u8ba4\u8bc1\u7684\u670d\u52a1\uff0c\u5982WMS\u3001WFS\u6216\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u63d0\u793a \u5e76\u975e\u6240\u6709\u7684QGIS\u6570\u636e\u63d0\u4f9b\u8005\u90fd\u4e0e\u8ba4\u8bc1\u57fa\u7840\u96c6\u6210\u3002\u6bcf\u4e2a\u8ba4\u8bc1\u65b9\u6cd5\u90fd\u662f\u4ece\u57fa\u7c7b QgsAuthMethod \u6d3e\u751f\u51fa\u6765\u7684\uff0c\u5e76\u652f\u6301\u4e00\u7ec4\u4e0d\u540c\u7684\u63d0\u4f9b\u8005\u3002\u4f8b\u5982\uff0c certIdentity() \u65b9\u6cd5\u652f\u6301\u4ee5\u4e0b\u7684\u63d0\u4f9b\u8005\u5217\u8868: 1 2 3 4 authM = QgsApplication . authManager () print ( authM . authMethod ( \"Identity-Cert\" ) . supportedDataProviders ()) # ['ows', 'wfs', 'wcs', 'wms', 'postgres'] \u4f8b\u5982\uff0c\u8981\u4f7f\u7528 authcfg = 'fm1s770' \u6807\u8bc6\u7684\u5b58\u50a8\u51ed\u8bc1\u8bbf\u95eeWMS\u670d\u52a1\uff0c\u6211\u4eec\u53ea\u9700\u5728\u6570\u636e\u6e90URL\u4e2d\u4f7f\u7528 authcfg \uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 11 12 authCfg = 'fm1s770' quri = QgsDataSourceUri () quri . setParam ( \"layers\" , 'usa:states' ) quri . setParam ( \"styles\" , '' ) quri . setParam ( \"format\" , 'image/png' ) quri . setParam ( \"crs\" , 'EPSG:4326' ) quri . setParam ( \"dpiMode\" , '7' ) quri . setParam ( \"featureCount\" , '10' ) quri . setParam ( \"authcfg\" , authCfg ) # <---- authCfg url \u914d\u7f6e quri . setParam ( \"contextualWMSLegend\" , '0' ) quri . setParam ( \"url\" , 'https://my_auth_enabled_server_ip/wms' ) rlayer = QgsRasterLayer ( str ( quri . encodedUri (), \"utf-8\" ), 'states' , 'wms' ) \u4ee5\u4e0a\u6848\u4f8b\uff0c wms \u63d0\u4f9b\u8005\u5728\u8bbe\u7f6eHTTP\u8fde\u63a5\u4e4b\u524d\uff0c\u4f1a\u5c06 authcfg URI\u53c2\u6570\u4e0e\u51ed\u8bc1\u5c55\u5f00\u3002 \u8b66\u544a \u5f00\u53d1\u8005\u5fc5\u987b\u5c06 authcfg \u6269\u5c55\u7559\u7ed9 QgsAuthManager \uff0c\u8fd9\u6837\uff0c\u5b83\u5c31\u80fd\u786e\u4fdd\u6269\u5c55\u4e0d\u4f1a\u592a\u65e9\u5b8c\u6210\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 QgsDataSourceURI \u7c7b\u6784\u5efa\u7684URI\u5b57\u7b26\u4e32\u88ab\u7528\u6765\u8bbe\u7f6e\u6570\u636e\u6e90\uff0c\u5176\u65b9\u5f0f\u5982\u4e0b: 1 2 3 4 authCfg = 'fm1s770' quri = QgsDataSourceUri ( \"my WMS uri here\" ) quri . setParam ( \"authcfg\" , authCfg ) rlayer = QgsRasterLayer ( quri . uri ( False ), 'states' , 'wms' ) \u63d0\u793a False \u53c2\u6570\u5f88\u91cd\u8981\uff0c\u53ef\u4ee5\u907f\u514dURL\u4e2d\u5df2\u5b58\u5728\u7684 authcfg 14.3.4.1 \u4f7f\u7528\u5176\u5b83\u6570\u636e\u63d0\u4f9b\u8005\u7684PKI\u4f8b\u5b50 \u2693\ufe0e \u5176\u5b83\u4f8b\u5b50\u53ef\u4ee5\u5728QGIS\u6d4b\u8bd5\u6587\u4ef6\u5939\u4e2d\u76f4\u63a5\u8bfb\u53d6\uff0c\u5982 test_authmanager_pki_ows \u6216 test_authmanager_pki_postgres . 14.4 \u8c03\u6574\u63d2\u4ef6\u4f7f\u7528\u8ba4\u8bc1\u57fa\u7840 \u2693\ufe0e \u8bb8\u591a\u7b2c\u4e09\u65b9\u63d2\u4ef6\u4f7f\u7528httplib2\u6216\u5176\u4ed6Python\u7f51\u7edc\u5e93\u6765\u7ba1\u7406HTTP\u8fde\u63a5\uff0c\u800c\u4e0d\u662f\u4e0e QgsNetworkAccessManager \u53ca\u5176\u76f8\u5173\u8ba4\u8bc1\u57fa\u7840\u96c6\u6210\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u96c6\u6210\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a NetworkAccessManager \u7684Python\u5e2e\u52a9\u51fd\u6570\u3002\u5b83\u7684\u4ee3\u7801\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 \u6b64\u5e2e\u52a9\u7a0b\u5e8f\u7c7b\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\uff1a 1 2 3 4 5 6 http = NetworkAccessManager ( authid = \"my_authCfg\" , exception_class = My_FailedRequestError ) try : response , content = http . request ( \"my_rest_url\" ) except My_FailedRequestError , e : # \u5904\u7406\u5f02\u5e38 pass 14.5 \u8ba4\u8bc1GUI \u2693\ufe0e \u672c\u8282\u5217\u51fa\u4e86\u53ef\u7528\u4e8e\u5728\u81ea\u5b9a\u4e49\u63a5\u53e3\u4e2d\u96c6\u6210\u8ba4\u8bc1\u57fa\u7840\u7684\u53ef\u7528GUI\u3002 14.5.1 GUI\u9009\u62e9\u8bc1\u4e66 \u2693\ufe0e \u5982\u679c\u9700\u8981\u4ece\u5b58\u50a8\u5728 \u8ba4\u8bc1\u6570\u636e\u5e93 \u4e2d\u9009\u62e9 \u8ba4\u8bc1\u914d\u7f6e \uff0c\u5219\u53ef\u4ee5\u5728GUI\u7c7b QgsAuthConfigSelect \u4e2d\u4f7f\u7528\u3002 \u53ef\u5728\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\uff1a 1 2 3 4 5 6 # \u521b\u5efa\u4e00\u4e2aQgsAuthConfigSelect GUI\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u4e0e`parent`\u6709\u7236\u5b50\u5173\u7cfb parent = QWidget () # GUI\u7236\u7ea7\u63a7\u4ef6 gui = QgsAuthConfigSelect ( parent , \"postgres\" ) # \u5728\u4e00\u4e2a\u65b0\u6807\u7b7e\u4e2d\u6dfb\u52a0\u4e0a\u8ff0\u521b\u5efa\u7684GUI\u63a7\u4ef6\u3002 tabGui = QTabWidget () tabGui . insertTab ( 1 , gui , \"Configurations\" ) \u4ee5\u4e0a\u793a\u4f8b\u6458\u81eaQGIS \u6e90\u4ee3\u7801 \u3002GUI\u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5f15\u7528\u6570\u636e\u63d0\u4f9b\u8005\u7c7b\u578b\u3002\u53c2\u6570\u7528\u4e8e\u9650\u5236\u4e0e\u6307\u5b9a\u63d0\u4f9b\u8005\u517c\u5bb9\u7684 \u8ba4\u8bc1\u65b9\u6cd5 \u3002 14.5.2 \u8ba4\u8bc1\u7f16\u8f91\u5668 \u2693\ufe0e \u7528\u4e8e\u7ba1\u7406\u51ed\u636e\u3001\u6743\u9650\u548c\u8bbf\u95ee\u8ba4\u8bc1\u5b9e\u7528\u7a0b\u5e8f\u7684\u5b8c\u6574GUI\u7531 QgsAuthEditorWidgets \u7c7b\u7ba1\u7406\u3002 \u53ef\u5728\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\uff1a 1 2 3 4 # \u521b\u5efa\u4e00\u4e2aQgsAuthConfigSelect GUI\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u4e0e`parent`\u6709\u7236\u5b50\u5173\u7cfb parent = QWidget () # GUI\u7236\u7ea7\u63a7\u4ef6 gui = QgsAuthConfigSelect ( parent ) gui . show () \u53ef\u4ee5\u5728\u76f8\u5173\u7684 \u6d4b\u8bd5 \u4ee3\u7801\u4e2d\u627e\u5230\u4e00\u4e2a\u7efc\u5408\u7684\u4f8b\u5b50\u3002 14.5.3 \u673a\u6784\uff08\u8bc1\u4e66\u9881\u53d1\uff09\u7f16\u8f91\u5668 \u2693\ufe0e \u4ec5\u7528\u4e8e\u7ba1\u7406\u673a\u6784\u7684GUI\u7531 QGSAuthoritiesEditor \u7c7b\u7ba1\u7406\u3002 \u53ef\u5728\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\uff1a 1 2 3 4 # \u521b\u5efa\u4e00\u4e2aQgsAuthConfigSelect GUI\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u4e0e`parent`\u6709\u7236\u5b50\u5173\u7cfb parent = QWidget () # GUI\u7236\u7ea7\u63a7\u4ef6 gui = QgsAuthAuthoritiesEditor ( parent ) gui . show ()","title":"14-\u8ba4\u8bc1\u57fa\u7840"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#14","text":"\u672c\u8282\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from qgis.core import ( QgsApplication , QgsRasterLayer , QgsAuthMethodConfig , QgsDataSourceUri , QgsPkiBundle , QgsMessageLog , ) from qgis.gui import ( QgsAuthAuthoritiesEditor , QgsAuthConfigEditor , QgsAuthConfigSelect , QgsAuthSettingsWidget , ) from qgis.PyQt.QtWidgets import ( QWidget , QTabWidget , ) from qgis.PyQt.QtNetwork import QSslCertificate","title":"14 \u8ba4\u8bc1\u57fa\u7840"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#141","text":"\u8ba4\u8bc1\u57fa\u7840\u7684\u7528\u6237\u53c2\u8003\u53ef\u4ee5\u5728\u7528\u6237\u624b\u518c\u7684 \u201c\u8ba4\u8bc1\u7cfb\u7edf\u6982\u8ff0\u201d \u4e2d\u9605\u8bfb\u3002 \u672c\u7ae0\u662f\u63cf\u8ff0\u4ece\u5f00\u53d1\u4eba\u5458\u89d2\u5ea6\u4f7f\u7528\u8ba4\u8bc1\u7cfb\u7edf\u7684\u6700\u4f73\u5b9e\u8df5\u3002 \u5728QGIS\u684c\u9762\u4e2d\uff0c\u5f53\u9700\u8981\u51ed\u8bc1\u6765\u8bbf\u95ee\u7279\u5b9a\u8d44\u6e90\u65f6\uff0c\u4f8b\u5982\u5f53\u4e00\u4e2a\u56fe\u5c42\u5efa\u7acb\u5728Postgres\u6570\u636e\u5e93\u8fde\u63a5\u65f6\uff0c\u6570\u636e\u63d0\u4f9b\u8005\u5c31\u5e7f\u6cdb\u5730\u4f7f\u7528\u4e86\u8ba4\u8bc1\u7cfb\u7edf\u3002 QGIS gui\u5e93\u4e2d\u8fd8\u6709\u4e00\u4e9b\u90e8\u4ef6\uff0c\u63d2\u4ef6\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u8f7b\u677e\u5730\u5c06\u8ba4\u8bc1\u57fa\u7840\u96c6\u6210\u5230\u4ee3\u7801\u4e2d\uff1a QgsAuthConfigEditor QgsAuthConfigSelect QgsAuthSettingsWidget \u53ef\u4ee5\u4ece\u8ba4\u8bc1\u57fa\u7840 \u6d4b\u8bd5\u4ee3\u7801 \u4e2d\u5b66\u4e60\u826f\u597d\u7684\u4ee3\u7801\u5f15\u7528\u3002 \u8b66\u544a \u7531\u4e8e\u8ba4\u8bc1\u57fa\u7840\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u8003\u8651\u5230\u5b89\u5168\u7ea6\u675f\uff0c\u53ea\u6709\u9009\u5b9a\u7684\u5185\u90e8\u65b9\u6cd5\u96c6\u53ef\u4ee5\u66b4\u9732\u7ed9Python\u3002","title":"14.1 \u4ecb\u7ecd"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#142","text":"\u4ee5\u4e0b\u662f\u672c\u7ae0\u4e2d\u6700\u5e38\u89c1\u5bf9\u8c61\u7684\u4e00\u4e9b\u5b9a\u4e49\u3002 \u4e3b\u5bc6\u7801 \u5141\u8bb8\u8bbf\u95ee\u548c\u89e3\u5bc6\u5b58\u50a8\u5728QGIS\u8ba4\u8bc1\u4e2d\u51ed\u636e\u7684\u5bc6\u7801 \u8ba4\u8bc1\u6570\u636e\u5e93 \u4e00\u4e2a \u4e3b\u5bc6\u7801 \u52a0\u5bc6\u540e\u7684SQLite\u6570\u636e\u5e93 qgis-auth.db \uff0c\u5176\u4e2d \u8ba4\u8bc1\u914d\u7f6e \u5b58\u50a8\u5728\u8fd9\u91cc\u3002\u4f8b\u5982\u7528\u6237\u540d/\u5bc6\u7801\uff0c\u4e2a\u4eba\u8bc1\u4e66\u548c\u5bc6\u94a5\uff0c\u8bc1\u4e66\u9881\u53d1\u673a\u6784 \u8ba4\u8bc1\u6570\u636e\u5e93 \u8ba4\u8bc1\u6570\u636e\u5e93 \u8ba4\u8bc1\u914d\u7f6e \u4e00\u7ec4\u8ba4\u8bc1\u6570\u636e\uff0c\u53d6\u51b3\u4e8e \u8ba4\u8bc1\u65b9\u6cd5 \u3002\u4f8b\u5982\uff0c\u57fa\u672c\u8ba4\u8bc1\u65b9\u6cd5\u5b58\u50a8\u4e00\u5bf9\u7528\u6237\u540d/\u5bc6\u7801\u3002 \u8ba4\u8bc1\u65b9\u6cd5 \u7528\u4e8e\u83b7\u53d6\u8ba4\u8bc1\u7684\u7279\u5b9a\u65b9\u6cd5\u3002\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u6709\u81ea\u5df1\u7684\u534f\u8bae\uff0c\u7528\u4e8e\u83b7\u53d6\u8ba4\u8bc1\u7ea7\u522b\u3002\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u662f\u5728QGIS\u8ba4\u8bc1\u57fa\u7840\u521d\u59cb\u5316\u671f\u95f4\u52a8\u6001\u52a0\u8f7d\u7684\u5171\u4eab\u5e93\u3002","title":"14.2 \u8bcd\u6c47\u8868"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#143-qgsauthmanager","text":"\u5355\u4f8b\u7c7b QgsAuthManager \u662f\u4f7f\u7528\u5b58\u50a8\u5728QGIS \u8ba4\u8bc1\u6570\u636e\u5e93 \u52a0\u5bc6\u8bc1\u4e66\u7684\u5165\u53e3\uff0c\u5373\uff0c\u5728\u5f53\u524d \u7528\u6237\u8d44\u6599 \u6587\u4ef6\u5939\u4e0b\u7684 qgis-auth.db \u6587\u4ef6\u3002 \u6b64\u7c7b\u8d1f\u8d23\u7528\u6237\u4ea4\u4e92\uff1a\u901a\u8fc7\u8bbe\u7f6e\u4e3b\u5bc6\u7801\u6216\u900f\u660e\u5730\u4f7f\u7528\u5b83\u6765\u8bbf\u95ee\u52a0\u5bc6\u7684\u5b58\u50a8\u4fe1\u606f\u3002","title":"14.3 QgsAuthManager\u5165\u53e3"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#1431","text":"\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u63d0\u4f9b\u4e86\u4e00\u4e2a\u793a\u4f8b\uff0c\u8bbe\u7f6e\u4e3b\u5bc6\u7801\u6765\u6253\u5f00\u5bf9\u8ba4\u8bc1\u8bbe\u7f6e\u7684\u8bbf\u95ee\u6743\u9650\u3002\u4ee3\u7801\u6ce8\u91ca\u5bf9\u4e8e\u7406\u89e3\u4ee3\u7801\u975e\u5e38\u91cd\u8981\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 authMgr = QgsApplication . authManager () # \u68c0\u67e5QgsAuthManager\u662f\u5426\u5df2\u7ecf\u521d\u59cb\u5316... QgsAuthManager.init()\u7684\u989d\u5916\u4f5c\u7528\u662f\u8bbe\u7f6e\u4e86AuthDbPath\u3002 # QgsAuthManager.init()\u5728QGIS\u5e94\u7528\u7a0b\u5e8f\u521d\u59cb\u5316\u671f\u95f4\u6267\u884c\uff0c\u56e0\u6b64\u901a\u5e38\u4e0d\u9700\u8981\u76f4\u63a5\u8c03\u7528\u5b83\u3002 if authMgr . authenticationDatabasePath (): if authMgr . masterPasswordIsSet (): msg = 'Authentication master password not recognized' assert authMgr . masterPasswordSame ( \"your master password\" ), msg else : msg = 'Master password could not be set' # \u9a8c\u8bc1verify\u53c2\u6570\u5bc6\u7801\u7684\u54c8\u5e0c\u503c\u662f\u5426\u5df2\u4fdd\u5b58\u5728\u8ba4\u8bc1\u6570\u636e\u5e93\u4e2d assert authMgr . setMasterPassword ( \"your master password\" , verify = True ), msg else : # \u5728qgis\u73af\u5883\u4e4b\u5916\uff0c\u4f8b\u5982\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d=>\u5728\u6570\u636e\u5e93\u521d\u59cb\u5316\u4e4b\u524d\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf os . environ [ 'QGIS_AUTH_DB_DIR_PATH' ] = \"/path/where/located/qgis-auth.db\" msg = 'Master password could not be set' assert authMgr . setMasterPassword ( \"your master password\" , True ), msg authMgr . init ( \"/path/where/located/qgis-auth.db\" )","title":"14.3.1 \u521d\u59cb\u5316\u7ba1\u7406\u5668\u5e76\u8bbe\u7f6e\u4e3b\u5bc6\u7801"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#1432","text":"\u4efb\u4f55\u5b58\u50a8\u7684\u51ed\u8bc1\u90fd\u662f QgsAuthMethodConfig \u7c7b\u7684 \u8ba4\u8bc1\u914d\u7f6e \u5b9e\u4f8b\u2014\u2014\u4f7f\u7528\u552f\u4e00\u5b57\u7b26\u4e32\u8bbf\u95ee\uff1a 1 authcfg = 'fm1s770' \u8be5\u5b57\u7b26\u4e32\u662f\u5728\u4f7f\u7528QGIS API\u6216GUI\u521b\u5efa\u6761\u76ee\u65f6\u81ea\u52a8\u751f\u6210\u7684\uff0c\u4f46\u5982\u679c\u914d\u7f6e\u5fc5\u987b\u5728\u4e00\u4e2a\u7ec4\u7ec7\u5185\u7684\u591a\u4e2a\u7528\u6237\u4e4b\u95f4\u5171\u4eab\uff08\u4e0d\u540c\u7684\u51ed\u8bc1\uff09\uff0c\u5c06\u5176\u624b\u52a8\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5df2\u77e5\u503c\u53ef\u80fd\u662f\u6709\u7528\u7684\u3002 QgsAuthMethodConfig \u662f\u4efb\u4f55 \u8ba4\u8bc1\u65b9\u6cd5 \u7684\u57fa\u7c7b\u3002\u4efb\u4f55\u8ba4\u8bc1\u65b9\u6cd5\u96c6\u90fd\u4f1a\u914d\u7f6e\u54c8\u5e0c\u6620\u5c04\uff0c\u5176\u4e2d\u5b58\u50a8\u8ba4\u8bc1\u4fe1\u606f\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u6709\u7528\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u7528\u4e8e\u5b58\u50a8alice\u7528\u6237\u7684PKI\u8def\u5f84\u51ed\u8bc1\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 authMgr = QgsApplication . authManager () # \u8bbe\u7f6e alice PKI \u6570\u636e p_config = QgsAuthMethodConfig () p_config . setName ( \"alice\" ) p_config . setMethod ( \"PKI-Paths\" ) p_config . setUri ( \"https://example.com\" ) p_config . setConfig ( \"certpath\" , \"path/to/alice-cert.pem\" ) p_config . setConfig ( \"keypath\" , \"path/to/alice-key.pem\" ) # \u68c0\u67e5\u65b9\u6cd5\u53c2\u6570\u662f\u5426\u6b63\u786e\u8bbe\u7f6e assert p_config . isValid () # \u5728\u8ba4\u8bc1\u6570\u636e\u5e93\u4e2d\u6ce8\u518calice\u6570\u636e\uff0c\u8fd4\u56de\u5b58\u50a8\u7684\u2018authcfg\u2019\u914d\u7f6e authMgr . storeAuthenticationConfig ( p_config ) newAuthCfgId = p_config . id () assert ( newAuthCfgId )","title":"14.3.2 \u4f7f\u7528\u65b0\u7684\u8ba4\u8bc1\u914d\u7f6e\u9879\u586b\u5145\u8ba4\u8bc1\u6570\u636e\u5e93"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#14321","text":"\u8ba4\u8bc1\u65b9\u6cd5 \u5728\u8ba4\u8bc1\u7ba1\u7406\u5668\u521d\u59cb\u5316\u65f6\u52a8\u6001\u52a0\u8f7d\u3002\u53ef\u7528\u7684\u8ba4\u8bc1\u65b9\u6cd5\u5217\u8868\u5982\u4e0b\uff1a Basic \u7528\u6237\u548c\u5bc6\u7801\u9a8c\u8bc1 Esri-Token ESRI token \u57fa\u7840\u8ba4\u8bc1 Identity-Cert \u8eab\u4efd\u8bc1\u4e66\u8ba4\u8bc1 PKI-Paths PKI\u8def\u5f84\u8ba4\u8bc1 PKI-PKCS#12 PKI PKCS\uff0312\u8ba4\u8bc1","title":"14.3.2.1 \u53ef\u7528\u7684\u8ba4\u8bc1\u65b9\u6cd5"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#14322","text":"1 2 3 4 5 6 7 8 9 authMgr = QgsApplication . authManager () # \u6dfb\u52a0\u6743\u9650 cacerts = QSslCertificate . fromPath ( \"/path/to/ca_chains.pem\" ) assert cacerts is not None # \u5b58\u50a8 CA authMgr . storeCertAuthorities ( cacerts ) # \u91cd\u5efaCA\u7f13\u5b58 authMgr . rebuildCaCertsCache () authMgr . rebuildTrustedCaCertsCache ()","title":"14.3.2.2 \u586b\u5145\u6743\u9650"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#14323-qgspkibundlepki","text":"QgsPkiBundle \u7c7b\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u7c7b\uff0c\u7528\u4e8e\u6253\u5305\u7531SslCert\u3001SslKey\u548cCA\u94fe\u7ec4\u6210\u7684PKI\u5305\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u83b7\u5f97\u5bc6\u7801\u4fdd\u62a4\u7684\u7247\u6bb5\uff1a 1 2 3 4 5 6 7 8 9 # \u5bc6\u94a5\u4e0e\u5bc6\u7801\u4e00\u8d77\u6dfb\u52a0alice\u8bc1\u4e66 caBundlesList = [] bundle = QgsPkiBundle . fromPemPaths ( \"/path/to/alice-cert.pem\" , \"/path/to/alice-key_w-pass.pem\" , \"unlock_pwd\" , caBundlesList ) assert bundle is not None # \u4f60\u53ef\u4ee5\u68c0\u67e5\u5b83\u662f\u5426\u6b63\u786e # bundle.isValid() \u8bf7\u53c2\u9605 QgsPkiBundle \u7c7b\u6587\u6863\uff0c\u4ece\u5305\u4e2d\u63d0\u53d6\u8bc1\u4e66/\u5bc6\u94a5/ CA.","title":"14.3.2.3 \u4f7f\u7528QgsPkiBundle\u7ba1\u7406PKI"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#1433","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 authcfg \u6807\u8bc6\u7b26\u4ece \u8ba4\u8bc1\u6570\u636e\u5e93 \u4e2d\u5220\u9664\u6761\u76ee\uff1a 1 2 authMgr = QgsApplication . authManager () authMgr . removeAuthenticationConfig ( \"authCfg_Id_to_remove\" )","title":"14.3.3 \u4ece\u8ba4\u8bc1\u6570\u636e\u5e93\u4e2d\u5220\u9664\u6761\u76ee"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#1434-qgsauthmanagerauthcfg","text":"\u4f7f\u7528\u5b58\u50a8\u5728 \u8ba4\u8bc1\u6570\u636e\u5e93 \u4e2d\u7684 \u8ba4\u8bc1\u914d\u7f6e \u7684\u6700\u597d\u65b9\u6cd5\u662f\u7528\u552f\u4e00\u7684\u6807\u8bc6\u7b26 authcfg \u6765\u5f15\u7528\u5b83\u3002\u6269\u5c55\uff0c\u610f\u5473\u7740\u628a\u5b83\u4ece\u4e00\u4e2a\u6807\u8bc6\u7b26\u8f6c\u6362\u6210\u4e00\u5957\u5b8c\u6574\u7684\u51ed\u8bc1\u3002\u4f7f\u7528\u5b58\u50a8\u7684 \u8ba4\u8bc1\u914d\u7f6e \u7684\u6700\u4f73\u505a\u6cd5\uff0c\u662f\u8ba9\u5b83\u7531\u8ba4\u8bc1\u7ba1\u7406\u5668\u81ea\u52a8\u7ba1\u7406\u3002\u5b58\u50a8\u914d\u7f6e\u7684\u5e38\u89c1\u7528\u9014\u662f\u8fde\u63a5\u5230\u4e00\u4e2a\u542f\u7528\u4e86\u8ba4\u8bc1\u7684\u670d\u52a1\uff0c\u5982WMS\u3001WFS\u6216\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u63d0\u793a \u5e76\u975e\u6240\u6709\u7684QGIS\u6570\u636e\u63d0\u4f9b\u8005\u90fd\u4e0e\u8ba4\u8bc1\u57fa\u7840\u96c6\u6210\u3002\u6bcf\u4e2a\u8ba4\u8bc1\u65b9\u6cd5\u90fd\u662f\u4ece\u57fa\u7c7b QgsAuthMethod \u6d3e\u751f\u51fa\u6765\u7684\uff0c\u5e76\u652f\u6301\u4e00\u7ec4\u4e0d\u540c\u7684\u63d0\u4f9b\u8005\u3002\u4f8b\u5982\uff0c certIdentity() \u65b9\u6cd5\u652f\u6301\u4ee5\u4e0b\u7684\u63d0\u4f9b\u8005\u5217\u8868: 1 2 3 4 authM = QgsApplication . authManager () print ( authM . authMethod ( \"Identity-Cert\" ) . supportedDataProviders ()) # ['ows', 'wfs', 'wcs', 'wms', 'postgres'] \u4f8b\u5982\uff0c\u8981\u4f7f\u7528 authcfg = 'fm1s770' \u6807\u8bc6\u7684\u5b58\u50a8\u51ed\u8bc1\u8bbf\u95eeWMS\u670d\u52a1\uff0c\u6211\u4eec\u53ea\u9700\u5728\u6570\u636e\u6e90URL\u4e2d\u4f7f\u7528 authcfg \uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 11 12 authCfg = 'fm1s770' quri = QgsDataSourceUri () quri . setParam ( \"layers\" , 'usa:states' ) quri . setParam ( \"styles\" , '' ) quri . setParam ( \"format\" , 'image/png' ) quri . setParam ( \"crs\" , 'EPSG:4326' ) quri . setParam ( \"dpiMode\" , '7' ) quri . setParam ( \"featureCount\" , '10' ) quri . setParam ( \"authcfg\" , authCfg ) # <---- authCfg url \u914d\u7f6e quri . setParam ( \"contextualWMSLegend\" , '0' ) quri . setParam ( \"url\" , 'https://my_auth_enabled_server_ip/wms' ) rlayer = QgsRasterLayer ( str ( quri . encodedUri (), \"utf-8\" ), 'states' , 'wms' ) \u4ee5\u4e0a\u6848\u4f8b\uff0c wms \u63d0\u4f9b\u8005\u5728\u8bbe\u7f6eHTTP\u8fde\u63a5\u4e4b\u524d\uff0c\u4f1a\u5c06 authcfg URI\u53c2\u6570\u4e0e\u51ed\u8bc1\u5c55\u5f00\u3002 \u8b66\u544a \u5f00\u53d1\u8005\u5fc5\u987b\u5c06 authcfg \u6269\u5c55\u7559\u7ed9 QgsAuthManager \uff0c\u8fd9\u6837\uff0c\u5b83\u5c31\u80fd\u786e\u4fdd\u6269\u5c55\u4e0d\u4f1a\u592a\u65e9\u5b8c\u6210\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 QgsDataSourceURI \u7c7b\u6784\u5efa\u7684URI\u5b57\u7b26\u4e32\u88ab\u7528\u6765\u8bbe\u7f6e\u6570\u636e\u6e90\uff0c\u5176\u65b9\u5f0f\u5982\u4e0b: 1 2 3 4 authCfg = 'fm1s770' quri = QgsDataSourceUri ( \"my WMS uri here\" ) quri . setParam ( \"authcfg\" , authCfg ) rlayer = QgsRasterLayer ( quri . uri ( False ), 'states' , 'wms' ) \u63d0\u793a False \u53c2\u6570\u5f88\u91cd\u8981\uff0c\u53ef\u4ee5\u907f\u514dURL\u4e2d\u5df2\u5b58\u5728\u7684 authcfg","title":"14.3.4 \u4f7f\u7528QgsAuthManager\u6269\u5c55authcfg"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#14341-pki","text":"\u5176\u5b83\u4f8b\u5b50\u53ef\u4ee5\u5728QGIS\u6d4b\u8bd5\u6587\u4ef6\u5939\u4e2d\u76f4\u63a5\u8bfb\u53d6\uff0c\u5982 test_authmanager_pki_ows \u6216 test_authmanager_pki_postgres .","title":"14.3.4.1 \u4f7f\u7528\u5176\u5b83\u6570\u636e\u63d0\u4f9b\u8005\u7684PKI\u4f8b\u5b50"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#144","text":"\u8bb8\u591a\u7b2c\u4e09\u65b9\u63d2\u4ef6\u4f7f\u7528httplib2\u6216\u5176\u4ed6Python\u7f51\u7edc\u5e93\u6765\u7ba1\u7406HTTP\u8fde\u63a5\uff0c\u800c\u4e0d\u662f\u4e0e QgsNetworkAccessManager \u53ca\u5176\u76f8\u5173\u8ba4\u8bc1\u57fa\u7840\u96c6\u6210\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u96c6\u6210\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a NetworkAccessManager \u7684Python\u5e2e\u52a9\u51fd\u6570\u3002\u5b83\u7684\u4ee3\u7801\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 \u6b64\u5e2e\u52a9\u7a0b\u5e8f\u7c7b\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\uff1a 1 2 3 4 5 6 http = NetworkAccessManager ( authid = \"my_authCfg\" , exception_class = My_FailedRequestError ) try : response , content = http . request ( \"my_rest_url\" ) except My_FailedRequestError , e : # \u5904\u7406\u5f02\u5e38 pass","title":"14.4 \u8c03\u6574\u63d2\u4ef6\u4f7f\u7528\u8ba4\u8bc1\u57fa\u7840"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#145-gui","text":"\u672c\u8282\u5217\u51fa\u4e86\u53ef\u7528\u4e8e\u5728\u81ea\u5b9a\u4e49\u63a5\u53e3\u4e2d\u96c6\u6210\u8ba4\u8bc1\u57fa\u7840\u7684\u53ef\u7528GUI\u3002","title":"14.5 \u8ba4\u8bc1GUI"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#1451-gui","text":"\u5982\u679c\u9700\u8981\u4ece\u5b58\u50a8\u5728 \u8ba4\u8bc1\u6570\u636e\u5e93 \u4e2d\u9009\u62e9 \u8ba4\u8bc1\u914d\u7f6e \uff0c\u5219\u53ef\u4ee5\u5728GUI\u7c7b QgsAuthConfigSelect \u4e2d\u4f7f\u7528\u3002 \u53ef\u5728\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\uff1a 1 2 3 4 5 6 # \u521b\u5efa\u4e00\u4e2aQgsAuthConfigSelect GUI\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u4e0e`parent`\u6709\u7236\u5b50\u5173\u7cfb parent = QWidget () # GUI\u7236\u7ea7\u63a7\u4ef6 gui = QgsAuthConfigSelect ( parent , \"postgres\" ) # \u5728\u4e00\u4e2a\u65b0\u6807\u7b7e\u4e2d\u6dfb\u52a0\u4e0a\u8ff0\u521b\u5efa\u7684GUI\u63a7\u4ef6\u3002 tabGui = QTabWidget () tabGui . insertTab ( 1 , gui , \"Configurations\" ) \u4ee5\u4e0a\u793a\u4f8b\u6458\u81eaQGIS \u6e90\u4ee3\u7801 \u3002GUI\u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5f15\u7528\u6570\u636e\u63d0\u4f9b\u8005\u7c7b\u578b\u3002\u53c2\u6570\u7528\u4e8e\u9650\u5236\u4e0e\u6307\u5b9a\u63d0\u4f9b\u8005\u517c\u5bb9\u7684 \u8ba4\u8bc1\u65b9\u6cd5 \u3002","title":"14.5.1 GUI\u9009\u62e9\u8bc1\u4e66"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#1452","text":"\u7528\u4e8e\u7ba1\u7406\u51ed\u636e\u3001\u6743\u9650\u548c\u8bbf\u95ee\u8ba4\u8bc1\u5b9e\u7528\u7a0b\u5e8f\u7684\u5b8c\u6574GUI\u7531 QgsAuthEditorWidgets \u7c7b\u7ba1\u7406\u3002 \u53ef\u5728\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\uff1a 1 2 3 4 # \u521b\u5efa\u4e00\u4e2aQgsAuthConfigSelect GUI\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u4e0e`parent`\u6709\u7236\u5b50\u5173\u7cfb parent = QWidget () # GUI\u7236\u7ea7\u63a7\u4ef6 gui = QgsAuthConfigSelect ( parent ) gui . show () \u53ef\u4ee5\u5728\u76f8\u5173\u7684 \u6d4b\u8bd5 \u4ee3\u7801\u4e2d\u627e\u5230\u4e00\u4e2a\u7efc\u5408\u7684\u4f8b\u5b50\u3002","title":"14.5.2 \u8ba4\u8bc1\u7f16\u8f91\u5668"},{"location":"14-%E8%AE%A4%E8%AF%81%E5%9F%BA%E7%A1%80/#1453","text":"\u4ec5\u7528\u4e8e\u7ba1\u7406\u673a\u6784\u7684GUI\u7531 QGSAuthoritiesEditor \u7c7b\u7ba1\u7406\u3002 \u53ef\u5728\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\uff1a 1 2 3 4 # \u521b\u5efa\u4e00\u4e2aQgsAuthConfigSelect GUI\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u4e0e`parent`\u6709\u7236\u5b50\u5173\u7cfb parent = QWidget () # GUI\u7236\u7ea7\u63a7\u4ef6 gui = QgsAuthAuthoritiesEditor ( parent ) gui . show ()","title":"14.5.3 \u673a\u6784\uff08\u8bc1\u4e66\u9881\u53d1\uff09\u7f16\u8f91\u5668"},{"location":"15-%E4%BB%BB%E5%8A%A1%E2%80%94%E2%80%94%E5%9C%A8%E5%90%8E%E5%8F%B0%E5%81%9A%E7%B9%81%E9%87%8D%E7%9A%84%E5%B7%A5%E4%BD%9C/","text":"\u672c\u8282\u4ee3\u7801\u7247\u6bb5\u9700\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 from qgis.core import ( QgsProcessingContext , QgsTaskManager , QgsTask , QgsProcessingAlgRunnerTask , Qgis , QgsProcessingFeedback , QgsApplication , QgsMessageLog , ) 15 \u4efb\u52a1 - \u5728\u540e\u53f0\u505a\u7e41\u91cd\u7684\u5de5\u4f5c \u2693\ufe0e 15.1 \u5f15\u8a00 \u2693\ufe0e \u4f7f\u7528\u7ebf\u7a0b\u7684\u540e\u53f0\u5904\u7406\uff0c\u662f\u5728\u8fdb\u884c\u7e41\u91cd\u5904\u7406\u65f6\u4fdd\u6301\u7528\u6237\u754c\u9762\u54cd\u5e94\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u4efb\u52a1\u53ef\u7528\u4e8e\u5728QGIS\u4e2d\u5b9e\u73b0\u7ebf\u7a0b\u3002 \u4efb\u52a1\uff08 QgsTask \uff09\u662f\u5728\u540e\u53f0\u6267\u884c\u4ee3\u7801\u7684\u5bb9\u5668\uff0c\u4efb\u52a1\u7ba1\u7406\uff08 QgsTaskManager \uff09\u7528\u4e8e\u63a7\u5236\u4efb\u52a1\u7684\u8fd0\u884c\u3002\u8fd9\u4e9b\u7c7b\u901a\u8fc7\u63d0\u4f9b\u4fe1\u53f7\u4f20\u9012\u673a\u5236\u3001\u8fdb\u5ea6\u62a5\u544a\u548c\u540e\u53f0\u8fdb\u7a0b\u72b6\u6001\u8bbf\u95ee\u673a\u5236\uff0c\u7b80\u5316\u4e86QGIS\u4e2d\u7684\u540e\u53f0\u5904\u7406\u3002\u53ef\u4ee5\u4f7f\u7528\u5b50\u4efb\u52a1\u5bf9\u4efb\u52a1\u8fdb\u884c\u5206\u7ec4\u3002 \u5168\u5c40\u4efb\u52a1\u7ba1\u7406\u5668\uff08 QgsApplication.taskManager() \uff09\u901a\u5e38\u88ab\u4f7f\u7528\u3002\u8fd9\u610f\u5473\u7740\u4f60\u7684\u4efb\u52a1\u53ef\u80fd\u4e0d\u662f\u7531\u4efb\u52a1\u7ba1\u7406\u5668\u63a7\u5236\u7684\u552f\u4e00\u4efb\u52a1\u3002 \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u521b\u5efaQGIS\u4efb\u52a1\uff1a \u901a\u8fc7\u6269\u5c55 QgsTask \u521b\u5efa\u81ea\u5df1\u7684\u4efb\u52a1 1 2 class SpecialisedTask ( QgsTask ): pass \u4ece\u51fd\u6570\u521b\u5efa\u4efb\u52a1 1 2 3 4 5 6 7 8 9 10 def heavyFunction (): # \u4e00\u4e9bCPU\u5bc6\u96c6\u578b\u5904\u7406 ... pass def workdone (): # ... \u4f7f\u7528\u7ed3\u679c\u505a\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u60c5 pass task = QgsTask . fromFunction ( 'heavy function' , heavyFunction , onfinished = workdone ) \u4ece\u5904\u7406\u7b97\u6cd5\u521b\u5efa\u4efb\u52a1 1 2 3 4 5 6 params = dict () context = QgsProcessingContext () feedback = QgsProcessingFeedback () buffer_alg = QgsApplication . instance () . processingRegistry () . algorithmById ( 'native:buffer' ) task = QgsProcessingAlgRunnerTask ( buffer_alg , params , context , feedback ) Warning \u4efb\u4f55\u540e\u53f0\u4efb\u52a1\uff08\u65e0\u8bba\u5982\u4f55\u521b\u5efa\uff09\u51b3\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u4e3b\u7ebf\u7a0b\u4e0a\u7684QObject\uff0c\u6bd4\u5982\u8bbf\u95eeQgsVectorLayer, QgsProject\u6216\u8005\u6267\u884c\u4efb\u4f55GUI\u64cd\u4f5c\u2014\u2014\u6bd4\u5982\u521b\u5efa\u65b0\u7684\u90e8\u4ef6\u6216\u8005\u4e0e\u73b0\u6709\u90e8\u4ef6\u4ea4\u4e92\u3002\u53ea\u80fd\u4ece\u4e3b\u7ebf\u7a0b\u8bbf\u95ee\u6216\u4fee\u6539Qt\u63a7\u4ef6\u3002\u5728\u4efb\u52a1\u542f\u52a8\u4e4b\u524d\uff0c\u5fc5\u987b\u590d\u5236\u4efb\u52a1\u4e2d\u4f7f\u7528\u7684\u6570\u636e\u3002\u8bd5\u56fe\u4ece\u540e\u53f0\u7ebf\u7a0b\u4f7f\u7528\u5b83\u4eec\u5c06\u5bfc\u81f4\u5d29\u6e83\u3002 \u53ef\u4ee5\u4f7f\u7528 QgsTask \u4e2d\u7684 addSubTask() \u51fd\u6570\u6765\u63cf\u8ff0\u4efb\u52a1\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u5f53\u58f0\u660e\u4f9d\u8d56\u5173\u7cfb\u65f6\uff0c\u4efb\u52a1\u7ba1\u7406\u5668\u5c06\u81ea\u52a8\u786e\u5b9a\u5982\u4f55\u6267\u884c\u8fd9\u4e9b\u4f9d\u8d56\u5173\u7cfb\u3002\u53ea\u8981\u6709\u53ef\u80fd\uff0c\u4f9d\u8d56\u9879\u5c06\u5e76\u884c\u6267\u884c\uff0c\u4ee5\u4fbf\u5c3d\u5feb\u6ee1\u8db3\u5b83\u4eec\u3002\u5982\u679c\u53d6\u6d88\u4e86\u4e00\u4e2a\u4efb\u52a1\u6240\u4f9d\u8d56\u7684\u4efb\u52a1\uff0c\u5219\u76f8\u5173\u4efb\u52a1\u4e5f\u5c06\u88ab\u53d6\u6d88\u3002\u5faa\u73af\u4f9d\u8d56\u53ef\u80fd\u9020\u6210\u6b7b\u9501\uff0c\u6240\u4ee5\u8981\u5c0f\u5fc3\u3002 \u5982\u679c\u4efb\u52a1\u4f9d\u8d56\u4e8e\u53ef\u7528\u7684\u56fe\u5c42\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 QgsTask \u4e2d\u7684 setDependentLayers \u51fd\u6570\u6765\u58f0\u660e\u3002\u5982\u679c\u4efb\u52a1\u6240\u4f9d\u8d56\u7684\u56fe\u5c42\u4e0d\u53ef\u7528\uff0c\u5219\u8be5\u4efb\u52a1\u5c06\u88ab\u53d6\u6d88\u3002 \u521b\u5efa\u4efb\u52a1\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4efb\u52a1\u7ba1\u7406\u5668\u7684 addTask() \u51fd\u6570\u8c03\u5ea6\u4efb\u52a1\u8fd0\u884c\u3002\u5411\u7ba1\u7406\u5668\u6dfb\u52a0\u4efb\u52a1\u4f1a\u81ea\u52a8\u5c06\u8be5\u4efb\u52a1\u7684\u6240\u6709\u6743\u8f6c\u79fb\u7ed9\u7ba1\u7406\u5458\uff0c\u7ba1\u7406\u5458\u5c06\u5728\u6267\u884c\u5b8c\u540e\u6e05\u7406\u548c\u5220\u9664\u4efb\u52a1\u3002\u4efb\u52a1\u7684\u8c03\u5ea6\u53d7\u4efb\u52a1\u4f18\u5148\u7ea7\u7684\u5f71\u54cd\uff0c\u4efb\u52a1\u4f18\u5148\u7ea7\u5728 addTask() \u4e2d\u8bbe\u7f6e\u3002 \u4efb\u52a1\u7684\u72b6\u6001\u53ef\u4ee5\u4f7f\u7528 QgsTask \u3001 QgsTaskManager \u7684\u4fe1\u53f7\u548c\u51fd\u6570\u8fdb\u884c\u76d1\u63a7\u3002 15.2 \u793a\u4f8b \u2693\ufe0e 15.2.1 \u6269\u5c55QgsTask \u2693\ufe0e \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c RandomIntegerSumTask \u6269\u5c55\u4e86 QgsTask \uff0c\u5b83\u5c06\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u6bb5\u5185\u751f\u62100\u5230500\u4e4b\u95f4\u7684100\u4e2a\u968f\u673a\u6574\u6570\u3002\u5982\u679c\u968f\u673a\u6570\u4e3a42\uff0c\u5219\u4e2d\u6b62\u4efb\u52a1\u5e76\u5f15\u53d1\u5f02\u5e38\u3002 RandomIntegerSumTask \uff08\u5e26\u5b50\u4efb\u52a1\uff09\u751f\u6210\u4e86\u51e0\u4e2a\u5b9e\u4f8b\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u4efb\u52a1\u7ba1\u7406\u5668\uff0c\u5c55\u793a\u4e24\u79cd\u7c7b\u578b\u7684\u4f9d\u8d56\u9879\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 import random from time import sleep from qgis.core import ( QgsApplication , QgsTask , QgsMessageLog , ) MESSAGE_CATEGORY = 'RandomIntegerSumTask' class RandomIntegerSumTask ( QgsTask ): \"\"\"\u5c55\u793a\u5982\u4f55\u5b50\u7c7b\u5316QgsTask\"\"\" def __init__ ( self , description , duration ): super () . __init__ ( description , QgsTask . CanCancel ) self . duration = duration self . total = 0 self . iterations = 0 self . exception = None def run ( self ): \"\"\"\u5728\u8fd9\u91cc\u4f60\u8981\u5b9e\u73b0\u4f60\u7684\u4efb\u52a1\u3002 \u5e94\u8be5\u5b9a\u671f\u6d4b\u8bd5isCanceled()\uff0c\u4ee5\u4fbf\u4f18\u96c5\u5730\u7ec8\u6b62\u3002 \u6b64\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56deTrue\u6216False\u3002 \u5f15\u53d1\u5f02\u5e38\u5c06\u4f7fQGIS\u5d29\u6e83\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5185\u90e8\u5904\u7406\u8fd9\u4e9b\u5f02\u5e38\uff0c\u5e76\u5728self.finished\u4e2d\u629b\u51fa\u3002 \"\"\" QgsMessageLog . logMessage ( 'Started task \" {} \"' . format ( self . description ()), MESSAGE_CATEGORY , Qgis . Info ) wait_time = self . duration / 100 for i in range ( 100 ): sleep ( wait_time ) # \u4f7f\u7528setProgress\u62a5\u544a\u8fdb\u5ea6 self . setProgress ( i ) arandominteger = random . randint ( 0 , 500 ) self . total += arandominteger self . iterations += 1 # \u68c0\u67e5isCanceled()\u5904\u7406\u53d6\u6d88 if self . isCanceled (): return False # \u6a21\u62df\u5f02\u5e38\u60c5\u51b5 if arandominteger == 42 : # \u4e0d\u8981raise Exception('bad value!')\uff0c\u5426\u5219\u5c06\u4f7fQGIS\u5d29\u6e83 self . exception = Exception ( 'bad value!' ) return False return True def finished ( self , result ): \"\"\" \u5f53\u4efb\u52a1\u5b8c\u6210\uff08\u65e0\u8bba\u6210\u529f\u4e0e\u5426\uff09\u65f6\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0 finished() \u6765\u6267\u884c\u4efb\u52a1\u5b8c\u6210\u540e\u7684\u540e\u7eed\u4e8b\u60c5\u3002 finished\u603b\u662f\u4ece\u4e3b\u7ebf\u7a0b\u4e2d\u8c03\u7528\u7684\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u8fdb\u884cGUI\u64cd\u4f5c\u548c\u5f15\u53d1 Python \u5f02\u5e38\u662f\u5b89\u5168\u7684\u3002 result\u662fself.run\u7684\u8fd4\u56de\u503c\u3002 \"\"\" if result : QgsMessageLog . logMessage ( 'Task \" {name} \" completed \\n ' \\ 'Total: {total} (with {iterations} ' \\ 'iterations)' . format ( name = self . description (), total = self . total , iterations = self . iterations ), MESSAGE_CATEGORY , Qgis . Success ) else : if self . exception is None : QgsMessageLog . logMessage ( 'Task \" {name} \" not successful but without ' \\ 'exception (probably the task was manually ' \\ 'canceled by the user)' . format ( name = self . description ()), MESSAGE_CATEGORY , Qgis . Warning ) else : QgsMessageLog . logMessage ( 'Task \" {name} \" Exception: {exception} ' . format ( name = self . description (), exception = self . exception ), MESSAGE_CATEGORY , Qgis . Critical ) raise self . exception def cancel ( self ): QgsMessageLog . logMessage ( 'Task \" {name} \" was canceled' . format ( name = self . description ()), MESSAGE_CATEGORY , Qgis . Info ) super () . cancel () longtask = RandomIntegerSumTask ( 'waste cpu long' , 20 ) shorttask = RandomIntegerSumTask ( 'waste cpu short' , 10 ) minitask = RandomIntegerSumTask ( 'waste cpu mini' , 5 ) shortsubtask = RandomIntegerSumTask ( 'waste cpu subtask short' , 5 ) longsubtask = RandomIntegerSumTask ( 'waste cpu subtask long' , 10 ) shortestsubtask = RandomIntegerSumTask ( 'waste cpu subtask shortest' , 4 ) # \u6dfb\u52a0\u5b50\u4efb\u52a1(shortsubtask)\u5230shorttask\u2014\u2014\u5fc5\u987b\u5728minitask\u548clongtask\u5b8c\u6210\u540e\u6267\u884c shorttask . addSubTask ( shortsubtask , [ minitask , longtask ]) # \u6dfb\u52a0\u5b50\u4efb\u52a1(longsubtask)\u5230longtask\u2014\u2014\u5fc5\u987b\u7236\u7ea7\u4efb\u52a1\u4e4b\u524d\u8fd0\u884c longtask . addSubTask ( longsubtask , [], QgsTask . ParentDependsOnSubTask ) # \u6dfb\u52a0\u5b50\u4efb\u52a1(shortestsubtask)\u5230longtask longtask . addSubTask ( shortestsubtask ) QgsApplication . taskManager () . addTask ( longtask ) QgsApplication . taskManager () . addTask ( shorttask ) QgsApplication . taskManager () . addTask ( minitask ) # RandomIntegerSumTask(0): Started task \"waste cpu subtask shortest\" # RandomIntegerSumTask(0): Started task \"waste cpu short\" # RandomIntegerSumTask(0): Started task \"waste cpu mini\" # RandomIntegerSumTask(0): Started task \"waste cpu subtask long\" # RandomIntegerSumTask(3): Task \"waste cpu subtask shortest\" completed # RandomTotal: 25452 (with 100 iterations) # RandomIntegerSumTask(3): Task \"waste cpu mini\" completed # RandomTotal: 23810 (with 100 iterations) # RandomIntegerSumTask(3): Task \"waste cpu subtask long\" completed # RandomTotal: 26308 (with 100 iterations) # RandomIntegerSumTask(0): Started task \"waste cpu long\" # RandomIntegerSumTask(3): Task \"waste cpu long\" completed # RandomTotal: 22534 (with 100 iterations) 15.2.2 \u4ece\u51fd\u6570\u521b\u5efa\u4efb\u52a1 \u2693\ufe0e \u4ece\u51fd\u6570\u521b\u5efa\u4efb\u52a1\uff08\u672c\u793a\u4f8b\u4e2d\u7684 doSomething \uff09\u3002\u8be5\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a QgsTask \u3002\u4e00\u4e2a\u91cd\u8981\u7684\u53c2\u6570\u662f on_finished \uff0c\u5b83\u662f\u5728\u4efb\u52a1\u5b8c\u6210\u65f6\u88ab\u8c03\u7528\u7684\u51fd\u6570\u3002\u793a\u4f8b\u4e2d\u7684 doSomething \u51fd\u6570\u6709\u53e6\u4e00\u4e2a\u53c2\u6570 wait_time \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 import random from time import sleep MESSAGE_CATEGORY = 'TaskFromFunction' def doSomething ( task , wait_time ): \"\"\" \u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u7ec8\u6b62\u4efb\u52a1 \u6210\u529f\u5219\u8fd4\u56de\u7ed3\u679c \u7ed3\u679c\u5c06\u548c\u5f02\u5e38\u4e00\u8d77\u4f20\u9012\u7ed9 (\u6210\u529f\u5219\u4e3a\u7a7a)on_finished\u51fd\u6570. \u5982\u679c\u5b58\u5728\u5f02\u5e38\uff0c\u7ed3\u679c\u4e3a\u7a7a \"\"\" QgsMessageLog . logMessage ( 'Started task {} ' . format ( task . description ()), MESSAGE_CATEGORY , Qgis . Info ) wait_time = wait_time / 100 total = 0 iterations = 0 for i in range ( 100 ): sleep ( wait_time ) # \u4f7f\u7528task.setProgress\u62a5\u544a\u8fdb\u5ea6 task . setProgress ( i ) arandominteger = random . randint ( 0 , 500 ) total += arandominteger iterations += 1 # \u68c0\u67e5task.isCanceled()\u5904\u7406\u53d6\u6d88 if task . isCanceled (): stopped ( task ) return None # \u629b\u51fa\u5f02\u5e38\u7ec8\u6b62\u4efb\u52a1 if arandominteger == 42 : raise Exception ( 'bad value!' ) return { 'total' : total , 'iterations' : iterations , 'task' : task . description ()} def stopped ( task ): QgsMessageLog . logMessage ( 'Task \" {name} \" was canceled' . format ( name = task . description ()), MESSAGE_CATEGORY , Qgis . Info ) def completed ( exception , result = None ): \"\"\"\u5f53doSomething\u5b8c\u6210\u65f6\u5457\u8c03\u4f63 \u5982\u679c\u629b\u51fa\u5f02\u5e38\u5219\u5f02\u5e38\u4fe1\u606f\u4e0d\u662f\u7a7a \u7ed3\u679c\u662fdoSomething\u8fd4\u56de\u7684\u7ed3\u679c\"\"\" if exception is None : if result is None : QgsMessageLog . logMessage ( 'Completed with no exception and no result ' \\ '(probably manually canceled by the user)' , MESSAGE_CATEGORY , Qgis . Warning ) else : QgsMessageLog . logMessage ( 'Task {name} completed \\n ' 'Total: {total} ( with {iterations} ' 'iterations)' . format ( name = result [ 'task' ], total = result [ 'total' ], iterations = result [ 'iterations' ]), MESSAGE_CATEGORY , Qgis . Info ) else : QgsMessageLog . logMessage ( \"Exception: {} \" . format ( exception ), MESSAGE_CATEGORY , Qgis . Critical ) raise exception # \u521b\u5efa\u4e00\u4e9b\u4efb\u52a1 task1 = QgsTask . fromFunction ( u 'Waste cpu 1' , doSomething , on_finished = completed , wait_time = 4 ) task2 = QgsTask . fromFunction ( u 'Waste cpu 2' , dosomething , on_finished = completed , wait_time = 3 ) QgsApplication . taskManager () . addTask ( task1 ) QgsApplication . taskManager () . addTask ( task2 ) # RandomIntegerSumTask(0): Started task \"waste cpu subtask short\" # RandomTaskFromFunction(0): Started task Waste cpu 1 # RandomTaskFromFunction(0): Started task Waste cpu 2 # RandomTaskFromFunction(0): Task Waste cpu 2 completed # RandomTotal: 23263 ( with 100 iterations) # RandomTaskFromFunction(0): Task Waste cpu 1 completed # RandomTotal: 25044 ( with 100 iterations) 14.2.3 \u5904\u7406\u7b97\u6cd5\u4efb\u52a1 \u2693\ufe0e \u521b\u5efa\u4e00\u4e2a\u4f7f\u7528\u7b97\u6cd5 qgis:randompointsinextent \u7684\u4efb\u52a1\uff0c\u5728\u6307\u5b9a\u8303\u56f4\u5185\u751f\u621050000\u4e2a\u968f\u673a\u70b9\u3002\u7ed3\u679c\u4ee5\u5b89\u5168\u7684\u65b9\u5f0f\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from functools import partial from qgis.core import ( QgsTaskManager , QgsMessageLog , QgsProcessingAlgRunnerTask , QgsApplication , QgsProcessingContext , QgsProcessingFeedback , QgsProject ) MESSAGE_CATEGORY = 'AlgRunnerTask' def task_finished ( context , successful , results ): if not successful : QgsMessageLog . logMessage ( 'Task finished unsucessfully' , MESSAGE_CATEGORY , Qgis . Warning ) output_layer = context . getMapLayer ( results [ 'OUTPUT' ]) # \u56e0\u4e3agetMapLayer\u6ca1\u6709\u79fb\u4ea4\u6240\u6709\u6743, \u5f53\u4e0a\u4e0b\u6587\u8d85\u51fa\u8303\u56f4\u65f6\u56fe\u5c42\u5c06\u88ab\u5220\u9664\uff0c\u4f60\u4f1a\u9047\u5230\u5d29\u6e83 # takeMapLayer\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u56e0\u6b64\u5b83\u5c06\u5b89\u5168\u5730\u6dfb\u52a0\u5230QgsProject\u4e2d\uff0c\u5e76\u8d4b\u4e88QgsProject\u6240\u6709\u6743 if output_layer and output_layer . isValid (): QgsProject . instance () . addMapLayer ( context . takeResultLayer ( output_layer . id ())) alg = QgsApplication . processingRegistry () . algorithmById ( u 'qgis:randompointsinextent' ) context = QgsProcessingContext () feedback = QgsProcessingFeedback () params = { 'EXTENT' : '0.0,10.0,40,50 [EPSG:4326]' , 'MIN_DISTANCE' : 0.0 , 'POINTS_NUMBER' : 50000 , 'TARGET_CRS' : 'EPSG:4326' , 'OUTPUT' : 'memory:My random points' } task = QgsProcessingAlgRunnerTask ( alg , params , context , feedback ) task . executed . connect ( partial ( task_finished , context )) QgsApplication . taskManager () . addTask ( task ) \u4e5f\u53ef\u4ee5\u67e5\u770b\u535a\u5ba2\uff1a https://opengis.ch/2018/06/22/threads-in-pyqgis3/","title":"15-\u4efb\u52a1 - \u5728\u540e\u53f0\u505a\u7e41\u91cd\u7684\u5de5\u4f5c"},{"location":"15-%E4%BB%BB%E5%8A%A1%E2%80%94%E2%80%94%E5%9C%A8%E5%90%8E%E5%8F%B0%E5%81%9A%E7%B9%81%E9%87%8D%E7%9A%84%E5%B7%A5%E4%BD%9C/#15-","text":"","title":"15 \u4efb\u52a1 - \u5728\u540e\u53f0\u505a\u7e41\u91cd\u7684\u5de5\u4f5c"},{"location":"15-%E4%BB%BB%E5%8A%A1%E2%80%94%E2%80%94%E5%9C%A8%E5%90%8E%E5%8F%B0%E5%81%9A%E7%B9%81%E9%87%8D%E7%9A%84%E5%B7%A5%E4%BD%9C/#151","text":"\u4f7f\u7528\u7ebf\u7a0b\u7684\u540e\u53f0\u5904\u7406\uff0c\u662f\u5728\u8fdb\u884c\u7e41\u91cd\u5904\u7406\u65f6\u4fdd\u6301\u7528\u6237\u754c\u9762\u54cd\u5e94\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u4efb\u52a1\u53ef\u7528\u4e8e\u5728QGIS\u4e2d\u5b9e\u73b0\u7ebf\u7a0b\u3002 \u4efb\u52a1\uff08 QgsTask \uff09\u662f\u5728\u540e\u53f0\u6267\u884c\u4ee3\u7801\u7684\u5bb9\u5668\uff0c\u4efb\u52a1\u7ba1\u7406\uff08 QgsTaskManager \uff09\u7528\u4e8e\u63a7\u5236\u4efb\u52a1\u7684\u8fd0\u884c\u3002\u8fd9\u4e9b\u7c7b\u901a\u8fc7\u63d0\u4f9b\u4fe1\u53f7\u4f20\u9012\u673a\u5236\u3001\u8fdb\u5ea6\u62a5\u544a\u548c\u540e\u53f0\u8fdb\u7a0b\u72b6\u6001\u8bbf\u95ee\u673a\u5236\uff0c\u7b80\u5316\u4e86QGIS\u4e2d\u7684\u540e\u53f0\u5904\u7406\u3002\u53ef\u4ee5\u4f7f\u7528\u5b50\u4efb\u52a1\u5bf9\u4efb\u52a1\u8fdb\u884c\u5206\u7ec4\u3002 \u5168\u5c40\u4efb\u52a1\u7ba1\u7406\u5668\uff08 QgsApplication.taskManager() \uff09\u901a\u5e38\u88ab\u4f7f\u7528\u3002\u8fd9\u610f\u5473\u7740\u4f60\u7684\u4efb\u52a1\u53ef\u80fd\u4e0d\u662f\u7531\u4efb\u52a1\u7ba1\u7406\u5668\u63a7\u5236\u7684\u552f\u4e00\u4efb\u52a1\u3002 \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u521b\u5efaQGIS\u4efb\u52a1\uff1a \u901a\u8fc7\u6269\u5c55 QgsTask \u521b\u5efa\u81ea\u5df1\u7684\u4efb\u52a1 1 2 class SpecialisedTask ( QgsTask ): pass \u4ece\u51fd\u6570\u521b\u5efa\u4efb\u52a1 1 2 3 4 5 6 7 8 9 10 def heavyFunction (): # \u4e00\u4e9bCPU\u5bc6\u96c6\u578b\u5904\u7406 ... pass def workdone (): # ... \u4f7f\u7528\u7ed3\u679c\u505a\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u60c5 pass task = QgsTask . fromFunction ( 'heavy function' , heavyFunction , onfinished = workdone ) \u4ece\u5904\u7406\u7b97\u6cd5\u521b\u5efa\u4efb\u52a1 1 2 3 4 5 6 params = dict () context = QgsProcessingContext () feedback = QgsProcessingFeedback () buffer_alg = QgsApplication . instance () . processingRegistry () . algorithmById ( 'native:buffer' ) task = QgsProcessingAlgRunnerTask ( buffer_alg , params , context , feedback ) Warning \u4efb\u4f55\u540e\u53f0\u4efb\u52a1\uff08\u65e0\u8bba\u5982\u4f55\u521b\u5efa\uff09\u51b3\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u4e3b\u7ebf\u7a0b\u4e0a\u7684QObject\uff0c\u6bd4\u5982\u8bbf\u95eeQgsVectorLayer, QgsProject\u6216\u8005\u6267\u884c\u4efb\u4f55GUI\u64cd\u4f5c\u2014\u2014\u6bd4\u5982\u521b\u5efa\u65b0\u7684\u90e8\u4ef6\u6216\u8005\u4e0e\u73b0\u6709\u90e8\u4ef6\u4ea4\u4e92\u3002\u53ea\u80fd\u4ece\u4e3b\u7ebf\u7a0b\u8bbf\u95ee\u6216\u4fee\u6539Qt\u63a7\u4ef6\u3002\u5728\u4efb\u52a1\u542f\u52a8\u4e4b\u524d\uff0c\u5fc5\u987b\u590d\u5236\u4efb\u52a1\u4e2d\u4f7f\u7528\u7684\u6570\u636e\u3002\u8bd5\u56fe\u4ece\u540e\u53f0\u7ebf\u7a0b\u4f7f\u7528\u5b83\u4eec\u5c06\u5bfc\u81f4\u5d29\u6e83\u3002 \u53ef\u4ee5\u4f7f\u7528 QgsTask \u4e2d\u7684 addSubTask() \u51fd\u6570\u6765\u63cf\u8ff0\u4efb\u52a1\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u5f53\u58f0\u660e\u4f9d\u8d56\u5173\u7cfb\u65f6\uff0c\u4efb\u52a1\u7ba1\u7406\u5668\u5c06\u81ea\u52a8\u786e\u5b9a\u5982\u4f55\u6267\u884c\u8fd9\u4e9b\u4f9d\u8d56\u5173\u7cfb\u3002\u53ea\u8981\u6709\u53ef\u80fd\uff0c\u4f9d\u8d56\u9879\u5c06\u5e76\u884c\u6267\u884c\uff0c\u4ee5\u4fbf\u5c3d\u5feb\u6ee1\u8db3\u5b83\u4eec\u3002\u5982\u679c\u53d6\u6d88\u4e86\u4e00\u4e2a\u4efb\u52a1\u6240\u4f9d\u8d56\u7684\u4efb\u52a1\uff0c\u5219\u76f8\u5173\u4efb\u52a1\u4e5f\u5c06\u88ab\u53d6\u6d88\u3002\u5faa\u73af\u4f9d\u8d56\u53ef\u80fd\u9020\u6210\u6b7b\u9501\uff0c\u6240\u4ee5\u8981\u5c0f\u5fc3\u3002 \u5982\u679c\u4efb\u52a1\u4f9d\u8d56\u4e8e\u53ef\u7528\u7684\u56fe\u5c42\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 QgsTask \u4e2d\u7684 setDependentLayers \u51fd\u6570\u6765\u58f0\u660e\u3002\u5982\u679c\u4efb\u52a1\u6240\u4f9d\u8d56\u7684\u56fe\u5c42\u4e0d\u53ef\u7528\uff0c\u5219\u8be5\u4efb\u52a1\u5c06\u88ab\u53d6\u6d88\u3002 \u521b\u5efa\u4efb\u52a1\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4efb\u52a1\u7ba1\u7406\u5668\u7684 addTask() \u51fd\u6570\u8c03\u5ea6\u4efb\u52a1\u8fd0\u884c\u3002\u5411\u7ba1\u7406\u5668\u6dfb\u52a0\u4efb\u52a1\u4f1a\u81ea\u52a8\u5c06\u8be5\u4efb\u52a1\u7684\u6240\u6709\u6743\u8f6c\u79fb\u7ed9\u7ba1\u7406\u5458\uff0c\u7ba1\u7406\u5458\u5c06\u5728\u6267\u884c\u5b8c\u540e\u6e05\u7406\u548c\u5220\u9664\u4efb\u52a1\u3002\u4efb\u52a1\u7684\u8c03\u5ea6\u53d7\u4efb\u52a1\u4f18\u5148\u7ea7\u7684\u5f71\u54cd\uff0c\u4efb\u52a1\u4f18\u5148\u7ea7\u5728 addTask() \u4e2d\u8bbe\u7f6e\u3002 \u4efb\u52a1\u7684\u72b6\u6001\u53ef\u4ee5\u4f7f\u7528 QgsTask \u3001 QgsTaskManager \u7684\u4fe1\u53f7\u548c\u51fd\u6570\u8fdb\u884c\u76d1\u63a7\u3002","title":"15.1 \u5f15\u8a00"},{"location":"15-%E4%BB%BB%E5%8A%A1%E2%80%94%E2%80%94%E5%9C%A8%E5%90%8E%E5%8F%B0%E5%81%9A%E7%B9%81%E9%87%8D%E7%9A%84%E5%B7%A5%E4%BD%9C/#152","text":"","title":"15.2 \u793a\u4f8b"},{"location":"15-%E4%BB%BB%E5%8A%A1%E2%80%94%E2%80%94%E5%9C%A8%E5%90%8E%E5%8F%B0%E5%81%9A%E7%B9%81%E9%87%8D%E7%9A%84%E5%B7%A5%E4%BD%9C/#1521-qgstask","text":"\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c RandomIntegerSumTask \u6269\u5c55\u4e86 QgsTask \uff0c\u5b83\u5c06\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u6bb5\u5185\u751f\u62100\u5230500\u4e4b\u95f4\u7684100\u4e2a\u968f\u673a\u6574\u6570\u3002\u5982\u679c\u968f\u673a\u6570\u4e3a42\uff0c\u5219\u4e2d\u6b62\u4efb\u52a1\u5e76\u5f15\u53d1\u5f02\u5e38\u3002 RandomIntegerSumTask \uff08\u5e26\u5b50\u4efb\u52a1\uff09\u751f\u6210\u4e86\u51e0\u4e2a\u5b9e\u4f8b\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u4efb\u52a1\u7ba1\u7406\u5668\uff0c\u5c55\u793a\u4e24\u79cd\u7c7b\u578b\u7684\u4f9d\u8d56\u9879\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 import random from time import sleep from qgis.core import ( QgsApplication , QgsTask , QgsMessageLog , ) MESSAGE_CATEGORY = 'RandomIntegerSumTask' class RandomIntegerSumTask ( QgsTask ): \"\"\"\u5c55\u793a\u5982\u4f55\u5b50\u7c7b\u5316QgsTask\"\"\" def __init__ ( self , description , duration ): super () . __init__ ( description , QgsTask . CanCancel ) self . duration = duration self . total = 0 self . iterations = 0 self . exception = None def run ( self ): \"\"\"\u5728\u8fd9\u91cc\u4f60\u8981\u5b9e\u73b0\u4f60\u7684\u4efb\u52a1\u3002 \u5e94\u8be5\u5b9a\u671f\u6d4b\u8bd5isCanceled()\uff0c\u4ee5\u4fbf\u4f18\u96c5\u5730\u7ec8\u6b62\u3002 \u6b64\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56deTrue\u6216False\u3002 \u5f15\u53d1\u5f02\u5e38\u5c06\u4f7fQGIS\u5d29\u6e83\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5185\u90e8\u5904\u7406\u8fd9\u4e9b\u5f02\u5e38\uff0c\u5e76\u5728self.finished\u4e2d\u629b\u51fa\u3002 \"\"\" QgsMessageLog . logMessage ( 'Started task \" {} \"' . format ( self . description ()), MESSAGE_CATEGORY , Qgis . Info ) wait_time = self . duration / 100 for i in range ( 100 ): sleep ( wait_time ) # \u4f7f\u7528setProgress\u62a5\u544a\u8fdb\u5ea6 self . setProgress ( i ) arandominteger = random . randint ( 0 , 500 ) self . total += arandominteger self . iterations += 1 # \u68c0\u67e5isCanceled()\u5904\u7406\u53d6\u6d88 if self . isCanceled (): return False # \u6a21\u62df\u5f02\u5e38\u60c5\u51b5 if arandominteger == 42 : # \u4e0d\u8981raise Exception('bad value!')\uff0c\u5426\u5219\u5c06\u4f7fQGIS\u5d29\u6e83 self . exception = Exception ( 'bad value!' ) return False return True def finished ( self , result ): \"\"\" \u5f53\u4efb\u52a1\u5b8c\u6210\uff08\u65e0\u8bba\u6210\u529f\u4e0e\u5426\uff09\u65f6\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0 finished() \u6765\u6267\u884c\u4efb\u52a1\u5b8c\u6210\u540e\u7684\u540e\u7eed\u4e8b\u60c5\u3002 finished\u603b\u662f\u4ece\u4e3b\u7ebf\u7a0b\u4e2d\u8c03\u7528\u7684\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u8fdb\u884cGUI\u64cd\u4f5c\u548c\u5f15\u53d1 Python \u5f02\u5e38\u662f\u5b89\u5168\u7684\u3002 result\u662fself.run\u7684\u8fd4\u56de\u503c\u3002 \"\"\" if result : QgsMessageLog . logMessage ( 'Task \" {name} \" completed \\n ' \\ 'Total: {total} (with {iterations} ' \\ 'iterations)' . format ( name = self . description (), total = self . total , iterations = self . iterations ), MESSAGE_CATEGORY , Qgis . Success ) else : if self . exception is None : QgsMessageLog . logMessage ( 'Task \" {name} \" not successful but without ' \\ 'exception (probably the task was manually ' \\ 'canceled by the user)' . format ( name = self . description ()), MESSAGE_CATEGORY , Qgis . Warning ) else : QgsMessageLog . logMessage ( 'Task \" {name} \" Exception: {exception} ' . format ( name = self . description (), exception = self . exception ), MESSAGE_CATEGORY , Qgis . Critical ) raise self . exception def cancel ( self ): QgsMessageLog . logMessage ( 'Task \" {name} \" was canceled' . format ( name = self . description ()), MESSAGE_CATEGORY , Qgis . Info ) super () . cancel () longtask = RandomIntegerSumTask ( 'waste cpu long' , 20 ) shorttask = RandomIntegerSumTask ( 'waste cpu short' , 10 ) minitask = RandomIntegerSumTask ( 'waste cpu mini' , 5 ) shortsubtask = RandomIntegerSumTask ( 'waste cpu subtask short' , 5 ) longsubtask = RandomIntegerSumTask ( 'waste cpu subtask long' , 10 ) shortestsubtask = RandomIntegerSumTask ( 'waste cpu subtask shortest' , 4 ) # \u6dfb\u52a0\u5b50\u4efb\u52a1(shortsubtask)\u5230shorttask\u2014\u2014\u5fc5\u987b\u5728minitask\u548clongtask\u5b8c\u6210\u540e\u6267\u884c shorttask . addSubTask ( shortsubtask , [ minitask , longtask ]) # \u6dfb\u52a0\u5b50\u4efb\u52a1(longsubtask)\u5230longtask\u2014\u2014\u5fc5\u987b\u7236\u7ea7\u4efb\u52a1\u4e4b\u524d\u8fd0\u884c longtask . addSubTask ( longsubtask , [], QgsTask . ParentDependsOnSubTask ) # \u6dfb\u52a0\u5b50\u4efb\u52a1(shortestsubtask)\u5230longtask longtask . addSubTask ( shortestsubtask ) QgsApplication . taskManager () . addTask ( longtask ) QgsApplication . taskManager () . addTask ( shorttask ) QgsApplication . taskManager () . addTask ( minitask ) # RandomIntegerSumTask(0): Started task \"waste cpu subtask shortest\" # RandomIntegerSumTask(0): Started task \"waste cpu short\" # RandomIntegerSumTask(0): Started task \"waste cpu mini\" # RandomIntegerSumTask(0): Started task \"waste cpu subtask long\" # RandomIntegerSumTask(3): Task \"waste cpu subtask shortest\" completed # RandomTotal: 25452 (with 100 iterations) # RandomIntegerSumTask(3): Task \"waste cpu mini\" completed # RandomTotal: 23810 (with 100 iterations) # RandomIntegerSumTask(3): Task \"waste cpu subtask long\" completed # RandomTotal: 26308 (with 100 iterations) # RandomIntegerSumTask(0): Started task \"waste cpu long\" # RandomIntegerSumTask(3): Task \"waste cpu long\" completed # RandomTotal: 22534 (with 100 iterations)","title":"15.2.1 \u6269\u5c55QgsTask"},{"location":"15-%E4%BB%BB%E5%8A%A1%E2%80%94%E2%80%94%E5%9C%A8%E5%90%8E%E5%8F%B0%E5%81%9A%E7%B9%81%E9%87%8D%E7%9A%84%E5%B7%A5%E4%BD%9C/#1522","text":"\u4ece\u51fd\u6570\u521b\u5efa\u4efb\u52a1\uff08\u672c\u793a\u4f8b\u4e2d\u7684 doSomething \uff09\u3002\u8be5\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a QgsTask \u3002\u4e00\u4e2a\u91cd\u8981\u7684\u53c2\u6570\u662f on_finished \uff0c\u5b83\u662f\u5728\u4efb\u52a1\u5b8c\u6210\u65f6\u88ab\u8c03\u7528\u7684\u51fd\u6570\u3002\u793a\u4f8b\u4e2d\u7684 doSomething \u51fd\u6570\u6709\u53e6\u4e00\u4e2a\u53c2\u6570 wait_time \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 import random from time import sleep MESSAGE_CATEGORY = 'TaskFromFunction' def doSomething ( task , wait_time ): \"\"\" \u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u7ec8\u6b62\u4efb\u52a1 \u6210\u529f\u5219\u8fd4\u56de\u7ed3\u679c \u7ed3\u679c\u5c06\u548c\u5f02\u5e38\u4e00\u8d77\u4f20\u9012\u7ed9 (\u6210\u529f\u5219\u4e3a\u7a7a)on_finished\u51fd\u6570. \u5982\u679c\u5b58\u5728\u5f02\u5e38\uff0c\u7ed3\u679c\u4e3a\u7a7a \"\"\" QgsMessageLog . logMessage ( 'Started task {} ' . format ( task . description ()), MESSAGE_CATEGORY , Qgis . Info ) wait_time = wait_time / 100 total = 0 iterations = 0 for i in range ( 100 ): sleep ( wait_time ) # \u4f7f\u7528task.setProgress\u62a5\u544a\u8fdb\u5ea6 task . setProgress ( i ) arandominteger = random . randint ( 0 , 500 ) total += arandominteger iterations += 1 # \u68c0\u67e5task.isCanceled()\u5904\u7406\u53d6\u6d88 if task . isCanceled (): stopped ( task ) return None # \u629b\u51fa\u5f02\u5e38\u7ec8\u6b62\u4efb\u52a1 if arandominteger == 42 : raise Exception ( 'bad value!' ) return { 'total' : total , 'iterations' : iterations , 'task' : task . description ()} def stopped ( task ): QgsMessageLog . logMessage ( 'Task \" {name} \" was canceled' . format ( name = task . description ()), MESSAGE_CATEGORY , Qgis . Info ) def completed ( exception , result = None ): \"\"\"\u5f53doSomething\u5b8c\u6210\u65f6\u5457\u8c03\u4f63 \u5982\u679c\u629b\u51fa\u5f02\u5e38\u5219\u5f02\u5e38\u4fe1\u606f\u4e0d\u662f\u7a7a \u7ed3\u679c\u662fdoSomething\u8fd4\u56de\u7684\u7ed3\u679c\"\"\" if exception is None : if result is None : QgsMessageLog . logMessage ( 'Completed with no exception and no result ' \\ '(probably manually canceled by the user)' , MESSAGE_CATEGORY , Qgis . Warning ) else : QgsMessageLog . logMessage ( 'Task {name} completed \\n ' 'Total: {total} ( with {iterations} ' 'iterations)' . format ( name = result [ 'task' ], total = result [ 'total' ], iterations = result [ 'iterations' ]), MESSAGE_CATEGORY , Qgis . Info ) else : QgsMessageLog . logMessage ( \"Exception: {} \" . format ( exception ), MESSAGE_CATEGORY , Qgis . Critical ) raise exception # \u521b\u5efa\u4e00\u4e9b\u4efb\u52a1 task1 = QgsTask . fromFunction ( u 'Waste cpu 1' , doSomething , on_finished = completed , wait_time = 4 ) task2 = QgsTask . fromFunction ( u 'Waste cpu 2' , dosomething , on_finished = completed , wait_time = 3 ) QgsApplication . taskManager () . addTask ( task1 ) QgsApplication . taskManager () . addTask ( task2 ) # RandomIntegerSumTask(0): Started task \"waste cpu subtask short\" # RandomTaskFromFunction(0): Started task Waste cpu 1 # RandomTaskFromFunction(0): Started task Waste cpu 2 # RandomTaskFromFunction(0): Task Waste cpu 2 completed # RandomTotal: 23263 ( with 100 iterations) # RandomTaskFromFunction(0): Task Waste cpu 1 completed # RandomTotal: 25044 ( with 100 iterations)","title":"15.2.2 \u4ece\u51fd\u6570\u521b\u5efa\u4efb\u52a1"},{"location":"15-%E4%BB%BB%E5%8A%A1%E2%80%94%E2%80%94%E5%9C%A8%E5%90%8E%E5%8F%B0%E5%81%9A%E7%B9%81%E9%87%8D%E7%9A%84%E5%B7%A5%E4%BD%9C/#1423","text":"\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528\u7b97\u6cd5 qgis:randompointsinextent \u7684\u4efb\u52a1\uff0c\u5728\u6307\u5b9a\u8303\u56f4\u5185\u751f\u621050000\u4e2a\u968f\u673a\u70b9\u3002\u7ed3\u679c\u4ee5\u5b89\u5168\u7684\u65b9\u5f0f\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from functools import partial from qgis.core import ( QgsTaskManager , QgsMessageLog , QgsProcessingAlgRunnerTask , QgsApplication , QgsProcessingContext , QgsProcessingFeedback , QgsProject ) MESSAGE_CATEGORY = 'AlgRunnerTask' def task_finished ( context , successful , results ): if not successful : QgsMessageLog . logMessage ( 'Task finished unsucessfully' , MESSAGE_CATEGORY , Qgis . Warning ) output_layer = context . getMapLayer ( results [ 'OUTPUT' ]) # \u56e0\u4e3agetMapLayer\u6ca1\u6709\u79fb\u4ea4\u6240\u6709\u6743, \u5f53\u4e0a\u4e0b\u6587\u8d85\u51fa\u8303\u56f4\u65f6\u56fe\u5c42\u5c06\u88ab\u5220\u9664\uff0c\u4f60\u4f1a\u9047\u5230\u5d29\u6e83 # takeMapLayer\u79fb\u4ea4\u6240\u6709\u6743\uff0c\u56e0\u6b64\u5b83\u5c06\u5b89\u5168\u5730\u6dfb\u52a0\u5230QgsProject\u4e2d\uff0c\u5e76\u8d4b\u4e88QgsProject\u6240\u6709\u6743 if output_layer and output_layer . isValid (): QgsProject . instance () . addMapLayer ( context . takeResultLayer ( output_layer . id ())) alg = QgsApplication . processingRegistry () . algorithmById ( u 'qgis:randompointsinextent' ) context = QgsProcessingContext () feedback = QgsProcessingFeedback () params = { 'EXTENT' : '0.0,10.0,40,50 [EPSG:4326]' , 'MIN_DISTANCE' : 0.0 , 'POINTS_NUMBER' : 50000 , 'TARGET_CRS' : 'EPSG:4326' , 'OUTPUT' : 'memory:My random points' } task = QgsProcessingAlgRunnerTask ( alg , params , context , feedback ) task . executed . connect ( partial ( task_finished , context )) QgsApplication . taskManager () . addTask ( task ) \u4e5f\u53ef\u4ee5\u67e5\u770b\u535a\u5ba2\uff1a https://opengis.ch/2018/06/22/threads-in-pyqgis3/","title":"14.2.3 \u5904\u7406\u7b97\u6cd5\u4efb\u52a1"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/","text":"16 \u5f00\u53d1Python\u63d2\u4ef6 \u2693\ufe0e \u53ef\u4ee5\u7528Python\u7f16\u7a0b\u8bed\u8a00\u521b\u5efa\u63d2\u4ef6\u3002\u4e0e\u7528C ++\u7f16\u5199\u63d2\u4ef6\u76f8\u6bd4\uff0c\u7531\u4e8ePython\u8bed\u8a00\u7684\u52a8\u6001\u7279\u6027\uff0c\u8fd9\u4e9b\u63d2\u4ef6\u5e94\u8be5\u66f4\u5bb9\u6613\u7f16\u5199\uff0c\u7406\u89e3\uff0c\u7ef4\u62a4\u548c\u5206\u53d1\u3002 Python\u63d2\u4ef6\u4e0eQGIS\u63d2\u4ef6\u7ba1\u7406\u5668\u4e2d\u7684C ++\u63d2\u4ef6\u4e00\u8d77\u5217\u51fa\u3002\u4ed6\u4eec\u5728 ~/(UserProfile)/python/plugins \u548c\u4ee5\u4e0b\u8def\u5f84\u4e2d\u641c\u7d22\uff1a UNIX / Mac\u4e0a\uff1a (qgis_prefix)/share/qgis/python/plugins Windows\uff1a (qgis_prefix)/python/plugins \u6709\u5173 ~ \u548c (UserProfile) \u7684\u5b9a\u4e49,\u8bf7\u67e5\u770b Core\u548cExternal\u63d2\u4ef6 \u3002 \u63d0\u793a \u5c06QGIS_PLUGINPATH\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5b58\u5728\u7684\u76ee\u5f55\u8def\u5f84\uff0c\u53ef\u4ee5\u5c06\u6b64\u8def\u5f84\u6dfb\u52a0\u5230\u63d2\u4ef6\u7684\u641c\u7d22\u8def\u5f84\u5217\u8868\u4e2d\u3002 16.1 \u6784\u5efaPython\u63d2\u4ef6 \u2693\ufe0e \u521b\u5efa\u63d2\u4ef6\uff0c\u9700\u8981\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u60f3\u6cd5 \uff1a\u4f60\u60f3\u8981\u4f7f\u7528\u65b0\u7684QGIS\u63d2\u4ef6\u505a\u4ec0\u4e48\u3002\u4f60\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u505a\uff1f\u4f60\u60f3\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\uff1f\u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u6709\u53e6\u4e00\u4e2a\u63d2\u4ef6\u5417\uff1f \u521b\u5efa\u6587\u4ef6 \uff1a\u4e00\u4e9b\u5fc5\u8981\u6587\u4ef6\uff08\u67e5\u770b \u63d2\u4ef6\u6587\u4ef6 \uff09 \u7f16\u5199\u4ee3\u7801 \uff1a\u5728\u6070\u5f53\u7684\u6587\u4ef6\u4e2d\u5199\u4ee3\u7801 \u6d4b\u8bd5 \uff1a\u5982\u679c\u51c6\u5907\u5c31\u7eea\uff0c \u91cd\u65b0\u52a0\u8f7d\u63d2\u4ef6 \u53d1\u5e03 \uff1a\u5728QGIS\u4ed3\u5e93\u4e2d\u53d1\u5e03\u4f60\u7684\u63d2\u4ef6\u6216\u5c06\u4f60\u81ea\u5df1\u7684\u4ed3\u5e93\u4f5c\u4e3a\u4e2a\u4eba\u201cGIS\u6b66\u5668\u201d\u7684\u201c\u6b66\u5668\u5e93\u201d\u3002 16.1.1 \u7f16\u5199\u4e00\u4e2a\u63d2\u4ef6 \u2693\ufe0e \u81ea\u4ece\u5728QGIS\u4e2d\u5f15\u5165Python\u63d2\u4ef6\u4ee5\u6765\uff0c\u51fa\u73b0\u4e86\u8bb8\u591a\u63d2\u4ef6\u3002QGIS\u56e2\u961f\u7ef4\u62a4\u4e86\u4e00\u4e2a \u5b98\u65b9Python\u63d2\u4ef6\u5e93 \u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u7684\u6e90\u7801\u6765\u4e86\u89e3\u4f7f\u7528PyQGIS\u8fdb\u884c\u7f16\u7a0b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u6216\u8005\u4e86\u89e3\u4f60\u662f\u5426\u5728\u91cd\u590d\u5f00\u53d1\u3002 16.1.1.1 \u63d2\u4ef6\u6587\u4ef6 \u2693\ufe0e \u8fd9\u662f\u6211\u4eec\u7684\u793a\u4f8b\u63d2\u4ef6\u7684\u76ee\u5f55\u7ed3\u6784 1 2 3 4 5 6 7 8 9 PYTHON_PLUGINS_PATH/ MyPlugin/ __init__.py --> *\u5fc5\u9700* mainPlugin.py --> *\u6838\u5fc3\u4ee3\u7801* metadata.txt --> *\u5fc5\u9700* resources.qrc --> *\u53ef\u80fd\u9700\u8981* resources.py --> *\u7f16\u8bd1\u7248\u672c, \u53ef\u80fd\u9700\u8981* form.ui --> *\u53ef\u80fd\u9700\u8981* form.py --> *\u7f16\u8bd1\u7248\u672c, \u53ef\u80fd\u9700\u8981* \u8fd9\u4e9b\u6587\u4ef6\u7684\u542b\u4e49\u662f\u4ec0\u4e48\uff1a __init__.py =\u63d2\u4ef6\u7684\u5165\u53e3\u3002\u5b83\u5fc5\u987b\u5177\u6709 classFactory() \u65b9\u6cd5\uff0c\u8fd8\u53ef\u4ee5\u5177\u6709\u4efb\u4f55\u5176\u4ed6\u521d\u59cb\u5316\u4ee3\u7801\u3002 mainPlugin.py =\u63d2\u4ef6\u7684\u4e3b\u8981\u5de5\u4f5c\u4ee3\u7801\u3002\u5305\u542b\u6709\u5173\u63d2\u4ef6\u64cd\u4f5c\u548c\u4e3b\u8981\u4ee3\u7801\u7684\u6240\u6709\u4fe1\u606f\u3002 resources.qrc = Qt\u8bbe\u8ba1\u5e08\u521b\u5efa\u7684xml\u6587\u6863\u3002\u5305\u542b\u8868\u5355\u8d44\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\u3002 resources.py =\u5c06\u4e0a\u8ff0.qrc\u6587\u4ef6\u8f6c\u6362\u4e3aPython\u4ee3\u7801\u3002 form.ui = Qt\u8bbe\u8ba1\u5e08\u521b\u5efa\u7684GUI\u3002 form.py =\u5c06\u4e0a\u9762\u63cf\u8ff0\u7684form.ui\u8f6c\u6362\u4e3aPython\u4ee3\u7801\u3002 metadata.txt =\u5305\u542b\u63d2\u4ef6\u7f51\u7ad9\u548c\u63d2\u4ef6\u57fa\u7840\u7ed3\u6784\u4f7f\u7528\u7684\u5e38\u89c4\u4fe1\u606f\uff0c\u7248\u672c\u3001\u540d\u79f0\u548c\u4e00\u4e9b\u5176\u4ed6\u5143\u6570\u636e\u3002 \u8fd9 \u662f\u4e00\u79cd\u81ea\u52a8\u521b\u5efa\u5178\u578bQGIS Python\u63d2\u4ef6\u7684\u57fa\u672c\u6587\u4ef6\uff08\u6846\u67b6\uff09\u7684\u65b9\u5f0f\u3002 \u6709\u4e00\u4e2a\u540d\u4e3a Plugin Builder 3 \u7684QGIS\u63d2\u4ef6 \uff0c\u5b83\u4e3aQGIS\u521b\u5efa\u4e00\u4e2a\u63d2\u4ef6\u6a21\u677f\uff0c\u4e0d\u9700\u8981\u4e92\u8054\u7f51\u8fde\u63a5\u3002\u8fd9\u662f\u63a8\u8350\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u517c\u5bb93.x\u7248\u672c\u3002 Warning \u5982\u679c\u60a8\u6253\u7b97\u5c06\u63d2\u4ef6\u4e0a\u4f20\u5230 Python\u5b98\u65b9\u63d2\u4ef6\u5e93 \uff0c\u5219\u5fc5\u987b\u68c0\u67e5\u63d2\u4ef6\u662f\u5426\u9075\u5faa\u63d2\u4ef6 \u9a8c\u8bc1 \u6240\u5fc5\u9700\u7684\u4e00\u4e9b\u9644\u52a0\u89c4\u5219 16.1.2 \u63d2\u4ef6\u5185\u5bb9 \u2693\ufe0e \u5728\u8fd9\u91cc\uff0c\u4f60\u53ef\u4ee5\u627e\u5230\u6709\u5173\u5728\u4e0a\u8ff0\u6587\u4ef6\u7ed3\u6784\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\u9700\u8981\u6dfb\u52a0\u5185\u5bb9\u7684\u4fe1\u606f\u548c\u793a\u4f8b\u3002 16.1.2.1 \u63d2\u4ef6\u5143\u6570\u636e \u2693\ufe0e \u9996\u5148\uff0c\u63d2\u4ef6\u7ba1\u7406\u5668\u9700\u8981\u68c0\u7d22\u6709\u5173\u63d2\u4ef6\u7684\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\uff0c\u4f8b\u5982\u5176\u540d\u79f0\u3001\u63cf\u8ff0\u7b49\u3002\u6587\u4ef6 metadata.txt \u5b58\u50a8\u6b64\u4fe1\u606f\u3002 \u63d0\u793a \u6240\u6709\u5143\u6570\u636e\u5fc5\u987b\u91c7\u7528UTF-8\u7f16\u7801\u3002 \u5143\u6570\u636e\u540d\u79f0 \u662f\u5426\u5fc5\u9700 \u63cf\u8ff0 name \u662f \u63d2\u4ef6\u540d\u79f0\uff0c\u77ed\u5b57\u7b26\u4e32 qgisMinimumVersion \u662f \u6700\u5c0fQGIS\u7248\u672c qgisMaximumVersion \u5426 \u6700\u5927QGIS\u7248\u672c description \u662f \u63cf\u8ff0\u63d2\u4ef6\u7684\u7b80\u77ed\u6587\u672c\uff0c\u4e0d\u652f\u6301HTML about \u662f \u8f83\u957f\u7684\u6587\u672c\uff0c\u8be6\u7ec6\u63cf\u8ff0\u63d2\u4ef6\uff0c\u4e0d\u652f\u6301HTML version \u662f \u7248\u672c author \u662f \u4f5c\u8005\u59d3\u540d email \u662f \u4f5c\u8005\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u5728\u7f51\u7ad9\u4e0a\u4ec5\u663e\u793a\u7ed9\u767b\u5f55\u7684\u7528\u6237\uff0c\u4f46\u5728\u63d2\u4ef6\u5b89\u88c5\u540e\u53ef\u5728\u63d2\u4ef6\u7ba1\u7406\u5668\u4e2d\u770b\u5230 changelog \u5426 \u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u662f\u591a\u884c\uff0c\u4e0d\u652f\u6301HTML experimental \u5426 \u5b9e\u9a8c\u6027\uff0c\u5e03\u5c14\u503c\uff0cTrue\u6216False deprecated \u5426 \u5f03\u7528\uff0cboolean\u503c\uff0cTrue\u6216False\uff0c\u9002\u7528\u4e8e\u6574\u4e2a\u63d2\u4ef6\uff0c\u800c\u4e0d\u4ec5\u4ec5\u9002\u7528\u4e8e\u4e0a\u4f20\u7684\u7248\u672c tags \u5426 \u4ee5\u9017\u53f7\u5206\u9694\u7684\u5217\u8868\uff0c\u5141\u8bb8\u5728\u5355\u4e2a\u6807\u8bb0\u5185\u4f7f\u7528\u7a7a\u683c homepage \u5426 \u6307\u5411\u63d2\u4ef6\u4e3b\u9875\u7684\u6709\u6548\u7f51\u5740 repository \u662f \u6e90\u4ee3\u7801\u5b58\u50a8\u5e93\u7684\u6709\u6548URL tracker \u5426 \u6545\u969c\u548c\u9519\u8bef\u62a5\u544a\u7684\u6709\u6548URL icon \u5426 \u5bf9\u4e8eweb\u53cb\u597d\u7684\u56fe\u50cf\uff08PNG\uff0cJPEG\uff09\u6587\u4ef6\u540d\u6216\u76f8\u5bf9\u8def\u5f84\uff08\u76f8\u5bf9\u4e8e\u63d2\u4ef6\u538b\u7f29\u5305\u7684\u6587\u4ef6\u5939\uff09 category \u5426 Raster, Vector, Database and Web\uff08\u6805\u683c\u3001\u77e2\u91cf\u3001\u6570\u636e\u5e93\u548c\u7f51\u7edc\uff09 plugin_dependencies \u5426 \u7c7b\u4f3c\u4e8ePIP\u7684\u9017\u53f7\u5206\u9694\u7684\u5176\u4ed6\u63d2\u4ef6\u5217\u8868 server \u5426 \u5e03\u5c14\u503c\uff0cTrue\u6216False\uff0c\u786e\u5b9a\u63d2\u4ef6\u662f\u5426\u5177\u6709\u670d\u52a1\u5668\u63a5\u53e3 hasProcessingProvider \u5426 \u5e03\u5c14\u503c\uff0cTrue\u6216False\uff0c\u786e\u5b9a\u63d2\u4ef6\u662f\u5426\u63d0\u4f9b\u5904\u7406\u7b97\u6cd5 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u63d2\u4ef6\u653e\u5728**Plugins**\u83dc\u5355\u4e2d\uff08\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u770b\u5230\u5982\u4f55\u4e3a\u63d2\u4ef6\u6dfb\u52a0\u83dc\u5355\u9879\uff09\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5165**Raster**\uff0c Vector \uff0c **Database**\u548c**Web**\u83dc\u5355\u4e2d\u3002 \u8f93\u5165\u6307\u5b9a\u7684\u201ccategory\u201d\u5143\u6570\u636e\uff0c\u53ef\u4ee5\u76f8\u5e94\u5730\u5bf9\u63d2\u4ef6\u8fdb\u884c\u5206\u7c7b\u3002\u6b64\u5143\u6570\u636e\u7528\u4e8e\u63d0\u793a\u7528\u6237\uff0c\u5e76\u544a\u8bc9\u4ed6\u4eec\u53ef\u4ee5\u5728\u54ea\u91cc\uff08\u5728\u54ea\u4e2a\u83dc\u5355\u4e2d\uff09\u627e\u5230\u8be5\u63d2\u4ef6\u3002\u201ccategory\u201d\u7684\u5141\u8bb8\u503c\u4e3a\uff1aVector, Raster, Database\u6216\u8005Web\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684\u63d2\u4ef6\u53ef\u4ee5\u4eceRaster\u83dc\u5355\u4e2d\u627e\u5230\uff0c\u8bf7\u5c06\u5176\u6dfb\u52a0\u5230 metadata.txt \u4e2d 1 category = Raster \u63d0\u793a \u5982\u679cqgisMaximumVersion\u4e3a\u7a7a\uff0c\u5219\u5728\u4e0a\u4f20\u5230 \u5b98\u65b9Python\u63d2\u4ef6\u5e93 \u65f6\uff0c\u5b83\u5c06\u81ea\u52a8\u8bbe\u7f6e\u4e3a\u4e3b\u8981\u7248\u672c\u52a0\u4e0a.99\uff08\u4f8b\u5982\uff1a3.99\uff09\u3002 metadata.txt\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 ; \u4ee5\u4e0b\u662f\u5f3a\u5236\u6027\u7684 [general] name = HelloWorld email = me@example.com author = Just Me qgisMinimumVersion = 3.0 description = This is an example plugin for greeting the world.\\ Multiline is allowed:\\ lines starting with spaces belong to the same\\ field, in this case to the \"description\" field.\\ HTML formatting is not allowed. about = This paragraph can contain a detailed description\\ of the plugin. Multiline is allowed, HTML is not. version = version 1.2 tracker = http://bugs.itopen.it repository = http://www.itopen.it/repo ; \u7ed3\u675f\u5f3a\u5236 ; \u4ee5\u4e0b\u662f\u53ef\u9009\u7684 category = Raster changelog = The changelog lists the plugin versions\\ and their changes as in the example below:\\ 1.0 - First stable release\\ 0.9 - All features implemented\\ 0.8 - First testing release ; \u6807\u7b7e\u91c7\u7528\u9017\u53f7\u5206\u9694\uff0c\u6807\u7b7e\u540d\u79f0\u5141\u8bb8\u4f7f\u7528\u7a7a\u683c ; \u6807\u7b7e\u5e94\u8be5\u662f\u82f1\u6587\u7684\uff0c\u5728\u521b\u5efa\u4e4b\u524d\u8bf7\u68c0\u67e5\u73b0\u6709\u6807\u7b7e\u548c\u540c\u4e49\u8bcd tags = wkt,raster,hello world ; \u8fd9\u4e9b\u5143\u6570\u636e\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u6700\u7ec8\u5c06\u6210\u4e3a\u5f3a\u5236\u6027\u7684\u3002 homepage = https://www.itopen.it icon = icon.png ; \u5b9e\u9a8c\u6807\u5fd7\uff08\u9002\u7528\u4e8e\u5355\u4e00\u7248\u672c\uff09 experimental = True ; \u5f03\u7528\u6807\u5fd7 \uff08\u9002\u7528\u4e8e\u6574\u4e2a\u63d2\u4ef6\uff0c\u4e0d\u4ec5\u9002\u7528\u4e8e\u4e0a\u4f20\u7684\u7248\u672c\uff09 deprecated = False ; \u5982\u679c\u4e3a\u7a7a\uff0c\u5b83\u5c06\u81ea\u52a8\u8bbe\u7f6e\u4e3a\u4e3b\u8981\u7248\u672c+.99 qgisMaximumVersion = 3.99 ; \u4ece QGIS 3.8\u5f00\u59cb\uff0c\u53ef\u4ee5\u6307\u5b9a\u4ee5\u9017\u53f7\u5206\u9694\u6307\u5b9a\u8981\u5b89\u88c5\uff08\u6216\u66f4\u65b0\uff09\u7684\u63d2\u4ef6\u5217\u8868 ; \u4e0b\u9762\u793a\u4f8b\u5b89\u88c5\u6216\u66f4\u65b0\u7248\u672c1.12\u7684\u201cMyOtherPlugin\u201d\u548c\u4efb\u4f55\u7248\u672c\u7684\u201cYetAnotherPlugin\u201d plugin_dependencies = MyOtherPlugin==1.12,YetAnotherPlugin 16.1.2.2 __init__.py \u2693\ufe0e Python\u5305\u9700\u8981\u6b64\u6587\u4ef6\u3002\u6b64\u5916\uff0cQGIS\u8981\u6c42\u6b64\u6587\u4ef6\u5305\u542b\u4e00\u4e2a classFactory() \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5728\u63d2\u4ef6\u88ab\u52a0\u8f7d\u5230QGIS\u65f6\u8c03\u7528\u3002\u5b83\u63a5\u6536 QgisInterface \u5b9e\u4f8b\uff0c \u5e76\u4e14\u5fc5\u987b\u8fd4\u56de mainplugin.py \u4e2d\u63d2\u4ef6\u7c7b\u7684\u5bf9\u8c61\u2014\u2014\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u5b83\u88ab\u547d\u540d\u4e3a TestPlugin \uff08\u89c1\u4e0b\u6587\uff09\u3002 __init__.py \u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 4 5 def classFactory ( iface ): from .mainPlugin import TestPlugin return TestPlugin ( iface ) # \u4efb\u4f55\u5176\u4ed6\u521d\u59cb\u5316 16.1.2.3 mainPlugin.py \u2693\ufe0e \u8fd9\u5c31\u662f\u9b54\u6cd5\u53d1\u751f\u7684\u5730\u65b9\uff0c\u4e0b\u9762\u5c31\u662f\u9b54\u6cd5\u7684\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 from qgis.PyQt.QtGui import * from qgis.PyQt.QtWidgets import * # \u4ece\u6587\u4ef6resources.py\u521d\u59cb\u5316Qt\u7684\u8d44\u6e90 from . import resources class TestPlugin : def __init__ ( self , iface ): # \u4fdd\u5b58QGIS interface\u5f15\u7528 self . iface = iface def initGui ( self ): # \u521b\u5efa\u64cd\u4f5c\uff0c\u5b83\u5c06\u542f\u52a8\u63d2\u4ef6\u914d\u7f6e self . action = QAction ( QIcon ( \":/plugins/testplug/icon.png\" ), \"Test plugin\" , self . iface . mainWindow ()) self . action . setObjectName ( \"testAction\" ) self . action . setWhatsThis ( \"Configuration for test plugin\" ) self . action . setStatusTip ( \"This is status tip\" ) self . action . triggered . connect ( self . run ) # \u6dfb\u52a0\u5de5\u5177\u680f\u6309\u94ae\u548c\u83dc\u5355\u9879 self . iface . addToolBarIcon ( self . action ) self . iface . addPluginToMenu ( \"&Test plugins\" , self . action ) # \u8fde\u63a5\u4fe1\u53f7renderComplete\u2014\u2014\u753b\u5e03\u6e32\u67d3\u5b8c\u6210\u540e\u53d1\u9001\u7684\u4fe1\u53f7 self . iface . mapCanvas () . renderComplete . connect ( self . renderTest ) def unload ( self ): # \u5220\u9664\u63d2\u4ef6\u83dc\u5355\u9879\u548c\u56fe\u6807 self . iface . removePluginMenu ( \"&Test plugins\" , self . action ) self . iface . removeToolBarIcon ( self . action ) # \u65ad\u5f00\u4fe1\u53f7 self . iface . mapCanvas () . renderComplete . disconnect ( self . renderTest ) def run ( self ): # \u521b\u5efa\u5e76\u663e\u793a\u4e00\u4e2a\u914d\u7f6e\u5bf9\u8bdd\u6846\u6216\u7c7b\u4f3c\u7684\u4e8b\u60c5 print ( \"TestPlugin: run called!\" ) def renderTest ( self , painter ): # \u4f7f\u7528painter\u7ed8\u5236\u5730\u56fe\u753b\u5e03 print ( \"TestPlugin: renderTest called!\" ) \u4e3b\u63d2\u4ef6\u6e90\u6587\u4ef6\u4e2d\uff08\u4f8b\u5982 mainPlugin.py \uff09\u5fc5\u987b\u5b58\u5728\u7684\u63d2\u4ef6\u51fd\u6570\u662f\uff1a __init__ - >\u53ef\u4ee5\u8bbf\u95eeQGIS\u754c\u9762 initGui() - >\u52a0\u8f7d\u63d2\u4ef6\u65f6\u8c03\u7528 unload() - >\u5378\u8f7d\u63d2\u4ef6\u65f6\u8c03\u7528 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c addPluginToMenu() \u88ab\u4f7f\u7528\u3002\u8fd9\u4f1a\u5c06\u76f8\u5e94\u7684\u83dc\u5355\u64cd\u4f5c\u6dfb\u52a0\u5230**Plugins** \u83dc\u5355\u4e2d\u3002\u5b58\u5728\u989d\u5916\u7684\u65b9\u6cd5\u5c06\u64cd\u4f5c\uff08action\uff09\u6dfb\u52a0\u5230\u4e0d\u540c\u83dc\u5355\u3002\u4ee5\u4e0b\u662f\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5217\u8868\uff1a addPluginToRasterMenu() addPluginToVectorMenu() addPluginToDatabaseMenu() addPluginToWebMenu() \u5b83\u4eec\u90fd\u5177\u6709\u4e0e addPluginToMenu() \u65b9\u6cd5\u76f8\u540c\u7684\u8bed\u6cd5 \u3002 \u5efa\u8bae\u5c06\u63d2\u4ef6\u83dc\u5355\u6dfb\u52a0\u5230\u5176\u4e2d\u4e00\u4e2a\u9884\u5b9a\u4e49\u65b9\u6cd5\uff0c\u4ee5\u4fdd\u6301\u63d2\u4ef6\u6761\u76ee\u7ec4\u7ec7\u65b9\u5f0f\u7684\u4e00\u81f4\u6027\u3002\u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u5c06\u81ea\u5b9a\u4e49\u83dc\u5355\u7ec4\u76f4\u63a5\u6dfb\u52a0\u5230\u83dc\u5355\u680f\uff0c\u5982\u4e0b\u9762\u793a\u4f8b\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def initGui ( self ): self . menu = QMenu ( self . iface . mainWindow ()) self . menu . setObjectName ( \"testMenu\" ) self . menu . setTitle ( \"MyMenu\" ) self . action = QAction ( QIcon ( \":/plugins/testplug/icon.png\" ), \"Test plugin\" , self . iface . mainWindow ()) self . action . setObjectName ( \"testAction\" ) self . action . setWhatsThis ( \"Configuration for test plugin\" ) self . action . setStatusTip ( \"This is status tip\" ) self . action . triggered . connect ( self . run ) self . menu . addAction ( self . action ) menuBar = self . iface . mainWindow () . menuBar () menuBar . insertMenu ( self . iface . firstRightStandardMenu () . menuAction (), self . menu ) def unload ( self ): self . menu . deleteLater () \u4e0d\u8981\u5fd8\u8bb0\u8bbe\u7f6e QAction \u548c QMenu objectName \u63d2\u4ef6\u7684\u7279\u5b9a\u540d\u79f0\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u81ea\u5b9a\u4e49\u3002 16.1.2.4 \u8d44\u6e90\u6587\u4ef6 \u2693\ufe0e \u4f60\u53ef\u4ee5\u770b\u5230\u5728 initGui() \u4e2d\u6211\u4eec\u4f7f\u7528\u4e86\u8d44\u6e90\u6587\u4ef6\u4e2d\u7684\u56fe\u6807\uff08\u5728\u6211\u4eec\u7684\u6848\u4f8b\u4e2d\u662f resources.qrc \uff09 1 2 3 4 5 <RCC> <qresource prefix= \"/plugins/testplug\" > <file> icon.png </file> </qresource> </RCC> \u6700\u597d\u4f7f\u7528\u4e0d\u4f1a\u4e0e\u5176\u4ed6\u63d2\u4ef6\u6216QGIS\u7684\u4efb\u4f55\u90e8\u5206\u53d1\u751f\u51b2\u7a81\u7684\u524d\u7f00\uff0c\u5426\u5219\u4f60\u53ef\u80fd\u4f1a\u5f97\u5230\u4f60\u4e0d\u60f3\u8981\u7684\u8d44\u6e90\u3002\u73b0\u5728\u4f60\u53ea\u9700\u8981\u751f\u6210\u4e00\u4e2a\u5305\u542b\u8d44\u6e90\u7684Python\u6587\u4ef6\u3002\u5b83\u662f\u7528**pyrcc5**\u547d\u4ee4\u5b8c\u6210\u7684\uff1a 1 pyrcc5 -o resources.py resources.qrc \u63d0\u793a \u5728Windows\u73af\u5883\u4e2d\uff0c\u5c1d\u8bd5\u4eceCMD\u6216Powershell\u8fd0\u884cpyrcc5\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u201cWindows\u65e0\u6cd5\u8bbf\u95ee\u6307\u5b9a\u7684\u8bbe\u5907\uff0c\u8def\u5f84\uff0c\u6216\u6587\u4ef6[...]\u201d\u3002\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u53ef\u80fd\u662f\u4f7f\u7528osgeo4wshell\uff0c\u4f46\u5982\u679c\u4f60\u613f\u610f\u4fee\u6539PATH\u73af\u5883\u53d8\u91cf\u6216\u663e\u5f0f\u6307\u5b9a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u5728 <Your QGIS Install Directory>\\bin\\pyrcc5.exe \u627e\u5230\u5b83 \u5c31\u8fd9\u4e9b\u2026\u2026\u6ca1\u4ec0\u4e48\u590d\u6742\u7684:) \u5982\u679c\u4f60\u5df2\u6b63\u786e\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\u5219\u5e94\u8be5\u80fd\u591f\u5728\u63d2\u4ef6\u7ba1\u7406\u5668\u4e2d\u67e5\u627e\u5e76\u52a0\u8f7d\u63d2\u4ef6\uff0c\u5728\u70b9\u51fb\u5de5\u5177\u680f\u56fe\u6807\u6216\u76f8\u5e94\u7684\u83dc\u5355\u9879\u65f6\uff0c\u53ef\u4ee5\u5728\u63a7\u5236\u53f0\u4e2d\u67e5\u770b\u5230\u6d88\u606f\u3002 \u5728\u5904\u7406\u771f\u6b63\u7684\u63d2\u4ef6\u65f6\uff0c\u6700\u597d\u5c06\u63d2\u4ef6\u5199\u5165\u53e6\u4e00\u4e2a\uff08\u5de5\u4f5c\uff09\u76ee\u5f55\u5e76\u521b\u5efa\u4e00\u4e2amakefile\uff0c\u5b83\u5c06\u751f\u6210UI\u548c\u8d44\u6e90\u6587\u4ef6\u5e76\u5c06\u63d2\u4ef6\u5b89\u88c5\u5230QGIS\u5b89\u88c5\u4e2d\u3002 16.1.3 \u6587\u6863 \u2693\ufe0e \u8be5\u63d2\u4ef6\u7684\u6587\u6863\u53ef\u4ee5\u7f16\u5199\u4e3aHTML\u5e2e\u52a9\u6587\u6863\u3002 qgis.utils \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c showPluginHelp() \u5c06\u6253\u5f00\u5e2e\u52a9\u6587\u6863\u6d4f\u89c8\u5668\uff0c\u4e0e\u5176\u4ed6QGIS\u5e2e\u52a9\u6587\u6863\u7684\u65b9\u5f0f\u76f8\u540c\u3002 showPluginHelp() \u51fd\u6570\u5728\u4e0e\u8c03\u7528\u6a21\u5757\u76f8\u540c\u7684\u76ee\u5f55\u4e2d\u67e5\u627e\u5e2e\u52a9\u6587\u6863\u3002\u5b83\u4f1a\u5bfb\u627e index-ll_cc.html \uff0c index-ll.html \uff0c index-en.html \uff0c index-en_us.html \u548c index.html \uff0c\u663e\u793a\u5b83\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u6587\u6863\u3002\u8fd9 ll_cc \u662fQGIS\u8bed\u8a00\u73af\u5883\uff0c\u8fd9\u5141\u8bb8\u6587\u6863\u6709\u591a\u4e2a\u7ffb\u8bd1\u3002 showPluginHelp() \u51fd\u6570\u8fd8\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 packageName \u2014\u2014\u5b83\u663e\u793a\u6307\u5b9a\u63d2\u4ef6\u7684\u5e2e\u52a9\u6587\u6863\uff0c filename \u2014\u2014\u53ef\u4ee5\u66ff\u6362\u88ab\u641c\u7d22\u7684\u6587\u4ef6\u540d\u4e2d\u7684\u201cindex\u201d\uff0csection\u2014\u2014\u5b83\u662fhtml\u951a\u6807\u8bb0\u7684\u540d\u79f0\uff0c\u6d4f\u89c8\u5668\u5c06\u5b9a\u4f4d\u5230\u8be5\u4f4d\u7f6e\u3002 16.1.4 \u7ffb\u8bd1 \u2693\ufe0e \u901a\u8fc7\u51e0\u4e2a\u6b65\u9aa4\uff0c\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u63d2\u4ef6\u672c\u5730\u5316\u7684\u73af\u5883\uff0c\u4ee5\u4fbf\u6839\u636e\u8ba1\u7b97\u673a\u7684\u533a\u57df\uff0c\u63d2\u4ef6\u5c06\u4ee5\u4e0d\u540c\u8bed\u8a00\u52a0\u8f7d\u3002 16.1.4.1 \u8f6f\u4ef6\u8981\u6c42 \u2693\ufe0e \u521b\u5efa\u548c\u7ba1\u7406\u6240\u6709\u7ffb\u8bd1\u6587\u4ef6\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u5b89\u88c5 Qt Linguist \u3002\u5728\u57fa\u4e8eDebian\u7684GNU / Linux\u73af\u5883\u4e2d\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u5b89\u88c5\u5b83\uff1a 1 sudo apt-get install qttools5-dev-tools 16.1.4.2 \u6587\u4ef6\u548c\u76ee\u5f55 \u2693\ufe0e \u521b\u5efa\u63d2\u4ef6\u65f6\uff0c\u4f60\u5c06\u5728\u4e3b\u63d2\u4ef6\u76ee\u5f55\u4e2d\u627e\u5230\u8be5\u6587\u4ef6\u5939 i18n \u3002 \u6240\u6709\u7ffb\u8bd1\u6587\u4ef6\u90fd\u5fc5\u987b\u653e\u5728\u6b64\u76ee\u5f55\u4e2d\u3002 16.1.4.2.1 .pro\u6587\u4ef6 \u2693\ufe0e \u9996\u5148\uff0c\u4f60\u5e94\u8be5\u521b\u5efa\u4e00\u4e2a .pro \u6587\u4ef6\uff0c\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u7531**Qt Linguist**\u7ba1\u7406\u7684*\u9879\u76ee*\u6587\u4ef6\u3002 \u5728\u6b64 .pro \u6587\u4ef6\u4e2d\uff0c\u4f60\u5fc5\u987b\u6307\u5b9a\u8981\u7ffb\u8bd1\u7684\u6240\u6709\u6587\u4ef6\u548c\u7a97\u4f53\uff08.ui\u6587\u4ef6\uff09\u3002\u6b64\u6587\u4ef6\u7528\u4e8e\u8bbe\u7f6e\u672c\u5730\u5316\u6587\u4ef6\u548c\u53d8\u91cf\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u9879\u76ee\u6587\u4ef6\uff0c\u5339\u914d\u6211\u4eec\u7684 \u793a\u4f8b\u63d2\u4ef6 \u7684\u7ed3\u6784 \uff1a 1 2 3 FORMS = ../form.ui SOURCES = ../your_plugin.py TRANSLATIONS = your_plugin_it.ts \u4f60\u7684\u63d2\u4ef6\u53ef\u80fd\u6709\u66f4\u590d\u6742\u7684\u7ed3\u6784\uff0c\u5e76\u4e14\u53ef\u80fd\u5206\u5e03\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u3002\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u4f7f\u7528 pylupdate5 \u8bfb\u53d6 .pro \u6587\u4ef6\u5e76\u66f4\u65b0\u53ef\u7ffb\u8bd1\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e0d\u4f1a\u6269\u5c55\u901a\u914d\u7b26\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u5c06\u6bcf\u4e2a\u6587\u4ef6\u663e\u5f0f\u653e\u5728 .pro \u6587\u4ef6\u4e2d\u3002\u4f60\u7684\u9879\u76ee\u6587\u4ef6\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a 1 2 3 4 FORMS = ../ui/about.ui ../ui/feedback.ui \\ ../ui/main_dialog.ui SOURCES = ../your_plugin.py ../computation.py \\ ../utils.py \u6b64\u5916\uff0c your_plugin.py \u6587\u4ef6\u662f*\u8c03\u7528* QGIS\u5de5\u5177\u680f\u4e2d\u63d2\u4ef6\u7684\u6240\u6709\u83dc\u5355\u548c\u5b50\u83dc\u5355\u7684\u6587\u4ef6\uff0c\u4f60\u5e0c\u671b\u5c06\u5b83\u4eec\u5168\u90e8\u7ffb\u8bd1\u3002 \u6700\u540e\uff0c\u4f7f\u7528*TRANSLATIONS*\u53d8\u91cf\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u6240\u9700\u7684\u7ffb\u8bd1\u8bed\u8a00\u3002 \u8b66\u544a \u786e\u4fdd ts \u6587\u4ef6\u540d\u79f0\u4e3a your_plugin_ + language + .ts \uff0c\u5426\u5219\u8bed\u8a00\u5c06\u52a0\u8f7d\u5931\u8d25\u3002\u4f7f\u7528\u4e24\u4e2a\u5b57\u6bcd\u7684\u8bed\u8a00\u7f29\u5199\uff08it\u5bf9\u5e94Italian\uff0cde\u5bf9\u5e94German\uff0c\u7b49\u7b49\uff09 16.1.4.2.2 .ts\u6587\u4ef6 \u2693\ufe0e \u521b\u5efa .pro \u5b8c\u6210\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u4e3a\u63d2\u4ef6\u7684\u8bed\u8a00\u751f\u6210 .ts \u6587\u4ef6\u4e86\u3002 \u6253\u5f00\u7ec8\u7aef\uff0c\u8f6c\u5230 your_plugin/i18n \u76ee\u5f55\u5e76\u8f93\u5165\uff1a 1 pylupdate5 your_plugin.pro \u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u5230 your_plugin_language.ts \u6587\u4ef6\u3002 \u7528**Qt Linguist**\u6253\u5f00 .ts \u6587\u4ef6\u5e76\u5f00\u59cb\u7ffb\u8bd1\u3002 16.1.4.2.3 .qm\u6587\u4ef6 \u2693\ufe0e \u5f53\u4f60\u5b8c\u6210\u63d2\u4ef6\u7ffb\u8bd1\u65f6\uff08\u5982\u679c\u67d0\u4e9b\u5b57\u7b26\u4e32\u672a\u5b8c\u6210\uff0c\u5c06\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u7684\u6e90\u8bed\u8a00\uff09\uff0c\u4f60\u5fc5\u987b\u521b\u5efa .qm \u6587\u4ef6\uff08\u5c06\u88abQGIS\u4f7f\u7528\u7684 .ts \u7f16\u8bd1\u6587\u4ef6\uff09\u3002 \u53ea\u9700\u5728 your_plugin/i18n \u76ee\u5f55\u4e2d\u6253\u5f00\u7ec8\u7aefcd \u5e76\u8f93\u5165\uff1a 1 lrelease your_plugin.ts \u73b0\u5728\uff0c\u5728 i18n \u76ee\u5f55\u4e2d\u4f60\u5c06\u770b\u5230 your_plugin.qm \u6587\u4ef6\u3002 16.1.4.3 \u4f7f\u7528MakeFile\u8fdb\u884c\u7ffb\u8bd1 \u2693\ufe0e \u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528Plugin Builder\u521b\u5efa\u4e86\u63d2\u4ef6\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528makefile\u4ecepython\u4ee3\u7801\u548cQt\u5bf9\u8bdd\u6846\u4e2d\u63d0\u53d6\u6d88\u606f\u3002\u5728Makefile\u7684\u5f00\u5934\u6709\u4e00\u4e2aLOCALES\u53d8\u91cf\uff1a 1 LOCALES = en \u5c06\u8be5\u8bed\u8a00\u7684\u7f29\u5199\u6dfb\u52a0\u5230\u6b64\u53d8\u91cf\u4e2d\uff0c\u4f8b\u5982\u5308\u7259\u5229\u8bed\uff1a 1 LOCALES = en hu \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4ece\u6e90\u751f\u6210\u6216\u66f4\u65b0 hu.ts \u6587\u4ef6\uff08\u4ee5\u53ca\u5176\u4e2d\u7684 en.ts \uff09\uff1a 1 make transup \u5728\u6b64\u4e4b\u540e\uff0c\u4f60\u5df2\u5728LOCALES\u53d8\u91cf\u4e2d\u66f4\u65b0 .ts \u4e86\u6240\u6709\u8bed\u8a00\u7684\u6587\u4ef6\u3002\u4f7f\u7528**Qt Linguist**\u7ffb\u8bd1\u7a0b\u5e8f\u6d88\u606f\u3002\u5b8c\u6210\u7ffb\u8bd1\u540e\uff0c .qm \u53ef\u4ee5\u901a\u8fc7 transcompile \u521b\u5efa\uff1a 1 make transcompile \u4f60\u5fc5\u987b\u5728\u4f60\u7684\u63d2\u4ef6\u4e2d\u5206\u53d1 .ts \u6587\u4ef6\u3002 16.1.4.4 \u52a0\u8f7d\u63d2\u4ef6 \u2693\ufe0e \u8981\u67e5\u770b\u63d2\u4ef6\u7684\u7ffb\u8bd1\uff0c\u53ea\u9700\u6253\u5f00QGIS\uff0c\u66f4\u6539\u8bed\u8a00\uff08 \u8bbe\u7f6e\u2023\u9009\u9879\u2023\u901a\u7528 \uff09\u5e76\u91cd\u65b0\u542f\u52a8QGIS\u3002 \u4f60\u5e94\u8be5\u770b\u5230\u4f60\u7684\u63d2\u4ef6\u4f7f\u7528\u6b63\u786e\u7684\u8bed\u8a00\u3002 \u8b66\u544a \u5982\u679c\u4f60\u6539\u53d8\u4e86\u4e00\u4e9b\u4e1c\u897f\uff08\u65b0\u7684UI\uff0c\u65b0\u7684\u83dc\u5355\uff0c\u7b49\u7b49\uff09\uff0c\u4f60\u5fc5\u987b\u91cd\u65b0\u751f\u6210 .ts \u548c .qm \u6587\u4ef6\uff0c\u56e0\u6b64\u9700\u8981\u518d\u4e00\u6b21\u6267\u884c\u4ee5\u4e0a\u547d\u4ee4\u3002 16.1.5 \u63d0\u793a\u548c\u6280\u5de7 \u2693\ufe0e 16.1.5.1 \u63d2\u4ef6\u91cd\u8f7d \u2693\ufe0e \u5728\u5f00\u53d1\u63d2\u4ef6\u671f\u95f4\uff0c\u4f60\u7ecf\u5e38\u9700\u8981\u5728QGIS\u4e2d\u91cd\u65b0\u52a0\u8f7d\u5b83\u4ee5\u8fdb\u884c\u6d4b\u8bd5\u3002\u4f7f\u7528**Plugin Reloader**\u63d2\u4ef6\u975e\u5e38\u5bb9\u6613\u3002\u4f60\u53ef\u4ee5\u5728 \u63d2\u4ef6\u7ba1\u7406\u5668 \u4e2d\u627e\u5230\u5b83\u3002 16.1.5.2 \u8bbf\u95ee\u63d2\u4ef6 \u2693\ufe0e \u4f60\u53ef\u4ee5\u4f7f\u7528python\u4eceQGIS\u4e2d\u8bbf\u95ee\u6240\u6709\u5df2\u5b89\u88c5\u63d2\u4ef6\u7c7b\uff0c\u8fd9\u53ef\u4ee5\u65b9\u4fbf\u8c03\u8bd5\uff1a 1 my_plugin = qgis . utils . plugins [ 'My Plugin' ] 16.1.5.3 \u65e5\u5fd7\u6d88\u606f \u2693\ufe0e \u63d2\u4ef6\u5728 \u65e5\u5fd7\u6d88\u606f\u9762\u677f\u4e2d \u6709\u81ea\u5df1\u7684\u9009\u9879\u5361\u3002 16.1.5.4 \u5206\u4eab\u4f60\u7684\u63d2\u4ef6 \u2693\ufe0e QGIS\u5728\u63d2\u4ef6\u4ed3\u5e93\u4e2d\u6258\u7ba1\u4e86\u6570\u767e\u4e2a\u63d2\u4ef6\u3002\u8003\u8651\u5206\u4eab\u4f60\u7684\u63d2\u4ef6\uff01\u5b83\u5c06\u6269\u5c55QGIS\uff0c\u4eba\u4eec\u5c06\u80fd\u591f\u4ece\u4f60\u7684\u4ee3\u7801\u4e2d\u5b66\u4e60\u3002\u53ef\u4ee5\u4f7f\u7528\u63d2\u4ef6\u7ba1\u7406\u5668\u5728QGIS\u4e2d\u627e\u5230\u5e76\u5b89\u88c5\u6240\u6709\u6258\u7ba1\u7684\u63d2\u4ef6\u3002 \u4fe1\u606f\u548c\u8981\u6c42\uff1a plugins.qgis.org \u3002 16.2 \u4ee3\u7801\u7247\u6bb5 \u2693\ufe0e \u672c\u8282\u4ee5\u4ee3\u7801\u7247\u6bb5\u4e3a\u4f8b\uff0c\u8bb2\u89e3\u63d2\u4ef6\u5f00\u53d1 16.2.1 \u5982\u4f55\u901a\u8fc7\u5feb\u6377\u952e\u8c03\u7528\u65b9\u6cd5 \u2693\ufe0e \u5728 initGui() \u4e2d\u6dfb\u52a0\uff1a 1 2 3 4 self . key_action = QAction ( \"Test Plugin\" , self . iface . mainWindow ()) self . iface . registerMainWindowAction ( self . key_action , \"Ctrl+I\" ) # \u64cd\u4f5c\u88abCtrl+I\u89e6\u53d1 self . iface . addPluginToMenu ( \"&Test plugins\" , self . key_action ) self . key_action . triggered . connect ( self . key_action_triggered ) \u5728 unload() \u4e2d\u6dfb\u52a0\uff1a 1 self . iface . unregisterMainWindowAction ( self . keyAction ) \u6309\u4e0b CTRL+I \u65f6\u8c03\u7528\u65b9\u6cd5\uff1a 1 2 def key_action_triggered ( self ): QMessageBox . information ( self . iface . mainWindow (), \"Ok\" , \"You pressed Ctrl+I\" ) 16.2.2 \u5982\u4f55\u5207\u6362\u56fe\u5c42 \u2693\ufe0e \u56fe\u4f8b\u4e2d\u6709\u4e00\u4e2a\u8bbf\u95ee\u56fe\u5c42\u7684API\u3002\u4e0b\u9762\u662f\u5982\u4f55\u5207\u6362\u5f53\u524d\u56fe\u5c42\u53ef\u89c1\u6027\u7684\u793a\u4f8b\uff1a 1 2 3 4 root = QgsProject . instance () . layerTreeRoot () node = root . findLayer ( iface . activeLayer () . id ()) new_state = Qt . Checked if node . isVisible () == Qt . Unchecked else Qt . Unchecked node . setItemVisibilityChecked ( new_state ) 16.2.3 \u5982\u4f55\u8bbf\u95ee\u6240\u9009\u8981\u7d20\u7684\u5c5e\u6027\u8868 \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def change_value ( value ): \"\"\"\u6539\u53d8\u6240\u9009\u8981\u7d20\u7b2c\u4e8c\u5b57\u6bb5\u503c :param value: The new value. \"\"\" layer = iface . activeLayer () if layer : count_selected = layer . selectedFeatureCount () if count_selected > 0 : layer . startEditing () id_features = layer . selectedFeatureIds () for i in id_features : layer . changeAttributeValue ( i , 1 , value ) # 1 being the second column layer . commitChanges () else : iface . messageBar () . pushCritical ( \"Error\" , \"Please select at least one feature from current layer\" ) else : iface . messageBar () . pushCritical ( \"Error\" , \"Please select a layer\" ) # \u8be5\u65b9\u6cd5\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff08\u6240\u9009\u8981\u7d20\u7b2c\u4e8c\u4e2a\u5b57\u6bb5\u7684\u65b0\u503c\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff1a changeValue ( 50 ) 16.2.4 \u9009\u9879\u5bf9\u8bdd\u6846\u4e2d\u7684\u63d2\u4ef6\u63a5\u53e3 \u2693\ufe0e \u4f60\u53ef\u4ee5\u5728**\u8bbe\u7f6e\u2023\u9009\u9879**\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u63d2\u4ef6\u9009\u9879\u6807\u7b7e\u3002\u8fd9\u6bd4\u4e3a\u4f60\u7684\u63d2\u4ef6\u9009\u9879\u6dfb\u52a0\u4e00\u4e2a\u7279\u5b9a\u7684\u4e3b\u83dc\u5355\u6761\u76ee\u66f4\u53ef\u53d6\uff0c\u56e0\u4e3a\u5b83\u5c06\u6240\u6709\u7684QGIS\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u548c\u63d2\u4ef6\u8bbe\u7f6e\u4fdd\u5b58\u5728\u4e00\u4e2a\u5355\u4e00\u7684\u5730\u65b9\uff0c\u4fbf\u4e8e\u7528\u6237\u53d1\u73b0\u548c\u5bfc\u822a\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5c06\u4e3a\u63d2\u4ef6\u7684\u8bbe\u7f6e\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u7a7a\u767d\u9009\u9879\u5361\uff0c\u4e3a\u4f60\u586b\u5145\u6240\u6709\u9009\u9879\u548c\u4f60\u7684\u63d2\u4ef6\u7279\u5b9a\u8bbe\u7f6e\u505a\u597d\u51c6\u5907\u3002\u4f60\u53ef\u4ee5\u5c06\u4e0b\u9762\u7684\u7c7b\u62c6\u5206\u6210\u4e0d\u540c\u7684\u6587\u4ef6\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5728mainPlugin.py\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e86\u4e24\u4e2a\u7c7b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class MyPluginOptionsFactory ( QgsOptionsWidgetFactory ): def __init__ ( self ): super () . __init__ () def icon ( self ): return QIcon ( 'icons/my_plugin_icon.svg' ) def createWidget ( self , parent ): return ConfigOptionsPage ( parent ) class ConfigOptionsPage ( QgsOptionsPageWidget ): def __init__ ( self , parent ): super () . __init__ ( parent ) layout = QHBoxLayout () layout . setContentsMargins ( 0 , 0 , 0 , 0 ) self . setLayout ( layout ) \u6700\u540e\u6211\u4eec\u6dfb\u52a0\u5bfc\u5165\u548c\u4fee\u6539 __init__ \u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from qgis.gui import QgsOptionsWidgetFactory , QgsOptionsPageWidget class MyPlugin : def __init__ ( self , iface ): \"\"\"\u6784\u9020\u51fd\u6570. :param iface: \u5c06\u4f20\u9012\u7ed9\u8be5\u7c7b\u7684\u63a5\u53e3\u5b9e\u4f8b\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u94a9\u5b50\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b83\u6765\u64cd\u4f5cQGIS\u8fd0\u884c\u65f6\u5e94\u7528\u7a0b\u5e8f\u3002 :type iface: QgsInterface \"\"\" # \u4fdd\u5b58\u5f15\u7528 self . iface = iface def initGui ( self ): self . options_factory = MyPluginOptionsFactory () self . options_factory . setTitle ( self . tr ( 'My Plugin' )) iface . registerOptionsWidgetFactory ( self . options_factory ) def unload ( self ): iface . unregisterOptionsWidgetFactory ( self . options_factory ) \u63d0\u793a \u5c06\u81ea\u5b9a\u4e49\u9009\u9879\u5361\u6dfb\u52a0\u5230\u77e2\u91cf\u56fe\u5c42\u5c5e\u6027\u5bf9\u8bdd\u6846 \u4f60\u53ef\u4ee5\u5e94\u7528\u7c7b\u4f3c\u7684\u903b\u8f91\uff0c\u4f7f\u7528 QgsMapLayerConfigWidgetFactory \u548c QgsMapLayerConfigWidget \u7c7b\u5c06\u63d2\u4ef6\u81ea\u5b9a\u4e49\u9009\u9879\u6dfb\u52a0\u5230\u56fe\u5c42\u5c5e\u6027\u5bf9\u8bdd\u6846\u4e2d\u3002 16.3 \u7f16\u5199\u548c\u8c03\u8bd5\u63d2\u4ef6\u7684IDE\u8bbe\u7f6e \u2693\ufe0e TODO 16.4 \u53d1\u5e03\u4f60\u7684\u63d2\u4ef6 \u2693\ufe0e \u4e00\u65e6\u4f60\u7684\u63d2\u4ef6\u51c6\u5907\u597d\u4e86\uff0c\u5e76\u4e14\u4f60\u8ba4\u4e3a\u8fd9\u4e2a\u63d2\u4ef6\u53ef\u80fd\u5bf9\u67d0\u4e9b\u4eba\u6709\u5e2e\u52a9\uff0c\u4e0d\u8981\u72b9\u8c6b\uff0c\u628a\u5b83\u4e0a\u4f20\u5230 \u5b98\u65b9Python\u63d2\u4ef6\u4ed3\u5e93 \u3002\u5728\u8be5\u9875\u9762\u4e0a\uff0c\u4f60\u8fd8\u53ef\u4ee5\u627e\u5230\u5173\u4e8e\u5982\u4f55\u51c6\u5907\u63d2\u4ef6\u4ee5\u4e0e\u63d2\u4ef6\u5b89\u88c5\u7a0b\u5e8f\u826f\u597d\u914d\u5408\u7684\u6253\u5305\u6307\u5357\u3002\u6216\u8005\uff0c\u5982\u679c\u4f60\u60f3\u5efa\u7acb\u81ea\u5df1\u7684\u63d2\u4ef6\u5e93\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684XML\u6587\u4ef6\uff0c\u5217\u51fa\u63d2\u4ef6\u53ca\u5176\u5143\u6570\u636e\u3002 \u8bf7\u7279\u522b\u6ce8\u610f\u4e00\u4e0b\u5efa\u8bae\uff1a 16.4.1 \u5143\u6570\u636e\u548c\u540d\u79f0 \u2693\ufe0e \u907f\u514d\u4f7f\u7528\u4e0e\u73b0\u6709\u63d2\u4ef6\u8fc7\u4e8e\u76f8\u4f3c\u7684\u540d\u79f0 \u5982\u679c\u4f60\u7684\u63d2\u4ef6\u4e0e\u73b0\u6709\u7684\u63d2\u4ef6\u6709\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u8bf7\u5728 \"\u5173\u4e8e \"\u4e00\u680f\u4e2d\u89e3\u91ca\u5176\u533a\u522b\uff0c\u8fd9\u6837\u7528\u6237\u5c31\u4f1a\u77e5\u9053\u4f7f\u7528\u54ea\u4e00\u4e2a\uff0c\u800c\u4e0d\u9700\u8981\u5b89\u88c5\u548c\u6d4b\u8bd5\u3002 \u907f\u514d\u5728\u63d2\u4ef6\u672c\u8eab\u7684\u540d\u79f0\u4e2d\u91cd\u590d\u4f7f\u7528\"plugin\"\u3002 \u4f7f\u7528\u5143\u6570\u636e\u4e2d\u7684\u63cf\u8ff0\u5b57\u6bb5\u8fdb\u884c\u5355\u884c\u63cf\u8ff0\uff0c\u4f7f\u7528\u5173\u4e8e\u5b57\u6bb5\u8fdb\u884c\u66f4\u8be6\u7ec6\u7684\u8bf4\u660e \u5305\u62ec\u4e00\u4e2a\u4ee3\u7801\u5e93\u3001\u4e00\u4e2a\u9519\u8bef\u8ddf\u8e2a\u5668\u548c\u4e00\u4e2a\u4e3b\u9875\uff1b\u8fd9\u5c06\u6781\u5927\u5730\u63d0\u9ad8\u5408\u4f5c\u7684\u53ef\u80fd\u6027\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u73b0\u6709\u7684\u7f51\u7edc\u57fa\u7840\u8bbe\u65bd\uff08GitHub\u3001GitLab\u3001Bitbucket\u7b49\uff09\u975e\u5e38\u5bb9\u6613\u5730\u5b8c\u6210\u3002 \u8c28\u614e\u9009\u62e9\u6807\u7b7e\uff1a\u907f\u514d\u4e0d\u5177\u53c2\u8003\u4ef7\u503c\u7684\u6807\u7b7e\uff08\u5982vector\uff09\uff0c\u6700\u597d\u9009\u62e9\u5df2\u7ecf\u88ab\u4ed6\u4eba\u4f7f\u7528\u7684\u6807\u7b7e\uff08\u89c1\u63d2\u4ef6\u7f51\u7ad9\uff09\u3002 \u6dfb\u52a0\u4e00\u4e2a\u5408\u9002\u7684\u56fe\u6807\uff0c\u4e0d\u8981\u4f7f\u7528\u9ed8\u8ba4\u7684\u56fe\u6807\uff1b\u53c2\u89c1QGIS\u754c\u9762\uff0c\u4e86\u89e3\u8981\u4f7f\u7528\u7684\u98ce\u683c\u5efa\u8bae 16.4.2 \u4ee3\u7801\u548c\u5e2e\u52a9 \u2693\ufe0e \u4e0d\u8981\u628a\u751f\u6210\u7684\u6587\u4ef6\uff08ui_*.py, resources_rc.py, \u751f\u6210\u7684\u5e2e\u52a9\u6587\u4ef6...\uff09\u548c\u65e0\u7528\u7684\u4e1c\u897f\uff08\u5982.gitignore\uff09\u5305\u62ec\u5728\u7248\u672c\u5e93\u4e2d \u5c06\u63d2\u4ef6\u6dfb\u52a0\u5230\u9002\u5f53\u7684\u83dc\u5355\u4e2d\uff08Vector, Raster, Web, Database\uff09\u3002 \u5728\u9002\u5f53\u7684\u65f6\u5019\uff08\u6267\u884c\u5206\u6790\u7684\u63d2\u4ef6\uff09\uff0c\u8003\u8651\u5c06\u63d2\u4ef6\u6dfb\u52a0\u4e3aProcessing\u6846\u67b6\u7684\u5b50\u63d2\u4ef6\uff1a\u8fd9\u5c06\u5141\u8bb8\u7528\u6237\u6279\u91cf\u8fd0\u884c\u5b83\uff0c\u5c06\u5b83\u96c6\u6210\u5230\u66f4\u590d\u6742\u7684\u5de5\u4f5c\u6d41\u4e2d\uff0c\u5e76\u5c06\u4f60\u4ece\u8bbe\u8ba1\u754c\u9762\u7684\u8d1f\u62c5\u4e2d\u89e3\u653e\u51fa\u6765 \u81f3\u5c11\u5305\u62ec\u6700\u57fa\u672c\u7684\u6587\u6863\uff0c\u5982\u679c\u5bf9\u6d4b\u8bd5\u548c\u7406\u89e3\u6709\u7528\u7684\u8bdd\uff0c\u8fd8\u5305\u62ec\u6837\u672c\u6570\u636e\u3002 16.4.3 \u5b98\u65b9python\u63d2\u4ef6\u4ed3\u5e93 \u2693\ufe0e \u4f60\u53ef\u4ee5\u627e\u5230\u5b98\u65b9python\u63d2\u4ef6\u4ed3\u5e93\uff1a https://plugins.qgis.org/ \u3002 \u4e3a\u4e86\u4f7f\u7528\u5b98\u65b9python\u63d2\u4ef6\u4ed3\u5e93\uff0c\u4f60\u5fc5\u987b\u4ece OSGEO web portal \u83b7\u5f97OSGEO ID\u3002 \u4e00\u65e6\u4f60\u4e0a\u4f20\u4e86\u4f60\u7684\u63d2\u4ef6\uff0c\u5b83\u5c06\u5f97\u5230\u4e00\u4e2a\u5de5\u4f5c\u4eba\u5458\u7684\u6279\u51c6\uff0c\u4f60\u4f1a\u5f97\u5230\u901a\u77e5\u3002 16.4.3.1 \u6743\u9650 \u2693\ufe0e \u8fd9\u4e9b\u89c4\u5219\u5df2\u7ecf\u5728\u5b98\u65b9\u63d2\u4ef6\u5e93\u4e2d\u5b9e\u73b0\uff1a \u6bcf\u4e2a\u6ce8\u518c\u7528\u6237\u90fd\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u63d2\u4ef6 \u5458\u5de5\u7528\u6237\u53ef\u4ee5\u6279\u51c6\u6216\u4e0d\u6279\u51c6\u6240\u6709\u7684\u63d2\u4ef6\u7248\u672c \u62e5\u6709\u7279\u6b8a\u6743\u9650 plugins.can_approve \u7684\u7528\u6237\u53ef\u4ee5\u81ea\u52a8\u6279\u51c6\u4ed6\u4eec\u4e0a\u4f20\u7684\u7248\u672c \u62e5\u6709\u7279\u6b8a\u6743\u9650 plugins.can_approve \u7684\u7528\u6237\u53ef\u4ee5\u6279\u51c6\u5176\u4ed6\u4eba\u4e0a\u4f20\u7684\u7248\u672c\uff0c\u53ea\u8981\u4ed6\u4eec\u5728\u63d2\u4ef6\u6240\u6709\u8005\u7684\u5217\u8868\u4e2d\u3002 \u4e00\u4e2a\u7279\u5b9a\u7684\u63d2\u4ef6\u53ea\u80fd\u7531\u5458\u5de5\u7528\u6237\u548c\u63d2\u4ef6\u6240\u6709\u8005\u5220\u9664\u548c\u7f16\u8f91\u3002 \u5982\u679c\u4e00\u4e2a\u6ca1\u6709 plugins.can_approve \u6743\u9650\u7684\u7528\u6237\u4e0a\u4f20\u4e86\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff0c\u8be5\u63d2\u4ef6\u7684\u7248\u672c\u4f1a\u81ea\u52a8\u53d6\u6d88\u5ba1\u6279\u3002 16.4.3.2 \u4fe1\u4efb\u7ba1\u7406 \u2693\ufe0e \u5de5\u4f5c\u4eba\u5458\u53ef\u4ee5\u901a\u8fc7\u524d\u7aef\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e plugins.can_approve \u6743\u9650\uff0c\u5411\u9009\u5b9a\u7684\u63d2\u4ef6\u521b\u5efa\u8005\u6388\u4e88\u4fe1\u4efb\u3002 \u63d2\u4ef6\u8be6\u60c5\u89c6\u56fe\u63d0\u4f9b\u4e86\u76f4\u63a5\u94fe\u63a5\uff0c\u4ee5\u6388\u4e88\u5bf9\u63d2\u4ef6\u521b\u5efa\u8005\u6216\u63d2\u4ef6\u6240\u6709\u8005\u7684\u4fe1\u4efb\u3002 16.4.3.3 \u9a8c\u8bc1 \u2693\ufe0e \u5728\u4e0a\u4f20\u63d2\u4ef6\u65f6\uff0c\u63d2\u4ef6\u7684\u5143\u6570\u636e\u4f1a\u81ea\u52a8\u4ece\u538b\u7f29\u5305\u4e2d\u5bfc\u5165\u5e76\u8fdb\u884c\u9a8c\u8bc1\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u9a8c\u8bc1\u89c4\u5219\uff0c\u5f53\u4f60\u60f3\u5728\u5b98\u65b9\u4ed3\u5e93\u4e0a\u4f20\u4e00\u4e2a\u63d2\u4ef6\u65f6\uff0c\u4f60\u5e94\u8be5\u6ce8\u610f\uff1a \u5305\u542b\u63d2\u4ef6\u7684\u4e3b\u6587\u4ef6\u5939\u7684\u540d\u79f0\u5fc5\u987b\u53ea\u5305\u542bASCII\u5b57\u7b26\uff08A-Z\u548ca-z\uff09\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\uff08_\uff09\u548c\u51cf\u53f7\uff08-\uff09\uff0c\u800c\u4e14\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\u3002 metadata.txt \u662f\u5fc5\u9700\u7684 \u5143\u6570\u636e\u8868\u4e2d\u5217\u51fa\u7684\u6240\u6709\u5fc5\u9700\u7684\u5143\u6570\u636e\u90fd\u5fc5\u987b\u5b58\u5728 \u5143\u6570\u636e version \u5b57\u6bb5\u5fc5\u987b\u662f\u552f\u4e00\u7684 16.4.3.4 \u63d2\u4ef6\u7ed3\u6784 \u2693\ufe0e \u6309\u7167\u9a8c\u8bc1\u89c4\u5219\uff0c\u4f60\u7684\u63d2\u4ef6\u7684\u538b\u7f29\u5305\uff08.zip\uff09\u5fc5\u987b\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u7ed3\u6784\uff0c\u624d\u80fd\u4f5c\u4e3a\u4e00\u4e2a\u529f\u80fd\u6027\u63d2\u4ef6\u8fdb\u884c\u9a8c\u8bc1\u3002\u7531\u4e8e\u8be5\u63d2\u4ef6\u5c06\u88ab\u89e3\u538b\u5728\u7528\u6237\u7684plugins\u6587\u4ef6\u5939\u5185\uff0c\u5b83\u5fc5\u987b\u5728.zip\u6587\u4ef6\u5185\u6709\u81ea\u5df1\u7684\u76ee\u5f55\uff0c\u4ee5\u4e0d\u5e72\u6270\u5176\u4ed6\u63d2\u4ef6\u3002\u5fc5\u9700\u7684\u6587\u4ef6\u6709\uff1a metadata.txt \u548c __init__.py \u3002\u4f46\u5982\u679c\u80fd\u6709\u4e00\u4e2aREADME\uff0c\u5f53\u7136\u8fd8\u6709\u4e00\u4e2a\u4ee3\u8868\u8be5\u63d2\u4ef6\u7684\u56fe\u6807\uff08resources.qrc\uff09\uff0c\u90a3\u5c31\u66f4\u597d\u4e86\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2aplugin.zip\u7684\u4f8b\u5b50\uff0c\u5b83\u5e94\u8be5\u662f\u8fd9\u6837\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 plugin.zip pluginfolder/ |-- i18n | |-- translation_file_de.ts |-- img | |-- icon.png | `-- iconsource.svg |-- __init__.py |-- Makefile |-- metadata.txt |-- more_code.py |-- main_code.py |-- README |-- resources.qrc |-- resources_rc.py `-- ui_Qt_user_interface_file.ui","title":"16-\u5f00\u53d1Python\u63d2\u4ef6"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16-python","text":"\u53ef\u4ee5\u7528Python\u7f16\u7a0b\u8bed\u8a00\u521b\u5efa\u63d2\u4ef6\u3002\u4e0e\u7528C ++\u7f16\u5199\u63d2\u4ef6\u76f8\u6bd4\uff0c\u7531\u4e8ePython\u8bed\u8a00\u7684\u52a8\u6001\u7279\u6027\uff0c\u8fd9\u4e9b\u63d2\u4ef6\u5e94\u8be5\u66f4\u5bb9\u6613\u7f16\u5199\uff0c\u7406\u89e3\uff0c\u7ef4\u62a4\u548c\u5206\u53d1\u3002 Python\u63d2\u4ef6\u4e0eQGIS\u63d2\u4ef6\u7ba1\u7406\u5668\u4e2d\u7684C ++\u63d2\u4ef6\u4e00\u8d77\u5217\u51fa\u3002\u4ed6\u4eec\u5728 ~/(UserProfile)/python/plugins \u548c\u4ee5\u4e0b\u8def\u5f84\u4e2d\u641c\u7d22\uff1a UNIX / Mac\u4e0a\uff1a (qgis_prefix)/share/qgis/python/plugins Windows\uff1a (qgis_prefix)/python/plugins \u6709\u5173 ~ \u548c (UserProfile) \u7684\u5b9a\u4e49,\u8bf7\u67e5\u770b Core\u548cExternal\u63d2\u4ef6 \u3002 \u63d0\u793a \u5c06QGIS_PLUGINPATH\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5b58\u5728\u7684\u76ee\u5f55\u8def\u5f84\uff0c\u53ef\u4ee5\u5c06\u6b64\u8def\u5f84\u6dfb\u52a0\u5230\u63d2\u4ef6\u7684\u641c\u7d22\u8def\u5f84\u5217\u8868\u4e2d\u3002","title":"16 \u5f00\u53d1Python\u63d2\u4ef6"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#161-python","text":"\u521b\u5efa\u63d2\u4ef6\uff0c\u9700\u8981\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u60f3\u6cd5 \uff1a\u4f60\u60f3\u8981\u4f7f\u7528\u65b0\u7684QGIS\u63d2\u4ef6\u505a\u4ec0\u4e48\u3002\u4f60\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u505a\uff1f\u4f60\u60f3\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\uff1f\u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u6709\u53e6\u4e00\u4e2a\u63d2\u4ef6\u5417\uff1f \u521b\u5efa\u6587\u4ef6 \uff1a\u4e00\u4e9b\u5fc5\u8981\u6587\u4ef6\uff08\u67e5\u770b \u63d2\u4ef6\u6587\u4ef6 \uff09 \u7f16\u5199\u4ee3\u7801 \uff1a\u5728\u6070\u5f53\u7684\u6587\u4ef6\u4e2d\u5199\u4ee3\u7801 \u6d4b\u8bd5 \uff1a\u5982\u679c\u51c6\u5907\u5c31\u7eea\uff0c \u91cd\u65b0\u52a0\u8f7d\u63d2\u4ef6 \u53d1\u5e03 \uff1a\u5728QGIS\u4ed3\u5e93\u4e2d\u53d1\u5e03\u4f60\u7684\u63d2\u4ef6\u6216\u5c06\u4f60\u81ea\u5df1\u7684\u4ed3\u5e93\u4f5c\u4e3a\u4e2a\u4eba\u201cGIS\u6b66\u5668\u201d\u7684\u201c\u6b66\u5668\u5e93\u201d\u3002","title":"16.1 \u6784\u5efaPython\u63d2\u4ef6"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#1611","text":"\u81ea\u4ece\u5728QGIS\u4e2d\u5f15\u5165Python\u63d2\u4ef6\u4ee5\u6765\uff0c\u51fa\u73b0\u4e86\u8bb8\u591a\u63d2\u4ef6\u3002QGIS\u56e2\u961f\u7ef4\u62a4\u4e86\u4e00\u4e2a \u5b98\u65b9Python\u63d2\u4ef6\u5e93 \u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u7684\u6e90\u7801\u6765\u4e86\u89e3\u4f7f\u7528PyQGIS\u8fdb\u884c\u7f16\u7a0b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u6216\u8005\u4e86\u89e3\u4f60\u662f\u5426\u5728\u91cd\u590d\u5f00\u53d1\u3002","title":"16.1.1 \u7f16\u5199\u4e00\u4e2a\u63d2\u4ef6"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16111","text":"\u8fd9\u662f\u6211\u4eec\u7684\u793a\u4f8b\u63d2\u4ef6\u7684\u76ee\u5f55\u7ed3\u6784 1 2 3 4 5 6 7 8 9 PYTHON_PLUGINS_PATH/ MyPlugin/ __init__.py --> *\u5fc5\u9700* mainPlugin.py --> *\u6838\u5fc3\u4ee3\u7801* metadata.txt --> *\u5fc5\u9700* resources.qrc --> *\u53ef\u80fd\u9700\u8981* resources.py --> *\u7f16\u8bd1\u7248\u672c, \u53ef\u80fd\u9700\u8981* form.ui --> *\u53ef\u80fd\u9700\u8981* form.py --> *\u7f16\u8bd1\u7248\u672c, \u53ef\u80fd\u9700\u8981* \u8fd9\u4e9b\u6587\u4ef6\u7684\u542b\u4e49\u662f\u4ec0\u4e48\uff1a __init__.py =\u63d2\u4ef6\u7684\u5165\u53e3\u3002\u5b83\u5fc5\u987b\u5177\u6709 classFactory() \u65b9\u6cd5\uff0c\u8fd8\u53ef\u4ee5\u5177\u6709\u4efb\u4f55\u5176\u4ed6\u521d\u59cb\u5316\u4ee3\u7801\u3002 mainPlugin.py =\u63d2\u4ef6\u7684\u4e3b\u8981\u5de5\u4f5c\u4ee3\u7801\u3002\u5305\u542b\u6709\u5173\u63d2\u4ef6\u64cd\u4f5c\u548c\u4e3b\u8981\u4ee3\u7801\u7684\u6240\u6709\u4fe1\u606f\u3002 resources.qrc = Qt\u8bbe\u8ba1\u5e08\u521b\u5efa\u7684xml\u6587\u6863\u3002\u5305\u542b\u8868\u5355\u8d44\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\u3002 resources.py =\u5c06\u4e0a\u8ff0.qrc\u6587\u4ef6\u8f6c\u6362\u4e3aPython\u4ee3\u7801\u3002 form.ui = Qt\u8bbe\u8ba1\u5e08\u521b\u5efa\u7684GUI\u3002 form.py =\u5c06\u4e0a\u9762\u63cf\u8ff0\u7684form.ui\u8f6c\u6362\u4e3aPython\u4ee3\u7801\u3002 metadata.txt =\u5305\u542b\u63d2\u4ef6\u7f51\u7ad9\u548c\u63d2\u4ef6\u57fa\u7840\u7ed3\u6784\u4f7f\u7528\u7684\u5e38\u89c4\u4fe1\u606f\uff0c\u7248\u672c\u3001\u540d\u79f0\u548c\u4e00\u4e9b\u5176\u4ed6\u5143\u6570\u636e\u3002 \u8fd9 \u662f\u4e00\u79cd\u81ea\u52a8\u521b\u5efa\u5178\u578bQGIS Python\u63d2\u4ef6\u7684\u57fa\u672c\u6587\u4ef6\uff08\u6846\u67b6\uff09\u7684\u65b9\u5f0f\u3002 \u6709\u4e00\u4e2a\u540d\u4e3a Plugin Builder 3 \u7684QGIS\u63d2\u4ef6 \uff0c\u5b83\u4e3aQGIS\u521b\u5efa\u4e00\u4e2a\u63d2\u4ef6\u6a21\u677f\uff0c\u4e0d\u9700\u8981\u4e92\u8054\u7f51\u8fde\u63a5\u3002\u8fd9\u662f\u63a8\u8350\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u517c\u5bb93.x\u7248\u672c\u3002 Warning \u5982\u679c\u60a8\u6253\u7b97\u5c06\u63d2\u4ef6\u4e0a\u4f20\u5230 Python\u5b98\u65b9\u63d2\u4ef6\u5e93 \uff0c\u5219\u5fc5\u987b\u68c0\u67e5\u63d2\u4ef6\u662f\u5426\u9075\u5faa\u63d2\u4ef6 \u9a8c\u8bc1 \u6240\u5fc5\u9700\u7684\u4e00\u4e9b\u9644\u52a0\u89c4\u5219","title":"16.1.1.1 \u63d2\u4ef6\u6587\u4ef6"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#1612","text":"\u5728\u8fd9\u91cc\uff0c\u4f60\u53ef\u4ee5\u627e\u5230\u6709\u5173\u5728\u4e0a\u8ff0\u6587\u4ef6\u7ed3\u6784\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\u9700\u8981\u6dfb\u52a0\u5185\u5bb9\u7684\u4fe1\u606f\u548c\u793a\u4f8b\u3002","title":"16.1.2 \u63d2\u4ef6\u5185\u5bb9"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16121","text":"\u9996\u5148\uff0c\u63d2\u4ef6\u7ba1\u7406\u5668\u9700\u8981\u68c0\u7d22\u6709\u5173\u63d2\u4ef6\u7684\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\uff0c\u4f8b\u5982\u5176\u540d\u79f0\u3001\u63cf\u8ff0\u7b49\u3002\u6587\u4ef6 metadata.txt \u5b58\u50a8\u6b64\u4fe1\u606f\u3002 \u63d0\u793a \u6240\u6709\u5143\u6570\u636e\u5fc5\u987b\u91c7\u7528UTF-8\u7f16\u7801\u3002 \u5143\u6570\u636e\u540d\u79f0 \u662f\u5426\u5fc5\u9700 \u63cf\u8ff0 name \u662f \u63d2\u4ef6\u540d\u79f0\uff0c\u77ed\u5b57\u7b26\u4e32 qgisMinimumVersion \u662f \u6700\u5c0fQGIS\u7248\u672c qgisMaximumVersion \u5426 \u6700\u5927QGIS\u7248\u672c description \u662f \u63cf\u8ff0\u63d2\u4ef6\u7684\u7b80\u77ed\u6587\u672c\uff0c\u4e0d\u652f\u6301HTML about \u662f \u8f83\u957f\u7684\u6587\u672c\uff0c\u8be6\u7ec6\u63cf\u8ff0\u63d2\u4ef6\uff0c\u4e0d\u652f\u6301HTML version \u662f \u7248\u672c author \u662f \u4f5c\u8005\u59d3\u540d email \u662f \u4f5c\u8005\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u5728\u7f51\u7ad9\u4e0a\u4ec5\u663e\u793a\u7ed9\u767b\u5f55\u7684\u7528\u6237\uff0c\u4f46\u5728\u63d2\u4ef6\u5b89\u88c5\u540e\u53ef\u5728\u63d2\u4ef6\u7ba1\u7406\u5668\u4e2d\u770b\u5230 changelog \u5426 \u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u662f\u591a\u884c\uff0c\u4e0d\u652f\u6301HTML experimental \u5426 \u5b9e\u9a8c\u6027\uff0c\u5e03\u5c14\u503c\uff0cTrue\u6216False deprecated \u5426 \u5f03\u7528\uff0cboolean\u503c\uff0cTrue\u6216False\uff0c\u9002\u7528\u4e8e\u6574\u4e2a\u63d2\u4ef6\uff0c\u800c\u4e0d\u4ec5\u4ec5\u9002\u7528\u4e8e\u4e0a\u4f20\u7684\u7248\u672c tags \u5426 \u4ee5\u9017\u53f7\u5206\u9694\u7684\u5217\u8868\uff0c\u5141\u8bb8\u5728\u5355\u4e2a\u6807\u8bb0\u5185\u4f7f\u7528\u7a7a\u683c homepage \u5426 \u6307\u5411\u63d2\u4ef6\u4e3b\u9875\u7684\u6709\u6548\u7f51\u5740 repository \u662f \u6e90\u4ee3\u7801\u5b58\u50a8\u5e93\u7684\u6709\u6548URL tracker \u5426 \u6545\u969c\u548c\u9519\u8bef\u62a5\u544a\u7684\u6709\u6548URL icon \u5426 \u5bf9\u4e8eweb\u53cb\u597d\u7684\u56fe\u50cf\uff08PNG\uff0cJPEG\uff09\u6587\u4ef6\u540d\u6216\u76f8\u5bf9\u8def\u5f84\uff08\u76f8\u5bf9\u4e8e\u63d2\u4ef6\u538b\u7f29\u5305\u7684\u6587\u4ef6\u5939\uff09 category \u5426 Raster, Vector, Database and Web\uff08\u6805\u683c\u3001\u77e2\u91cf\u3001\u6570\u636e\u5e93\u548c\u7f51\u7edc\uff09 plugin_dependencies \u5426 \u7c7b\u4f3c\u4e8ePIP\u7684\u9017\u53f7\u5206\u9694\u7684\u5176\u4ed6\u63d2\u4ef6\u5217\u8868 server \u5426 \u5e03\u5c14\u503c\uff0cTrue\u6216False\uff0c\u786e\u5b9a\u63d2\u4ef6\u662f\u5426\u5177\u6709\u670d\u52a1\u5668\u63a5\u53e3 hasProcessingProvider \u5426 \u5e03\u5c14\u503c\uff0cTrue\u6216False\uff0c\u786e\u5b9a\u63d2\u4ef6\u662f\u5426\u63d0\u4f9b\u5904\u7406\u7b97\u6cd5 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u63d2\u4ef6\u653e\u5728**Plugins**\u83dc\u5355\u4e2d\uff08\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u770b\u5230\u5982\u4f55\u4e3a\u63d2\u4ef6\u6dfb\u52a0\u83dc\u5355\u9879\uff09\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5165**Raster**\uff0c Vector \uff0c **Database**\u548c**Web**\u83dc\u5355\u4e2d\u3002 \u8f93\u5165\u6307\u5b9a\u7684\u201ccategory\u201d\u5143\u6570\u636e\uff0c\u53ef\u4ee5\u76f8\u5e94\u5730\u5bf9\u63d2\u4ef6\u8fdb\u884c\u5206\u7c7b\u3002\u6b64\u5143\u6570\u636e\u7528\u4e8e\u63d0\u793a\u7528\u6237\uff0c\u5e76\u544a\u8bc9\u4ed6\u4eec\u53ef\u4ee5\u5728\u54ea\u91cc\uff08\u5728\u54ea\u4e2a\u83dc\u5355\u4e2d\uff09\u627e\u5230\u8be5\u63d2\u4ef6\u3002\u201ccategory\u201d\u7684\u5141\u8bb8\u503c\u4e3a\uff1aVector, Raster, Database\u6216\u8005Web\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684\u63d2\u4ef6\u53ef\u4ee5\u4eceRaster\u83dc\u5355\u4e2d\u627e\u5230\uff0c\u8bf7\u5c06\u5176\u6dfb\u52a0\u5230 metadata.txt \u4e2d 1 category = Raster \u63d0\u793a \u5982\u679cqgisMaximumVersion\u4e3a\u7a7a\uff0c\u5219\u5728\u4e0a\u4f20\u5230 \u5b98\u65b9Python\u63d2\u4ef6\u5e93 \u65f6\uff0c\u5b83\u5c06\u81ea\u52a8\u8bbe\u7f6e\u4e3a\u4e3b\u8981\u7248\u672c\u52a0\u4e0a.99\uff08\u4f8b\u5982\uff1a3.99\uff09\u3002 metadata.txt\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 ; \u4ee5\u4e0b\u662f\u5f3a\u5236\u6027\u7684 [general] name = HelloWorld email = me@example.com author = Just Me qgisMinimumVersion = 3.0 description = This is an example plugin for greeting the world.\\ Multiline is allowed:\\ lines starting with spaces belong to the same\\ field, in this case to the \"description\" field.\\ HTML formatting is not allowed. about = This paragraph can contain a detailed description\\ of the plugin. Multiline is allowed, HTML is not. version = version 1.2 tracker = http://bugs.itopen.it repository = http://www.itopen.it/repo ; \u7ed3\u675f\u5f3a\u5236 ; \u4ee5\u4e0b\u662f\u53ef\u9009\u7684 category = Raster changelog = The changelog lists the plugin versions\\ and their changes as in the example below:\\ 1.0 - First stable release\\ 0.9 - All features implemented\\ 0.8 - First testing release ; \u6807\u7b7e\u91c7\u7528\u9017\u53f7\u5206\u9694\uff0c\u6807\u7b7e\u540d\u79f0\u5141\u8bb8\u4f7f\u7528\u7a7a\u683c ; \u6807\u7b7e\u5e94\u8be5\u662f\u82f1\u6587\u7684\uff0c\u5728\u521b\u5efa\u4e4b\u524d\u8bf7\u68c0\u67e5\u73b0\u6709\u6807\u7b7e\u548c\u540c\u4e49\u8bcd tags = wkt,raster,hello world ; \u8fd9\u4e9b\u5143\u6570\u636e\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u6700\u7ec8\u5c06\u6210\u4e3a\u5f3a\u5236\u6027\u7684\u3002 homepage = https://www.itopen.it icon = icon.png ; \u5b9e\u9a8c\u6807\u5fd7\uff08\u9002\u7528\u4e8e\u5355\u4e00\u7248\u672c\uff09 experimental = True ; \u5f03\u7528\u6807\u5fd7 \uff08\u9002\u7528\u4e8e\u6574\u4e2a\u63d2\u4ef6\uff0c\u4e0d\u4ec5\u9002\u7528\u4e8e\u4e0a\u4f20\u7684\u7248\u672c\uff09 deprecated = False ; \u5982\u679c\u4e3a\u7a7a\uff0c\u5b83\u5c06\u81ea\u52a8\u8bbe\u7f6e\u4e3a\u4e3b\u8981\u7248\u672c+.99 qgisMaximumVersion = 3.99 ; \u4ece QGIS 3.8\u5f00\u59cb\uff0c\u53ef\u4ee5\u6307\u5b9a\u4ee5\u9017\u53f7\u5206\u9694\u6307\u5b9a\u8981\u5b89\u88c5\uff08\u6216\u66f4\u65b0\uff09\u7684\u63d2\u4ef6\u5217\u8868 ; \u4e0b\u9762\u793a\u4f8b\u5b89\u88c5\u6216\u66f4\u65b0\u7248\u672c1.12\u7684\u201cMyOtherPlugin\u201d\u548c\u4efb\u4f55\u7248\u672c\u7684\u201cYetAnotherPlugin\u201d plugin_dependencies = MyOtherPlugin==1.12,YetAnotherPlugin","title":"16.1.2.1 \u63d2\u4ef6\u5143\u6570\u636e"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16122-__init__py","text":"Python\u5305\u9700\u8981\u6b64\u6587\u4ef6\u3002\u6b64\u5916\uff0cQGIS\u8981\u6c42\u6b64\u6587\u4ef6\u5305\u542b\u4e00\u4e2a classFactory() \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5728\u63d2\u4ef6\u88ab\u52a0\u8f7d\u5230QGIS\u65f6\u8c03\u7528\u3002\u5b83\u63a5\u6536 QgisInterface \u5b9e\u4f8b\uff0c \u5e76\u4e14\u5fc5\u987b\u8fd4\u56de mainplugin.py \u4e2d\u63d2\u4ef6\u7c7b\u7684\u5bf9\u8c61\u2014\u2014\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u5b83\u88ab\u547d\u540d\u4e3a TestPlugin \uff08\u89c1\u4e0b\u6587\uff09\u3002 __init__.py \u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 4 5 def classFactory ( iface ): from .mainPlugin import TestPlugin return TestPlugin ( iface ) # \u4efb\u4f55\u5176\u4ed6\u521d\u59cb\u5316","title":"16.1.2.2 __init__.py"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16123-mainpluginpy","text":"\u8fd9\u5c31\u662f\u9b54\u6cd5\u53d1\u751f\u7684\u5730\u65b9\uff0c\u4e0b\u9762\u5c31\u662f\u9b54\u6cd5\u7684\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 from qgis.PyQt.QtGui import * from qgis.PyQt.QtWidgets import * # \u4ece\u6587\u4ef6resources.py\u521d\u59cb\u5316Qt\u7684\u8d44\u6e90 from . import resources class TestPlugin : def __init__ ( self , iface ): # \u4fdd\u5b58QGIS interface\u5f15\u7528 self . iface = iface def initGui ( self ): # \u521b\u5efa\u64cd\u4f5c\uff0c\u5b83\u5c06\u542f\u52a8\u63d2\u4ef6\u914d\u7f6e self . action = QAction ( QIcon ( \":/plugins/testplug/icon.png\" ), \"Test plugin\" , self . iface . mainWindow ()) self . action . setObjectName ( \"testAction\" ) self . action . setWhatsThis ( \"Configuration for test plugin\" ) self . action . setStatusTip ( \"This is status tip\" ) self . action . triggered . connect ( self . run ) # \u6dfb\u52a0\u5de5\u5177\u680f\u6309\u94ae\u548c\u83dc\u5355\u9879 self . iface . addToolBarIcon ( self . action ) self . iface . addPluginToMenu ( \"&Test plugins\" , self . action ) # \u8fde\u63a5\u4fe1\u53f7renderComplete\u2014\u2014\u753b\u5e03\u6e32\u67d3\u5b8c\u6210\u540e\u53d1\u9001\u7684\u4fe1\u53f7 self . iface . mapCanvas () . renderComplete . connect ( self . renderTest ) def unload ( self ): # \u5220\u9664\u63d2\u4ef6\u83dc\u5355\u9879\u548c\u56fe\u6807 self . iface . removePluginMenu ( \"&Test plugins\" , self . action ) self . iface . removeToolBarIcon ( self . action ) # \u65ad\u5f00\u4fe1\u53f7 self . iface . mapCanvas () . renderComplete . disconnect ( self . renderTest ) def run ( self ): # \u521b\u5efa\u5e76\u663e\u793a\u4e00\u4e2a\u914d\u7f6e\u5bf9\u8bdd\u6846\u6216\u7c7b\u4f3c\u7684\u4e8b\u60c5 print ( \"TestPlugin: run called!\" ) def renderTest ( self , painter ): # \u4f7f\u7528painter\u7ed8\u5236\u5730\u56fe\u753b\u5e03 print ( \"TestPlugin: renderTest called!\" ) \u4e3b\u63d2\u4ef6\u6e90\u6587\u4ef6\u4e2d\uff08\u4f8b\u5982 mainPlugin.py \uff09\u5fc5\u987b\u5b58\u5728\u7684\u63d2\u4ef6\u51fd\u6570\u662f\uff1a __init__ - >\u53ef\u4ee5\u8bbf\u95eeQGIS\u754c\u9762 initGui() - >\u52a0\u8f7d\u63d2\u4ef6\u65f6\u8c03\u7528 unload() - >\u5378\u8f7d\u63d2\u4ef6\u65f6\u8c03\u7528 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c addPluginToMenu() \u88ab\u4f7f\u7528\u3002\u8fd9\u4f1a\u5c06\u76f8\u5e94\u7684\u83dc\u5355\u64cd\u4f5c\u6dfb\u52a0\u5230**Plugins** \u83dc\u5355\u4e2d\u3002\u5b58\u5728\u989d\u5916\u7684\u65b9\u6cd5\u5c06\u64cd\u4f5c\uff08action\uff09\u6dfb\u52a0\u5230\u4e0d\u540c\u83dc\u5355\u3002\u4ee5\u4e0b\u662f\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5217\u8868\uff1a addPluginToRasterMenu() addPluginToVectorMenu() addPluginToDatabaseMenu() addPluginToWebMenu() \u5b83\u4eec\u90fd\u5177\u6709\u4e0e addPluginToMenu() \u65b9\u6cd5\u76f8\u540c\u7684\u8bed\u6cd5 \u3002 \u5efa\u8bae\u5c06\u63d2\u4ef6\u83dc\u5355\u6dfb\u52a0\u5230\u5176\u4e2d\u4e00\u4e2a\u9884\u5b9a\u4e49\u65b9\u6cd5\uff0c\u4ee5\u4fdd\u6301\u63d2\u4ef6\u6761\u76ee\u7ec4\u7ec7\u65b9\u5f0f\u7684\u4e00\u81f4\u6027\u3002\u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u5c06\u81ea\u5b9a\u4e49\u83dc\u5355\u7ec4\u76f4\u63a5\u6dfb\u52a0\u5230\u83dc\u5355\u680f\uff0c\u5982\u4e0b\u9762\u793a\u4f8b\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def initGui ( self ): self . menu = QMenu ( self . iface . mainWindow ()) self . menu . setObjectName ( \"testMenu\" ) self . menu . setTitle ( \"MyMenu\" ) self . action = QAction ( QIcon ( \":/plugins/testplug/icon.png\" ), \"Test plugin\" , self . iface . mainWindow ()) self . action . setObjectName ( \"testAction\" ) self . action . setWhatsThis ( \"Configuration for test plugin\" ) self . action . setStatusTip ( \"This is status tip\" ) self . action . triggered . connect ( self . run ) self . menu . addAction ( self . action ) menuBar = self . iface . mainWindow () . menuBar () menuBar . insertMenu ( self . iface . firstRightStandardMenu () . menuAction (), self . menu ) def unload ( self ): self . menu . deleteLater () \u4e0d\u8981\u5fd8\u8bb0\u8bbe\u7f6e QAction \u548c QMenu objectName \u63d2\u4ef6\u7684\u7279\u5b9a\u540d\u79f0\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u81ea\u5b9a\u4e49\u3002","title":"16.1.2.3 mainPlugin.py"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16124","text":"\u4f60\u53ef\u4ee5\u770b\u5230\u5728 initGui() \u4e2d\u6211\u4eec\u4f7f\u7528\u4e86\u8d44\u6e90\u6587\u4ef6\u4e2d\u7684\u56fe\u6807\uff08\u5728\u6211\u4eec\u7684\u6848\u4f8b\u4e2d\u662f resources.qrc \uff09 1 2 3 4 5 <RCC> <qresource prefix= \"/plugins/testplug\" > <file> icon.png </file> </qresource> </RCC> \u6700\u597d\u4f7f\u7528\u4e0d\u4f1a\u4e0e\u5176\u4ed6\u63d2\u4ef6\u6216QGIS\u7684\u4efb\u4f55\u90e8\u5206\u53d1\u751f\u51b2\u7a81\u7684\u524d\u7f00\uff0c\u5426\u5219\u4f60\u53ef\u80fd\u4f1a\u5f97\u5230\u4f60\u4e0d\u60f3\u8981\u7684\u8d44\u6e90\u3002\u73b0\u5728\u4f60\u53ea\u9700\u8981\u751f\u6210\u4e00\u4e2a\u5305\u542b\u8d44\u6e90\u7684Python\u6587\u4ef6\u3002\u5b83\u662f\u7528**pyrcc5**\u547d\u4ee4\u5b8c\u6210\u7684\uff1a 1 pyrcc5 -o resources.py resources.qrc \u63d0\u793a \u5728Windows\u73af\u5883\u4e2d\uff0c\u5c1d\u8bd5\u4eceCMD\u6216Powershell\u8fd0\u884cpyrcc5\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u201cWindows\u65e0\u6cd5\u8bbf\u95ee\u6307\u5b9a\u7684\u8bbe\u5907\uff0c\u8def\u5f84\uff0c\u6216\u6587\u4ef6[...]\u201d\u3002\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u53ef\u80fd\u662f\u4f7f\u7528osgeo4wshell\uff0c\u4f46\u5982\u679c\u4f60\u613f\u610f\u4fee\u6539PATH\u73af\u5883\u53d8\u91cf\u6216\u663e\u5f0f\u6307\u5b9a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u5728 <Your QGIS Install Directory>\\bin\\pyrcc5.exe \u627e\u5230\u5b83 \u5c31\u8fd9\u4e9b\u2026\u2026\u6ca1\u4ec0\u4e48\u590d\u6742\u7684:) \u5982\u679c\u4f60\u5df2\u6b63\u786e\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\u5219\u5e94\u8be5\u80fd\u591f\u5728\u63d2\u4ef6\u7ba1\u7406\u5668\u4e2d\u67e5\u627e\u5e76\u52a0\u8f7d\u63d2\u4ef6\uff0c\u5728\u70b9\u51fb\u5de5\u5177\u680f\u56fe\u6807\u6216\u76f8\u5e94\u7684\u83dc\u5355\u9879\u65f6\uff0c\u53ef\u4ee5\u5728\u63a7\u5236\u53f0\u4e2d\u67e5\u770b\u5230\u6d88\u606f\u3002 \u5728\u5904\u7406\u771f\u6b63\u7684\u63d2\u4ef6\u65f6\uff0c\u6700\u597d\u5c06\u63d2\u4ef6\u5199\u5165\u53e6\u4e00\u4e2a\uff08\u5de5\u4f5c\uff09\u76ee\u5f55\u5e76\u521b\u5efa\u4e00\u4e2amakefile\uff0c\u5b83\u5c06\u751f\u6210UI\u548c\u8d44\u6e90\u6587\u4ef6\u5e76\u5c06\u63d2\u4ef6\u5b89\u88c5\u5230QGIS\u5b89\u88c5\u4e2d\u3002","title":"16.1.2.4 \u8d44\u6e90\u6587\u4ef6"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#1613","text":"\u8be5\u63d2\u4ef6\u7684\u6587\u6863\u53ef\u4ee5\u7f16\u5199\u4e3aHTML\u5e2e\u52a9\u6587\u6863\u3002 qgis.utils \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c showPluginHelp() \u5c06\u6253\u5f00\u5e2e\u52a9\u6587\u6863\u6d4f\u89c8\u5668\uff0c\u4e0e\u5176\u4ed6QGIS\u5e2e\u52a9\u6587\u6863\u7684\u65b9\u5f0f\u76f8\u540c\u3002 showPluginHelp() \u51fd\u6570\u5728\u4e0e\u8c03\u7528\u6a21\u5757\u76f8\u540c\u7684\u76ee\u5f55\u4e2d\u67e5\u627e\u5e2e\u52a9\u6587\u6863\u3002\u5b83\u4f1a\u5bfb\u627e index-ll_cc.html \uff0c index-ll.html \uff0c index-en.html \uff0c index-en_us.html \u548c index.html \uff0c\u663e\u793a\u5b83\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u6587\u6863\u3002\u8fd9 ll_cc \u662fQGIS\u8bed\u8a00\u73af\u5883\uff0c\u8fd9\u5141\u8bb8\u6587\u6863\u6709\u591a\u4e2a\u7ffb\u8bd1\u3002 showPluginHelp() \u51fd\u6570\u8fd8\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 packageName \u2014\u2014\u5b83\u663e\u793a\u6307\u5b9a\u63d2\u4ef6\u7684\u5e2e\u52a9\u6587\u6863\uff0c filename \u2014\u2014\u53ef\u4ee5\u66ff\u6362\u88ab\u641c\u7d22\u7684\u6587\u4ef6\u540d\u4e2d\u7684\u201cindex\u201d\uff0csection\u2014\u2014\u5b83\u662fhtml\u951a\u6807\u8bb0\u7684\u540d\u79f0\uff0c\u6d4f\u89c8\u5668\u5c06\u5b9a\u4f4d\u5230\u8be5\u4f4d\u7f6e\u3002","title":"16.1.3 \u6587\u6863"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#1614","text":"\u901a\u8fc7\u51e0\u4e2a\u6b65\u9aa4\uff0c\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u63d2\u4ef6\u672c\u5730\u5316\u7684\u73af\u5883\uff0c\u4ee5\u4fbf\u6839\u636e\u8ba1\u7b97\u673a\u7684\u533a\u57df\uff0c\u63d2\u4ef6\u5c06\u4ee5\u4e0d\u540c\u8bed\u8a00\u52a0\u8f7d\u3002","title":"16.1.4 \u7ffb\u8bd1"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16141","text":"\u521b\u5efa\u548c\u7ba1\u7406\u6240\u6709\u7ffb\u8bd1\u6587\u4ef6\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u5b89\u88c5 Qt Linguist \u3002\u5728\u57fa\u4e8eDebian\u7684GNU / Linux\u73af\u5883\u4e2d\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u5b89\u88c5\u5b83\uff1a 1 sudo apt-get install qttools5-dev-tools","title":"16.1.4.1 \u8f6f\u4ef6\u8981\u6c42"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16142","text":"\u521b\u5efa\u63d2\u4ef6\u65f6\uff0c\u4f60\u5c06\u5728\u4e3b\u63d2\u4ef6\u76ee\u5f55\u4e2d\u627e\u5230\u8be5\u6587\u4ef6\u5939 i18n \u3002 \u6240\u6709\u7ffb\u8bd1\u6587\u4ef6\u90fd\u5fc5\u987b\u653e\u5728\u6b64\u76ee\u5f55\u4e2d\u3002","title":"16.1.4.2 \u6587\u4ef6\u548c\u76ee\u5f55"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16143-makefile","text":"\u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528Plugin Builder\u521b\u5efa\u4e86\u63d2\u4ef6\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528makefile\u4ecepython\u4ee3\u7801\u548cQt\u5bf9\u8bdd\u6846\u4e2d\u63d0\u53d6\u6d88\u606f\u3002\u5728Makefile\u7684\u5f00\u5934\u6709\u4e00\u4e2aLOCALES\u53d8\u91cf\uff1a 1 LOCALES = en \u5c06\u8be5\u8bed\u8a00\u7684\u7f29\u5199\u6dfb\u52a0\u5230\u6b64\u53d8\u91cf\u4e2d\uff0c\u4f8b\u5982\u5308\u7259\u5229\u8bed\uff1a 1 LOCALES = en hu \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4ece\u6e90\u751f\u6210\u6216\u66f4\u65b0 hu.ts \u6587\u4ef6\uff08\u4ee5\u53ca\u5176\u4e2d\u7684 en.ts \uff09\uff1a 1 make transup \u5728\u6b64\u4e4b\u540e\uff0c\u4f60\u5df2\u5728LOCALES\u53d8\u91cf\u4e2d\u66f4\u65b0 .ts \u4e86\u6240\u6709\u8bed\u8a00\u7684\u6587\u4ef6\u3002\u4f7f\u7528**Qt Linguist**\u7ffb\u8bd1\u7a0b\u5e8f\u6d88\u606f\u3002\u5b8c\u6210\u7ffb\u8bd1\u540e\uff0c .qm \u53ef\u4ee5\u901a\u8fc7 transcompile \u521b\u5efa\uff1a 1 make transcompile \u4f60\u5fc5\u987b\u5728\u4f60\u7684\u63d2\u4ef6\u4e2d\u5206\u53d1 .ts \u6587\u4ef6\u3002","title":"16.1.4.3 \u4f7f\u7528MakeFile\u8fdb\u884c\u7ffb\u8bd1"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16144","text":"\u8981\u67e5\u770b\u63d2\u4ef6\u7684\u7ffb\u8bd1\uff0c\u53ea\u9700\u6253\u5f00QGIS\uff0c\u66f4\u6539\u8bed\u8a00\uff08 \u8bbe\u7f6e\u2023\u9009\u9879\u2023\u901a\u7528 \uff09\u5e76\u91cd\u65b0\u542f\u52a8QGIS\u3002 \u4f60\u5e94\u8be5\u770b\u5230\u4f60\u7684\u63d2\u4ef6\u4f7f\u7528\u6b63\u786e\u7684\u8bed\u8a00\u3002 \u8b66\u544a \u5982\u679c\u4f60\u6539\u53d8\u4e86\u4e00\u4e9b\u4e1c\u897f\uff08\u65b0\u7684UI\uff0c\u65b0\u7684\u83dc\u5355\uff0c\u7b49\u7b49\uff09\uff0c\u4f60\u5fc5\u987b\u91cd\u65b0\u751f\u6210 .ts \u548c .qm \u6587\u4ef6\uff0c\u56e0\u6b64\u9700\u8981\u518d\u4e00\u6b21\u6267\u884c\u4ee5\u4e0a\u547d\u4ee4\u3002","title":"16.1.4.4 \u52a0\u8f7d\u63d2\u4ef6"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#1615","text":"","title":"16.1.5 \u63d0\u793a\u548c\u6280\u5de7"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16151","text":"\u5728\u5f00\u53d1\u63d2\u4ef6\u671f\u95f4\uff0c\u4f60\u7ecf\u5e38\u9700\u8981\u5728QGIS\u4e2d\u91cd\u65b0\u52a0\u8f7d\u5b83\u4ee5\u8fdb\u884c\u6d4b\u8bd5\u3002\u4f7f\u7528**Plugin Reloader**\u63d2\u4ef6\u975e\u5e38\u5bb9\u6613\u3002\u4f60\u53ef\u4ee5\u5728 \u63d2\u4ef6\u7ba1\u7406\u5668 \u4e2d\u627e\u5230\u5b83\u3002","title":"16.1.5.1 \u63d2\u4ef6\u91cd\u8f7d"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16152","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528python\u4eceQGIS\u4e2d\u8bbf\u95ee\u6240\u6709\u5df2\u5b89\u88c5\u63d2\u4ef6\u7c7b\uff0c\u8fd9\u53ef\u4ee5\u65b9\u4fbf\u8c03\u8bd5\uff1a 1 my_plugin = qgis . utils . plugins [ 'My Plugin' ]","title":"16.1.5.2 \u8bbf\u95ee\u63d2\u4ef6"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16153","text":"\u63d2\u4ef6\u5728 \u65e5\u5fd7\u6d88\u606f\u9762\u677f\u4e2d \u6709\u81ea\u5df1\u7684\u9009\u9879\u5361\u3002","title":"16.1.5.3 \u65e5\u5fd7\u6d88\u606f"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16154","text":"QGIS\u5728\u63d2\u4ef6\u4ed3\u5e93\u4e2d\u6258\u7ba1\u4e86\u6570\u767e\u4e2a\u63d2\u4ef6\u3002\u8003\u8651\u5206\u4eab\u4f60\u7684\u63d2\u4ef6\uff01\u5b83\u5c06\u6269\u5c55QGIS\uff0c\u4eba\u4eec\u5c06\u80fd\u591f\u4ece\u4f60\u7684\u4ee3\u7801\u4e2d\u5b66\u4e60\u3002\u53ef\u4ee5\u4f7f\u7528\u63d2\u4ef6\u7ba1\u7406\u5668\u5728QGIS\u4e2d\u627e\u5230\u5e76\u5b89\u88c5\u6240\u6709\u6258\u7ba1\u7684\u63d2\u4ef6\u3002 \u4fe1\u606f\u548c\u8981\u6c42\uff1a plugins.qgis.org \u3002","title":"16.1.5.4 \u5206\u4eab\u4f60\u7684\u63d2\u4ef6"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#162","text":"\u672c\u8282\u4ee5\u4ee3\u7801\u7247\u6bb5\u4e3a\u4f8b\uff0c\u8bb2\u89e3\u63d2\u4ef6\u5f00\u53d1","title":"16.2 \u4ee3\u7801\u7247\u6bb5"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#1621","text":"\u5728 initGui() \u4e2d\u6dfb\u52a0\uff1a 1 2 3 4 self . key_action = QAction ( \"Test Plugin\" , self . iface . mainWindow ()) self . iface . registerMainWindowAction ( self . key_action , \"Ctrl+I\" ) # \u64cd\u4f5c\u88abCtrl+I\u89e6\u53d1 self . iface . addPluginToMenu ( \"&Test plugins\" , self . key_action ) self . key_action . triggered . connect ( self . key_action_triggered ) \u5728 unload() \u4e2d\u6dfb\u52a0\uff1a 1 self . iface . unregisterMainWindowAction ( self . keyAction ) \u6309\u4e0b CTRL+I \u65f6\u8c03\u7528\u65b9\u6cd5\uff1a 1 2 def key_action_triggered ( self ): QMessageBox . information ( self . iface . mainWindow (), \"Ok\" , \"You pressed Ctrl+I\" )","title":"16.2.1 \u5982\u4f55\u901a\u8fc7\u5feb\u6377\u952e\u8c03\u7528\u65b9\u6cd5"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#1622","text":"\u56fe\u4f8b\u4e2d\u6709\u4e00\u4e2a\u8bbf\u95ee\u56fe\u5c42\u7684API\u3002\u4e0b\u9762\u662f\u5982\u4f55\u5207\u6362\u5f53\u524d\u56fe\u5c42\u53ef\u89c1\u6027\u7684\u793a\u4f8b\uff1a 1 2 3 4 root = QgsProject . instance () . layerTreeRoot () node = root . findLayer ( iface . activeLayer () . id ()) new_state = Qt . Checked if node . isVisible () == Qt . Unchecked else Qt . Unchecked node . setItemVisibilityChecked ( new_state )","title":"16.2.2 \u5982\u4f55\u5207\u6362\u56fe\u5c42"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#1623","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def change_value ( value ): \"\"\"\u6539\u53d8\u6240\u9009\u8981\u7d20\u7b2c\u4e8c\u5b57\u6bb5\u503c :param value: The new value. \"\"\" layer = iface . activeLayer () if layer : count_selected = layer . selectedFeatureCount () if count_selected > 0 : layer . startEditing () id_features = layer . selectedFeatureIds () for i in id_features : layer . changeAttributeValue ( i , 1 , value ) # 1 being the second column layer . commitChanges () else : iface . messageBar () . pushCritical ( \"Error\" , \"Please select at least one feature from current layer\" ) else : iface . messageBar () . pushCritical ( \"Error\" , \"Please select a layer\" ) # \u8be5\u65b9\u6cd5\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff08\u6240\u9009\u8981\u7d20\u7b2c\u4e8c\u4e2a\u5b57\u6bb5\u7684\u65b0\u503c\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff1a changeValue ( 50 )","title":"16.2.3 \u5982\u4f55\u8bbf\u95ee\u6240\u9009\u8981\u7d20\u7684\u5c5e\u6027\u8868"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#1624","text":"\u4f60\u53ef\u4ee5\u5728**\u8bbe\u7f6e\u2023\u9009\u9879**\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u63d2\u4ef6\u9009\u9879\u6807\u7b7e\u3002\u8fd9\u6bd4\u4e3a\u4f60\u7684\u63d2\u4ef6\u9009\u9879\u6dfb\u52a0\u4e00\u4e2a\u7279\u5b9a\u7684\u4e3b\u83dc\u5355\u6761\u76ee\u66f4\u53ef\u53d6\uff0c\u56e0\u4e3a\u5b83\u5c06\u6240\u6709\u7684QGIS\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u548c\u63d2\u4ef6\u8bbe\u7f6e\u4fdd\u5b58\u5728\u4e00\u4e2a\u5355\u4e00\u7684\u5730\u65b9\uff0c\u4fbf\u4e8e\u7528\u6237\u53d1\u73b0\u548c\u5bfc\u822a\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5c06\u4e3a\u63d2\u4ef6\u7684\u8bbe\u7f6e\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u7a7a\u767d\u9009\u9879\u5361\uff0c\u4e3a\u4f60\u586b\u5145\u6240\u6709\u9009\u9879\u548c\u4f60\u7684\u63d2\u4ef6\u7279\u5b9a\u8bbe\u7f6e\u505a\u597d\u51c6\u5907\u3002\u4f60\u53ef\u4ee5\u5c06\u4e0b\u9762\u7684\u7c7b\u62c6\u5206\u6210\u4e0d\u540c\u7684\u6587\u4ef6\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5728mainPlugin.py\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e86\u4e24\u4e2a\u7c7b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class MyPluginOptionsFactory ( QgsOptionsWidgetFactory ): def __init__ ( self ): super () . __init__ () def icon ( self ): return QIcon ( 'icons/my_plugin_icon.svg' ) def createWidget ( self , parent ): return ConfigOptionsPage ( parent ) class ConfigOptionsPage ( QgsOptionsPageWidget ): def __init__ ( self , parent ): super () . __init__ ( parent ) layout = QHBoxLayout () layout . setContentsMargins ( 0 , 0 , 0 , 0 ) self . setLayout ( layout ) \u6700\u540e\u6211\u4eec\u6dfb\u52a0\u5bfc\u5165\u548c\u4fee\u6539 __init__ \u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from qgis.gui import QgsOptionsWidgetFactory , QgsOptionsPageWidget class MyPlugin : def __init__ ( self , iface ): \"\"\"\u6784\u9020\u51fd\u6570. :param iface: \u5c06\u4f20\u9012\u7ed9\u8be5\u7c7b\u7684\u63a5\u53e3\u5b9e\u4f8b\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u94a9\u5b50\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b83\u6765\u64cd\u4f5cQGIS\u8fd0\u884c\u65f6\u5e94\u7528\u7a0b\u5e8f\u3002 :type iface: QgsInterface \"\"\" # \u4fdd\u5b58\u5f15\u7528 self . iface = iface def initGui ( self ): self . options_factory = MyPluginOptionsFactory () self . options_factory . setTitle ( self . tr ( 'My Plugin' )) iface . registerOptionsWidgetFactory ( self . options_factory ) def unload ( self ): iface . unregisterOptionsWidgetFactory ( self . options_factory ) \u63d0\u793a \u5c06\u81ea\u5b9a\u4e49\u9009\u9879\u5361\u6dfb\u52a0\u5230\u77e2\u91cf\u56fe\u5c42\u5c5e\u6027\u5bf9\u8bdd\u6846 \u4f60\u53ef\u4ee5\u5e94\u7528\u7c7b\u4f3c\u7684\u903b\u8f91\uff0c\u4f7f\u7528 QgsMapLayerConfigWidgetFactory \u548c QgsMapLayerConfigWidget \u7c7b\u5c06\u63d2\u4ef6\u81ea\u5b9a\u4e49\u9009\u9879\u6dfb\u52a0\u5230\u56fe\u5c42\u5c5e\u6027\u5bf9\u8bdd\u6846\u4e2d\u3002","title":"16.2.4 \u9009\u9879\u5bf9\u8bdd\u6846\u4e2d\u7684\u63d2\u4ef6\u63a5\u53e3"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#163-ide","text":"TODO","title":"16.3 \u7f16\u5199\u548c\u8c03\u8bd5\u63d2\u4ef6\u7684IDE\u8bbe\u7f6e"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#164","text":"\u4e00\u65e6\u4f60\u7684\u63d2\u4ef6\u51c6\u5907\u597d\u4e86\uff0c\u5e76\u4e14\u4f60\u8ba4\u4e3a\u8fd9\u4e2a\u63d2\u4ef6\u53ef\u80fd\u5bf9\u67d0\u4e9b\u4eba\u6709\u5e2e\u52a9\uff0c\u4e0d\u8981\u72b9\u8c6b\uff0c\u628a\u5b83\u4e0a\u4f20\u5230 \u5b98\u65b9Python\u63d2\u4ef6\u4ed3\u5e93 \u3002\u5728\u8be5\u9875\u9762\u4e0a\uff0c\u4f60\u8fd8\u53ef\u4ee5\u627e\u5230\u5173\u4e8e\u5982\u4f55\u51c6\u5907\u63d2\u4ef6\u4ee5\u4e0e\u63d2\u4ef6\u5b89\u88c5\u7a0b\u5e8f\u826f\u597d\u914d\u5408\u7684\u6253\u5305\u6307\u5357\u3002\u6216\u8005\uff0c\u5982\u679c\u4f60\u60f3\u5efa\u7acb\u81ea\u5df1\u7684\u63d2\u4ef6\u5e93\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684XML\u6587\u4ef6\uff0c\u5217\u51fa\u63d2\u4ef6\u53ca\u5176\u5143\u6570\u636e\u3002 \u8bf7\u7279\u522b\u6ce8\u610f\u4e00\u4e0b\u5efa\u8bae\uff1a","title":"16.4 \u53d1\u5e03\u4f60\u7684\u63d2\u4ef6"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#1641","text":"\u907f\u514d\u4f7f\u7528\u4e0e\u73b0\u6709\u63d2\u4ef6\u8fc7\u4e8e\u76f8\u4f3c\u7684\u540d\u79f0 \u5982\u679c\u4f60\u7684\u63d2\u4ef6\u4e0e\u73b0\u6709\u7684\u63d2\u4ef6\u6709\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u8bf7\u5728 \"\u5173\u4e8e \"\u4e00\u680f\u4e2d\u89e3\u91ca\u5176\u533a\u522b\uff0c\u8fd9\u6837\u7528\u6237\u5c31\u4f1a\u77e5\u9053\u4f7f\u7528\u54ea\u4e00\u4e2a\uff0c\u800c\u4e0d\u9700\u8981\u5b89\u88c5\u548c\u6d4b\u8bd5\u3002 \u907f\u514d\u5728\u63d2\u4ef6\u672c\u8eab\u7684\u540d\u79f0\u4e2d\u91cd\u590d\u4f7f\u7528\"plugin\"\u3002 \u4f7f\u7528\u5143\u6570\u636e\u4e2d\u7684\u63cf\u8ff0\u5b57\u6bb5\u8fdb\u884c\u5355\u884c\u63cf\u8ff0\uff0c\u4f7f\u7528\u5173\u4e8e\u5b57\u6bb5\u8fdb\u884c\u66f4\u8be6\u7ec6\u7684\u8bf4\u660e \u5305\u62ec\u4e00\u4e2a\u4ee3\u7801\u5e93\u3001\u4e00\u4e2a\u9519\u8bef\u8ddf\u8e2a\u5668\u548c\u4e00\u4e2a\u4e3b\u9875\uff1b\u8fd9\u5c06\u6781\u5927\u5730\u63d0\u9ad8\u5408\u4f5c\u7684\u53ef\u80fd\u6027\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u73b0\u6709\u7684\u7f51\u7edc\u57fa\u7840\u8bbe\u65bd\uff08GitHub\u3001GitLab\u3001Bitbucket\u7b49\uff09\u975e\u5e38\u5bb9\u6613\u5730\u5b8c\u6210\u3002 \u8c28\u614e\u9009\u62e9\u6807\u7b7e\uff1a\u907f\u514d\u4e0d\u5177\u53c2\u8003\u4ef7\u503c\u7684\u6807\u7b7e\uff08\u5982vector\uff09\uff0c\u6700\u597d\u9009\u62e9\u5df2\u7ecf\u88ab\u4ed6\u4eba\u4f7f\u7528\u7684\u6807\u7b7e\uff08\u89c1\u63d2\u4ef6\u7f51\u7ad9\uff09\u3002 \u6dfb\u52a0\u4e00\u4e2a\u5408\u9002\u7684\u56fe\u6807\uff0c\u4e0d\u8981\u4f7f\u7528\u9ed8\u8ba4\u7684\u56fe\u6807\uff1b\u53c2\u89c1QGIS\u754c\u9762\uff0c\u4e86\u89e3\u8981\u4f7f\u7528\u7684\u98ce\u683c\u5efa\u8bae","title":"16.4.1 \u5143\u6570\u636e\u548c\u540d\u79f0"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#1642","text":"\u4e0d\u8981\u628a\u751f\u6210\u7684\u6587\u4ef6\uff08ui_*.py, resources_rc.py, \u751f\u6210\u7684\u5e2e\u52a9\u6587\u4ef6...\uff09\u548c\u65e0\u7528\u7684\u4e1c\u897f\uff08\u5982.gitignore\uff09\u5305\u62ec\u5728\u7248\u672c\u5e93\u4e2d \u5c06\u63d2\u4ef6\u6dfb\u52a0\u5230\u9002\u5f53\u7684\u83dc\u5355\u4e2d\uff08Vector, Raster, Web, Database\uff09\u3002 \u5728\u9002\u5f53\u7684\u65f6\u5019\uff08\u6267\u884c\u5206\u6790\u7684\u63d2\u4ef6\uff09\uff0c\u8003\u8651\u5c06\u63d2\u4ef6\u6dfb\u52a0\u4e3aProcessing\u6846\u67b6\u7684\u5b50\u63d2\u4ef6\uff1a\u8fd9\u5c06\u5141\u8bb8\u7528\u6237\u6279\u91cf\u8fd0\u884c\u5b83\uff0c\u5c06\u5b83\u96c6\u6210\u5230\u66f4\u590d\u6742\u7684\u5de5\u4f5c\u6d41\u4e2d\uff0c\u5e76\u5c06\u4f60\u4ece\u8bbe\u8ba1\u754c\u9762\u7684\u8d1f\u62c5\u4e2d\u89e3\u653e\u51fa\u6765 \u81f3\u5c11\u5305\u62ec\u6700\u57fa\u672c\u7684\u6587\u6863\uff0c\u5982\u679c\u5bf9\u6d4b\u8bd5\u548c\u7406\u89e3\u6709\u7528\u7684\u8bdd\uff0c\u8fd8\u5305\u62ec\u6837\u672c\u6570\u636e\u3002","title":"16.4.2 \u4ee3\u7801\u548c\u5e2e\u52a9"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#1643-python","text":"\u4f60\u53ef\u4ee5\u627e\u5230\u5b98\u65b9python\u63d2\u4ef6\u4ed3\u5e93\uff1a https://plugins.qgis.org/ \u3002 \u4e3a\u4e86\u4f7f\u7528\u5b98\u65b9python\u63d2\u4ef6\u4ed3\u5e93\uff0c\u4f60\u5fc5\u987b\u4ece OSGEO web portal \u83b7\u5f97OSGEO ID\u3002 \u4e00\u65e6\u4f60\u4e0a\u4f20\u4e86\u4f60\u7684\u63d2\u4ef6\uff0c\u5b83\u5c06\u5f97\u5230\u4e00\u4e2a\u5de5\u4f5c\u4eba\u5458\u7684\u6279\u51c6\uff0c\u4f60\u4f1a\u5f97\u5230\u901a\u77e5\u3002","title":"16.4.3 \u5b98\u65b9python\u63d2\u4ef6\u4ed3\u5e93"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16431","text":"\u8fd9\u4e9b\u89c4\u5219\u5df2\u7ecf\u5728\u5b98\u65b9\u63d2\u4ef6\u5e93\u4e2d\u5b9e\u73b0\uff1a \u6bcf\u4e2a\u6ce8\u518c\u7528\u6237\u90fd\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u63d2\u4ef6 \u5458\u5de5\u7528\u6237\u53ef\u4ee5\u6279\u51c6\u6216\u4e0d\u6279\u51c6\u6240\u6709\u7684\u63d2\u4ef6\u7248\u672c \u62e5\u6709\u7279\u6b8a\u6743\u9650 plugins.can_approve \u7684\u7528\u6237\u53ef\u4ee5\u81ea\u52a8\u6279\u51c6\u4ed6\u4eec\u4e0a\u4f20\u7684\u7248\u672c \u62e5\u6709\u7279\u6b8a\u6743\u9650 plugins.can_approve \u7684\u7528\u6237\u53ef\u4ee5\u6279\u51c6\u5176\u4ed6\u4eba\u4e0a\u4f20\u7684\u7248\u672c\uff0c\u53ea\u8981\u4ed6\u4eec\u5728\u63d2\u4ef6\u6240\u6709\u8005\u7684\u5217\u8868\u4e2d\u3002 \u4e00\u4e2a\u7279\u5b9a\u7684\u63d2\u4ef6\u53ea\u80fd\u7531\u5458\u5de5\u7528\u6237\u548c\u63d2\u4ef6\u6240\u6709\u8005\u5220\u9664\u548c\u7f16\u8f91\u3002 \u5982\u679c\u4e00\u4e2a\u6ca1\u6709 plugins.can_approve \u6743\u9650\u7684\u7528\u6237\u4e0a\u4f20\u4e86\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff0c\u8be5\u63d2\u4ef6\u7684\u7248\u672c\u4f1a\u81ea\u52a8\u53d6\u6d88\u5ba1\u6279\u3002","title":"16.4.3.1 \u6743\u9650"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16432","text":"\u5de5\u4f5c\u4eba\u5458\u53ef\u4ee5\u901a\u8fc7\u524d\u7aef\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e plugins.can_approve \u6743\u9650\uff0c\u5411\u9009\u5b9a\u7684\u63d2\u4ef6\u521b\u5efa\u8005\u6388\u4e88\u4fe1\u4efb\u3002 \u63d2\u4ef6\u8be6\u60c5\u89c6\u56fe\u63d0\u4f9b\u4e86\u76f4\u63a5\u94fe\u63a5\uff0c\u4ee5\u6388\u4e88\u5bf9\u63d2\u4ef6\u521b\u5efa\u8005\u6216\u63d2\u4ef6\u6240\u6709\u8005\u7684\u4fe1\u4efb\u3002","title":"16.4.3.2 \u4fe1\u4efb\u7ba1\u7406"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16433","text":"\u5728\u4e0a\u4f20\u63d2\u4ef6\u65f6\uff0c\u63d2\u4ef6\u7684\u5143\u6570\u636e\u4f1a\u81ea\u52a8\u4ece\u538b\u7f29\u5305\u4e2d\u5bfc\u5165\u5e76\u8fdb\u884c\u9a8c\u8bc1\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u9a8c\u8bc1\u89c4\u5219\uff0c\u5f53\u4f60\u60f3\u5728\u5b98\u65b9\u4ed3\u5e93\u4e0a\u4f20\u4e00\u4e2a\u63d2\u4ef6\u65f6\uff0c\u4f60\u5e94\u8be5\u6ce8\u610f\uff1a \u5305\u542b\u63d2\u4ef6\u7684\u4e3b\u6587\u4ef6\u5939\u7684\u540d\u79f0\u5fc5\u987b\u53ea\u5305\u542bASCII\u5b57\u7b26\uff08A-Z\u548ca-z\uff09\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\uff08_\uff09\u548c\u51cf\u53f7\uff08-\uff09\uff0c\u800c\u4e14\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\u3002 metadata.txt \u662f\u5fc5\u9700\u7684 \u5143\u6570\u636e\u8868\u4e2d\u5217\u51fa\u7684\u6240\u6709\u5fc5\u9700\u7684\u5143\u6570\u636e\u90fd\u5fc5\u987b\u5b58\u5728 \u5143\u6570\u636e version \u5b57\u6bb5\u5fc5\u987b\u662f\u552f\u4e00\u7684","title":"16.4.3.3 \u9a8c\u8bc1"},{"location":"16-%E5%BC%80%E5%8F%91Python%E6%8F%92%E4%BB%B6/#16434","text":"\u6309\u7167\u9a8c\u8bc1\u89c4\u5219\uff0c\u4f60\u7684\u63d2\u4ef6\u7684\u538b\u7f29\u5305\uff08.zip\uff09\u5fc5\u987b\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u7ed3\u6784\uff0c\u624d\u80fd\u4f5c\u4e3a\u4e00\u4e2a\u529f\u80fd\u6027\u63d2\u4ef6\u8fdb\u884c\u9a8c\u8bc1\u3002\u7531\u4e8e\u8be5\u63d2\u4ef6\u5c06\u88ab\u89e3\u538b\u5728\u7528\u6237\u7684plugins\u6587\u4ef6\u5939\u5185\uff0c\u5b83\u5fc5\u987b\u5728.zip\u6587\u4ef6\u5185\u6709\u81ea\u5df1\u7684\u76ee\u5f55\uff0c\u4ee5\u4e0d\u5e72\u6270\u5176\u4ed6\u63d2\u4ef6\u3002\u5fc5\u9700\u7684\u6587\u4ef6\u6709\uff1a metadata.txt \u548c __init__.py \u3002\u4f46\u5982\u679c\u80fd\u6709\u4e00\u4e2aREADME\uff0c\u5f53\u7136\u8fd8\u6709\u4e00\u4e2a\u4ee3\u8868\u8be5\u63d2\u4ef6\u7684\u56fe\u6807\uff08resources.qrc\uff09\uff0c\u90a3\u5c31\u66f4\u597d\u4e86\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2aplugin.zip\u7684\u4f8b\u5b50\uff0c\u5b83\u5e94\u8be5\u662f\u8fd9\u6837\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 plugin.zip pluginfolder/ |-- i18n | |-- translation_file_de.ts |-- img | |-- icon.png | `-- iconsource.svg |-- __init__.py |-- Makefile |-- metadata.txt |-- more_code.py |-- main_code.py |-- README |-- resources.qrc |-- resources_rc.py `-- ui_Qt_user_interface_file.ui","title":"16.4.3.4 \u63d2\u4ef6\u7ed3\u6784"},{"location":"17-%E7%BC%96%E5%86%99%E5%A4%84%E7%90%86%E6%8F%92%E4%BB%B6/","text":"17 \u7f16\u5199\u5904\u7406\u63d2\u4ef6 \u2693\ufe0e \u53d6\u51b3\u4e8e\u4f60\u5c06\u5f00\u53d1\u7684\u63d2\u4ef6\u7c7b\u578b\uff0c\u5b83\u53ef\u80fd\u662f\u66f4\u597d\u7684\u9009\u62e9\u2014\u4f5c\u4e3a\u5904\u7406\u7b97\u6cd5\uff08\u6216\u8005\u7b97\u6cd5\u96c6\u5408\uff09\u53bb\u589e\u52a0\u529f\u80fd\u3002\u8fd9\u5c06\u5728QGIS\u4e2d\u63d0\u4f9b\u7ed9\u66f4\u597d\u7684\u96c6\u6210\uff0c\u989d\u5916\u7684\u529f\u80fd\uff08\u5b83\u53ef\u4ee5\u8fd0\u884c\u5728\u5904\u7406\u7ec4\u4ef6\u4e2d\uff0c\u5982\u5efa\u6a21\u6216\u6279\u5904\u7406\u754c\u9762\u8fd0\u884c\uff09\uff0c\u548c\u66f4\u5feb\u7684\u5f00\u53d1\u65f6\u95f4\uff08\u5904\u7406\u5c06\u82b1\u8d39\u7684\u5f88\u5927\u4e00\u90e8\u5206\u5de5\u4f5c\uff09\u3002 \u4e3a\u4e86\u5206\u53d1\u8fd9\u4e9b\u7b97\u6cd5\uff0c\u4f60\u5e94\u8be5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u63d2\u4ef6\uff0c\u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u5904\u7406\u5de5\u5177\u7bb1\u3002\u8be5\u63d2\u4ef6\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u7b97\u6cd5\u63d0\u4f9b\u8005\uff0c\u5b83\u5728\u63d2\u4ef6\u5b9e\u4f8b\u5316\u65f6\u8fdb\u884c\u6ce8\u518c\u3002 17.1 \u4ece\u5934\u5f00\u59cb\u521b\u5efa \u2693\ufe0e \u4ece\u5934\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a\u63d2\u4ef6\uff0c\u5b83\u5305\u542b\u4e00\u4e2a\u7b97\u6cd5\u63d0\u4f9b\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u63d2\u4ef6\u6784\u9020\u5668\uff0c\u6309\u7167\u4e0b\u5217\u6b65\u9aa4\u64cd\u4f5c\uff1a \u5b89\u88c5 Plugin Builder \u63d2\u4ef6 \u4f7f\u7528 Plugin Builder \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u63d2\u4ef6\u3002\u5f53 Plugin Builder \u8981\u6c42\u4f60\u4f7f\u7528\u6a21\u677f\u65f6\uff0c\u9009\u62e9\u201cProcessing provider\u201d\u3002 \u521b\u5efa\u7684\u63d2\u4ef6\u5305\u542b\u4e00\u4e2a\u7b97\u6cd5\u63d0\u4f9b\u8005\u3002\u65e0\u8bba\u662f\u63d0\u4f9b\u8005\u6587\u4ef6\u548c\u7b97\u6cd5\u6587\u4ef6\u90fd\u88ab\u5b8c\u5168\u6ce8\u91ca\uff0c\u5e76\u5305\u542b\u6709\u5173\u5982\u4f55\u4fee\u6539\u63d0\u4f9b\u8005\uff0c\u5e76\u6dfb\u52a0\u989d\u5916\u7684\u7b97\u6cd5\u7684\u4fe1\u606f\u3002\u53c2\u8003\u5b83\u4eec\u4ee5\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002 17.2 \u66f4\u65b0\u63d2\u4ef6 \u2693\ufe0e \u5982\u679c\u4f60\u60f3\u6dfb\u52a0\u4f60\u73b0\u6709\u7684\u63d2\u4ef6\u5230\u201cProcessing\u201d\uff0c\u4f60\u9700\u8981\u6dfb\u52a0\u4e00\u4e9b\u4ee3\u7801\u3002 \u5728\u4f60\u7684 metadata.txt \uff0c\u4f60\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u53d8\u91cf\uff1a 1 hasProcessingProvider = yes \u5728Python\u6587\u4ef6\u4e2d\uff0c\u63d2\u4ef6\u4f7f\u7528 initGui \u65b9\u6cd5\u5b89\u88c5\uff0c\u4f60\u9700\u8981\u6539\u5199\u8fd9\u6837\u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from qgis.core import QgsApplication from .processing_provider import Provider class YourPluginName (): def __init__ ( self ): self . provider = None def initProcessing ( self ): self . provider = Provider () QgsApplication . processingRegistry () . addProvider ( self . provider ) def initGui ( self ): self . initProcessing () def unload ( self ): QgsApplication . processingRegistry () . removeProvider ( self . provider ) \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a processing_provider \u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u5305\u542b\u4e09\u4e2a\u6587\u4ef6 __init__.py \u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u3002\u8fd9\u662fPython\u5305\u6240\u5fc5\u9700\u7684\u3002 provider.py \u8fd9\u5c06\u521b\u5efa\u5904\u7406\u63d0\u4f9b\u8005\u5e76\u516c\u5f00\u4f60\u7684\u7b97\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 from qgis.core import QgsProcessingProvider from .example_processing_algorithm import ExampleProcessingAlgorithm class Provider ( QgsProcessingProvider ): def loadAlgorithms ( self , * args , ** kwargs ): self . addAlgorithm ( ExampleProcessingAlgorithm ()) # \u5728\u8fd9\u91cc\u6dfb\u52a0\u5176\u4ed6\u7b97\u6cd5 # self.addAlgorithm(MyOtherAlgorithm()) def id ( self , * args , ** kwargs ): \"\"\"\u63d2\u4ef6\u7684ID\uff0c\u7528\u4e8e\u6807\u8bc6\u63d0\u4f9b\u8005\u3002 \u8be5\u5b57\u7b26\u4e32\u5e94\u8be5\u662f\u552f\u4e00\u7684\uff0c\u77ed\u7684\uff0c\u4ec5\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\u201cqgis\u201d\u6216\u201cgdal\u201d\u3002\u6b64\u5b57\u7b26\u4e32\u4e0d\u5e94\u88ab\u7ffb\u8bd1\uff08localised\uff09\u3002 \"\"\" return 'yourplugin' def name ( self , * args , ** kwargs ): \"\"\"\u63d2\u4ef6\u7684\u4eba\u6027\u5316\u540d\u79f0\u3002 \u8be5\u5b57\u7b26\u4e32\u5e94\u5c3d\u53ef\u80fd\u77ed\uff08\u4f8b\u5982\u201cLastools\u201d\uff0c\u800c\u4e0d\u662f\"Lastools version 1.0.1 64-bit\")\uff0c\u5e76\u4e14\u9700\u8981\u7ffb\u8bd1\uff08localised\uff09\u3002 \"\"\" return self . tr ( 'Your plugin' ) def icon ( self ): \"\"\"\u5e94\u8be5\u8fd4\u56de\u7528\u4e8e\u5904\u7406\u5de5\u5177\u7bb1\u4e2d\u63d0\u4f9b\u8005\u7684QIcon\u3002 \"\"\" return QgsProcessingProvider . icon ( self ) example_processing_algorithm.py \uff0c\u5176\u4e2d\u5305\u542b\u793a\u4f8b\u7b97\u6cd5\u6587\u4ef6\u3002\u590d\u5236/\u7c98\u8d34 \u6a21\u677f\u6587\u4ef6 \u4e2d\u7684\u5185\u5bb9\uff0c\u5e76\u6839\u636e\u9700\u8981\u66f4\u65b0\u5b83\u3002 \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u5728QGIS\u4e2d\u91cd\u65b0\u52a0\u8f7d\u63d2\u4ef6\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u5728\u5904\u7406\u5de5\u5177\u7bb1\u548c\u6a21\u578b\u4e2d\u770b\u5230\u4f60\u7684\u793a\u4f8b\u811a\u672c\u3002","title":"17-\u7f16\u5199\u5904\u7406\u63d2\u4ef6"},{"location":"17-%E7%BC%96%E5%86%99%E5%A4%84%E7%90%86%E6%8F%92%E4%BB%B6/#17","text":"\u53d6\u51b3\u4e8e\u4f60\u5c06\u5f00\u53d1\u7684\u63d2\u4ef6\u7c7b\u578b\uff0c\u5b83\u53ef\u80fd\u662f\u66f4\u597d\u7684\u9009\u62e9\u2014\u4f5c\u4e3a\u5904\u7406\u7b97\u6cd5\uff08\u6216\u8005\u7b97\u6cd5\u96c6\u5408\uff09\u53bb\u589e\u52a0\u529f\u80fd\u3002\u8fd9\u5c06\u5728QGIS\u4e2d\u63d0\u4f9b\u7ed9\u66f4\u597d\u7684\u96c6\u6210\uff0c\u989d\u5916\u7684\u529f\u80fd\uff08\u5b83\u53ef\u4ee5\u8fd0\u884c\u5728\u5904\u7406\u7ec4\u4ef6\u4e2d\uff0c\u5982\u5efa\u6a21\u6216\u6279\u5904\u7406\u754c\u9762\u8fd0\u884c\uff09\uff0c\u548c\u66f4\u5feb\u7684\u5f00\u53d1\u65f6\u95f4\uff08\u5904\u7406\u5c06\u82b1\u8d39\u7684\u5f88\u5927\u4e00\u90e8\u5206\u5de5\u4f5c\uff09\u3002 \u4e3a\u4e86\u5206\u53d1\u8fd9\u4e9b\u7b97\u6cd5\uff0c\u4f60\u5e94\u8be5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u63d2\u4ef6\uff0c\u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u5904\u7406\u5de5\u5177\u7bb1\u3002\u8be5\u63d2\u4ef6\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u7b97\u6cd5\u63d0\u4f9b\u8005\uff0c\u5b83\u5728\u63d2\u4ef6\u5b9e\u4f8b\u5316\u65f6\u8fdb\u884c\u6ce8\u518c\u3002","title":"17 \u7f16\u5199\u5904\u7406\u63d2\u4ef6"},{"location":"17-%E7%BC%96%E5%86%99%E5%A4%84%E7%90%86%E6%8F%92%E4%BB%B6/#171","text":"\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a\u63d2\u4ef6\uff0c\u5b83\u5305\u542b\u4e00\u4e2a\u7b97\u6cd5\u63d0\u4f9b\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u63d2\u4ef6\u6784\u9020\u5668\uff0c\u6309\u7167\u4e0b\u5217\u6b65\u9aa4\u64cd\u4f5c\uff1a \u5b89\u88c5 Plugin Builder \u63d2\u4ef6 \u4f7f\u7528 Plugin Builder \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u63d2\u4ef6\u3002\u5f53 Plugin Builder \u8981\u6c42\u4f60\u4f7f\u7528\u6a21\u677f\u65f6\uff0c\u9009\u62e9\u201cProcessing provider\u201d\u3002 \u521b\u5efa\u7684\u63d2\u4ef6\u5305\u542b\u4e00\u4e2a\u7b97\u6cd5\u63d0\u4f9b\u8005\u3002\u65e0\u8bba\u662f\u63d0\u4f9b\u8005\u6587\u4ef6\u548c\u7b97\u6cd5\u6587\u4ef6\u90fd\u88ab\u5b8c\u5168\u6ce8\u91ca\uff0c\u5e76\u5305\u542b\u6709\u5173\u5982\u4f55\u4fee\u6539\u63d0\u4f9b\u8005\uff0c\u5e76\u6dfb\u52a0\u989d\u5916\u7684\u7b97\u6cd5\u7684\u4fe1\u606f\u3002\u53c2\u8003\u5b83\u4eec\u4ee5\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002","title":"17.1 \u4ece\u5934\u5f00\u59cb\u521b\u5efa"},{"location":"17-%E7%BC%96%E5%86%99%E5%A4%84%E7%90%86%E6%8F%92%E4%BB%B6/#172","text":"\u5982\u679c\u4f60\u60f3\u6dfb\u52a0\u4f60\u73b0\u6709\u7684\u63d2\u4ef6\u5230\u201cProcessing\u201d\uff0c\u4f60\u9700\u8981\u6dfb\u52a0\u4e00\u4e9b\u4ee3\u7801\u3002 \u5728\u4f60\u7684 metadata.txt \uff0c\u4f60\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u53d8\u91cf\uff1a 1 hasProcessingProvider = yes \u5728Python\u6587\u4ef6\u4e2d\uff0c\u63d2\u4ef6\u4f7f\u7528 initGui \u65b9\u6cd5\u5b89\u88c5\uff0c\u4f60\u9700\u8981\u6539\u5199\u8fd9\u6837\u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from qgis.core import QgsApplication from .processing_provider import Provider class YourPluginName (): def __init__ ( self ): self . provider = None def initProcessing ( self ): self . provider = Provider () QgsApplication . processingRegistry () . addProvider ( self . provider ) def initGui ( self ): self . initProcessing () def unload ( self ): QgsApplication . processingRegistry () . removeProvider ( self . provider ) \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a processing_provider \u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u5305\u542b\u4e09\u4e2a\u6587\u4ef6 __init__.py \u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u3002\u8fd9\u662fPython\u5305\u6240\u5fc5\u9700\u7684\u3002 provider.py \u8fd9\u5c06\u521b\u5efa\u5904\u7406\u63d0\u4f9b\u8005\u5e76\u516c\u5f00\u4f60\u7684\u7b97\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 from qgis.core import QgsProcessingProvider from .example_processing_algorithm import ExampleProcessingAlgorithm class Provider ( QgsProcessingProvider ): def loadAlgorithms ( self , * args , ** kwargs ): self . addAlgorithm ( ExampleProcessingAlgorithm ()) # \u5728\u8fd9\u91cc\u6dfb\u52a0\u5176\u4ed6\u7b97\u6cd5 # self.addAlgorithm(MyOtherAlgorithm()) def id ( self , * args , ** kwargs ): \"\"\"\u63d2\u4ef6\u7684ID\uff0c\u7528\u4e8e\u6807\u8bc6\u63d0\u4f9b\u8005\u3002 \u8be5\u5b57\u7b26\u4e32\u5e94\u8be5\u662f\u552f\u4e00\u7684\uff0c\u77ed\u7684\uff0c\u4ec5\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\u201cqgis\u201d\u6216\u201cgdal\u201d\u3002\u6b64\u5b57\u7b26\u4e32\u4e0d\u5e94\u88ab\u7ffb\u8bd1\uff08localised\uff09\u3002 \"\"\" return 'yourplugin' def name ( self , * args , ** kwargs ): \"\"\"\u63d2\u4ef6\u7684\u4eba\u6027\u5316\u540d\u79f0\u3002 \u8be5\u5b57\u7b26\u4e32\u5e94\u5c3d\u53ef\u80fd\u77ed\uff08\u4f8b\u5982\u201cLastools\u201d\uff0c\u800c\u4e0d\u662f\"Lastools version 1.0.1 64-bit\")\uff0c\u5e76\u4e14\u9700\u8981\u7ffb\u8bd1\uff08localised\uff09\u3002 \"\"\" return self . tr ( 'Your plugin' ) def icon ( self ): \"\"\"\u5e94\u8be5\u8fd4\u56de\u7528\u4e8e\u5904\u7406\u5de5\u5177\u7bb1\u4e2d\u63d0\u4f9b\u8005\u7684QIcon\u3002 \"\"\" return QgsProcessingProvider . icon ( self ) example_processing_algorithm.py \uff0c\u5176\u4e2d\u5305\u542b\u793a\u4f8b\u7b97\u6cd5\u6587\u4ef6\u3002\u590d\u5236/\u7c98\u8d34 \u6a21\u677f\u6587\u4ef6 \u4e2d\u7684\u5185\u5bb9\uff0c\u5e76\u6839\u636e\u9700\u8981\u66f4\u65b0\u5b83\u3002 \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u5728QGIS\u4e2d\u91cd\u65b0\u52a0\u8f7d\u63d2\u4ef6\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u5728\u5904\u7406\u5de5\u5177\u7bb1\u548c\u6a21\u578b\u4e2d\u770b\u5230\u4f60\u7684\u793a\u4f8b\u811a\u672c\u3002","title":"17.2 \u66f4\u65b0\u63d2\u4ef6"},{"location":"18-%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E5%9B%BE%E5%B1%82/","text":"\u672c\u8282\u4ee3\u7801\u7247\u6bb5\u9700\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 from qgis.core import ( QgsPluginLayer , QgsPluginLayerType , QgsMapLayerRenderer , QgsApplication , QgsProject , ) from qgis.PyQt.QtGui import QImage 18 \u4f7f\u7528\u63d2\u4ef6\u56fe\u5c42 \u2693\ufe0e \u5982\u679c\u4f60\u7684\u63d2\u4ef6\u4f7f\u7528\u81ea\u5df1\u7684\u65b9\u6cd5\u6e32\u67d3\u56fe\u5c42\uff0c\u57fa\u4e8e QgsPluginLayer \u7f16\u5199\u4f60\u81ea\u5df1\u7684\u56fe\u5c42\u7c7b\u578b\u662f\u6700\u6709\u6548\u7684\u65b9\u5f0f\u3002 18.1 \u5b50\u7c7b\u5316QgsPluginLayer \u2693\ufe0e \u4e0b\u9762\u4f8b\u5b50\u662f QgsPluginLayer \u7684\u6700\u5c0f\u5b9e\u73b0\u3002\u5b83\u662f\u57fa\u4e8e Watermark example plugin \u7684\u539f\u7248\u5b9e\u73b0\u3002 \u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\u662f\u5b9e\u73b0\u753b\u5e03\u4e2d\u5b9e\u9645\u56fe\u5f62\u5de5\u5177\u7684\u4e00\u90e8\u5206\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class WatermarkLayerRenderer ( QgsMapLayerRenderer ): def __init__ ( self , layerId , rendererContext ): super () . __init__ ( layerId , rendererContext ) def render ( self ): image = QImage ( \"/usr/share/icons/hicolor/128x128/apps/qgis.png\" ) painter = self . renderContext () . painter () painter . save () painter . drawImage ( 10 , 10 , image ) painter . restore () return True class WatermarkPluginLayer ( QgsPluginLayer ): LAYER_TYPE = \"watermark\" def __init__ ( self ): super () . __init__ ( WatermarkPluginLayer . LAYER_TYPE , \"Watermark plugin layer\" ) self . setValid ( True ) def createMapRenderer ( self , rendererContext ): return WatermarkLayerRenderer ( self . id (), rendererContext ) def setTransformContext ( self , ct ): pass # \u53ef\u4ee5\u6dfb\u52a0\u8bfb\u5199\u9879\u76ee\u7279\u5b9a\u4fe1\u606f\u7684\u65b9\u6cd5 def readXml ( self , node , context ): pass def writeXml ( self , node , doc , context ): pass \u53ef\u4ee5\u5c06\u63d2\u4ef6\u56fe\u5c42\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\u5e76\u4f5c\u4e3a\u4efb\u4f55\u5176\u5b83\u56fe\u5c42\u6dfb\u52a0\u5230\u753b\u5e03\u4e2d\uff1a 1 2 plugin_layer = WatermarkPluginLayer () QgsProject . instance () . addMapLayer ( plugin_layer ) \u52a0\u8f7d\u5305\u542b\u6b64\u7c7b\u56fe\u5c42\u7684\u9879\u76ee\u65f6\uff0c\u9700\u8981\u5de5\u5382\u7c7b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class WatermarkPluginLayerType ( QgsPluginLayerType ): def __init__ ( self ): super () . __init__ ( WatermarkPluginLayer . LAYER_TYPE ) def createLayer ( self ): return WatermarkPluginLayer () # \u4f60\u53ef\u4ee5\u6dfb\u52a0GUI\u4ee3\u7801\u6765\u81ea\u5b9a\u4e49\u663e\u793a\u56fe\u5c42\u7684\u5c5e\u6027\u4fe1\u606f def showLayerProperties ( self , layer ): pass # \u4fdd\u6301\u5f15\u7528\u8be5\u5b9e\u4f8b\uff0c\u9632\u6b62\u88ab\u5783\u573e\u56de\u6536 plt = WatermarkPluginLayerType () assert QgsApplication . pluginLayerRegistry () . addPluginLayerType ( plt )","title":"18-\u4f7f\u7528\u63d2\u4ef6\u56fe\u5c42"},{"location":"18-%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E5%9B%BE%E5%B1%82/#18","text":"\u5982\u679c\u4f60\u7684\u63d2\u4ef6\u4f7f\u7528\u81ea\u5df1\u7684\u65b9\u6cd5\u6e32\u67d3\u56fe\u5c42\uff0c\u57fa\u4e8e QgsPluginLayer \u7f16\u5199\u4f60\u81ea\u5df1\u7684\u56fe\u5c42\u7c7b\u578b\u662f\u6700\u6709\u6548\u7684\u65b9\u5f0f\u3002","title":"18 \u4f7f\u7528\u63d2\u4ef6\u56fe\u5c42"},{"location":"18-%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E5%9B%BE%E5%B1%82/#181-qgspluginlayer","text":"\u4e0b\u9762\u4f8b\u5b50\u662f QgsPluginLayer \u7684\u6700\u5c0f\u5b9e\u73b0\u3002\u5b83\u662f\u57fa\u4e8e Watermark example plugin \u7684\u539f\u7248\u5b9e\u73b0\u3002 \u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\u662f\u5b9e\u73b0\u753b\u5e03\u4e2d\u5b9e\u9645\u56fe\u5f62\u5de5\u5177\u7684\u4e00\u90e8\u5206\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class WatermarkLayerRenderer ( QgsMapLayerRenderer ): def __init__ ( self , layerId , rendererContext ): super () . __init__ ( layerId , rendererContext ) def render ( self ): image = QImage ( \"/usr/share/icons/hicolor/128x128/apps/qgis.png\" ) painter = self . renderContext () . painter () painter . save () painter . drawImage ( 10 , 10 , image ) painter . restore () return True class WatermarkPluginLayer ( QgsPluginLayer ): LAYER_TYPE = \"watermark\" def __init__ ( self ): super () . __init__ ( WatermarkPluginLayer . LAYER_TYPE , \"Watermark plugin layer\" ) self . setValid ( True ) def createMapRenderer ( self , rendererContext ): return WatermarkLayerRenderer ( self . id (), rendererContext ) def setTransformContext ( self , ct ): pass # \u53ef\u4ee5\u6dfb\u52a0\u8bfb\u5199\u9879\u76ee\u7279\u5b9a\u4fe1\u606f\u7684\u65b9\u6cd5 def readXml ( self , node , context ): pass def writeXml ( self , node , doc , context ): pass \u53ef\u4ee5\u5c06\u63d2\u4ef6\u56fe\u5c42\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\u5e76\u4f5c\u4e3a\u4efb\u4f55\u5176\u5b83\u56fe\u5c42\u6dfb\u52a0\u5230\u753b\u5e03\u4e2d\uff1a 1 2 plugin_layer = WatermarkPluginLayer () QgsProject . instance () . addMapLayer ( plugin_layer ) \u52a0\u8f7d\u5305\u542b\u6b64\u7c7b\u56fe\u5c42\u7684\u9879\u76ee\u65f6\uff0c\u9700\u8981\u5de5\u5382\u7c7b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class WatermarkPluginLayerType ( QgsPluginLayerType ): def __init__ ( self ): super () . __init__ ( WatermarkPluginLayer . LAYER_TYPE ) def createLayer ( self ): return WatermarkPluginLayer () # \u4f60\u53ef\u4ee5\u6dfb\u52a0GUI\u4ee3\u7801\u6765\u81ea\u5b9a\u4e49\u663e\u793a\u56fe\u5c42\u7684\u5c5e\u6027\u4fe1\u606f def showLayerProperties ( self , layer ): pass # \u4fdd\u6301\u5f15\u7528\u8be5\u5b9e\u4f8b\uff0c\u9632\u6b62\u88ab\u5783\u573e\u56de\u6536 plt = WatermarkPluginLayerType () assert QgsApplication . pluginLayerRegistry () . addPluginLayerType ( plt )","title":"18.1 \u5b50\u7c7b\u5316QgsPluginLayer"},{"location":"19-%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E5%BA%93/","text":"\u672c\u8282\u4ee3\u7801\u7247\u6bb5\u9700\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 from qgis.core import ( QgsVectorLayer , QgsPointXY , ) 19 \u7f51\u7edc\u5206\u6790\u5e93 \u2693\ufe0e \u7f51\u7edc\u5206\u6790\u5e93\u53ef\u7528\u4e8e\uff1a \u4ece\u5730\u7406\u6570\u636e\uff08\u77e2\u91cf\u7ebf\u6298\u7ebf\u56fe\u5c42\uff09\u521b\u5efa\u56fe \u5b9e\u73b0\u56fe\u8bba\u4e2d\u7684\u57fa\u672c\u7b97\u6cd5\uff08\u76ee\u524d\u53ea\u6709Dijkstra\u7684\u7b97\u6cd5\uff09 \u7f51\u7edc\u5206\u6790\u5e93\u662f\u901a\u8fc7\u4ece RoadGraph \u6838\u5fc3\u63d2\u4ef6\u5bfc\u51fa\u57fa\u672c\u51fd\u6570\u521b\u5efa\u7684\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u5728\u63d2\u4ef6\u4e2d\u4f7f\u7528\u5b83\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4ecePython\u63a7\u5236\u53f0\u4f7f\u7528\u5b83\u3002 19.1 \u4e00\u822c\u4fe1\u606f \u2693\ufe0e \u7b80\u800c\u8a00\u4e4b\uff0c\u4e00\u4e2a\u5178\u578b\u7528\u4f8b\u53ef\u4ee5\u63cf\u8ff0\u4e3a\uff1a \u4ece\u5730\u7406\u6570\u636e\u521b\u5efa\u56fe\uff08\u77e2\u91cf\u6298\u7ebf\u56fe\u5c42\uff09 \u8fd0\u884c\u56fe\u7b97\u6cd5 \u4f7f\u7528\u5206\u6790\u7ed3\u679c 19.2 \u6784\u5efa\u4e00\u4e2a\u56fe \u2693\ufe0e \u4f60\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u51c6\u5907\u8f93\u5165\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u5c06\u77e2\u91cf\u56fe\u5c42\u8f6c\u6362\u4e3a\u56fe\u3002\u6240\u6709\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u90fd\u5c06\u4f7f\u7528\u8fd9\u4e2a\u56fe\uff0c\u800c\u4e0d\u662f\u56fe\u5c42\u3002 \u4f5c\u4e3a\u6570\u636e\u6e90\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6298\u7ebf\u77e2\u91cf\u56fe\u5c42\u3002\u6298\u7ebf\u7684\u8282\u70b9\u6210\u4e3a\u56fe\u7684\u9876\u70b9\uff0c\u6298\u7ebf\u7684\u7ebf\u6bb5\u6210\u4e3a\u56fe\u7684\u8fb9\u3002\u5982\u679c\u51e0\u4e2a\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u5750\u6807\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u76f8\u540c\u7684\u56fe\u9876\u70b9\u3002\u56e0\u6b64\uff0c\u5177\u6709\u516c\u5171\u8282\u70b9\u7684\u4e24\u6761\u7ebf\u5c31\u4f1a\u76f8\u4e92\u8fde\u63a5\u3002 \u6b64\u5916\uff0c\u5728\u56fe\u521b\u5efa\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u5c06\u4efb\u610f\u6570\u91cf\u7684\u9644\u52a0\u70b9\u201c\u56fa\u5b9a\u201d\uff08\u201c\u7ed1\u201d\uff09\u5230\u8f93\u5165\u77e2\u91cf\u56fe\u5c42\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u9644\u52a0\u70b9\uff0c\u5c06\u627e\u5230\u4e00\u4e2a\u5339\u914d\u2014\u2014\u6700\u8fd1\u7684\u9876\u70b9\u6216\u6700\u8fd1\u7684\u8fb9\u3002\u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fb9\u5c06\u88ab\u5206\u5272\u5e76\u6dfb\u52a0\u4e00\u4e2a\u65b0\u9876\u70b9\u3002 \u77e2\u91cf\u56fe\u5c42\u5c5e\u6027\u548c\u8fb9\u7684\u957f\u5ea6\u53ef\u4ee5\u7528\u4f5c\u8fb9\u7684\u5c5e\u6027\u3002 \u4f7f\u7528 Builder \u7f16\u7a0b\u6a21\u5f0f\u5b8c\u6210\u4ece\u77e2\u91cf\u56fe\u5c42\u5230\u56fe\u7684\u8f6c\u6362\u3002\u56fe\u662f\u4f7f\u7528\u6240\u8c13\u7684\u63a7\u5236\u5668\u6784\u9020\u7684\u3002\u76ee\u524d\u53ea\u6709\u4e00\u4e2a\u63a7\u5236\u5668\uff1a QgsVectorLayerDirector \u3002\u63a7\u5236\u5668\u8bbe\u7f6e\u4e86\u57fa\u672c\u7684\u8bbe\u7f6e\u2014\u2014\u8fd9\u4e9b\u8bbe\u7f6e\u5c06\u7528\u4e8e\u4ece\u7ebf\u77e2\u91cf\u56fe\u5c42\u6784\u9020\u56fe\uff0c\u6784\u5efa\u5668\u7528\u6765\u521b\u5efa\u56fe\u3002\u76ee\u524d\uff0c\u63a7\u5236\u5668\u4e00\u6837\uff0c\u53ea\u6709\u4e00\u4e2a\u6784\u5efa\u5668\u5b58\u5728\uff1a QgsGraphBuilder \uff0c\u5b83\u53ef\u4ee5\u521b\u5efa QgsGraph \u5bf9\u8c61\u3002\u4f60\u53ef\u80fd\u5e0c\u671b\u5b9e\u73b0\u81ea\u5df1\u7684\u6784\u5efa\u5668\uff0c\u4ee5\u5efa\u7acb\u4e00\u4e2a\u4e0e BGL \u6216 NetworkX \u7b49\u5e93\u517c\u5bb9\u7684\u56fe\u3002 \u4e3a\u4e86\u8ba1\u7b97\u8fb9\u5c5e\u6027\uff0c\u4f7f\u7528\u7f16\u7a0b\u6a21\u5f0f \u7b56\u7565 \u3002\u76ee\u524d\u53ea\u6709 QGSNetworkDistanceTreatgy \u7b56\u7565\uff08\u8003\u8651\u5230\u8def\u7ebf\u7684\u957f\u5ea6\uff09\u548c QgsNetworkSpeedStrategy \uff08\u4e5f\u8003\u8651\u5230\u901f\u5ea6\uff09\u53ef\u7528\u3002\u4f60\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u7b56\u7565\uff0c\u4f7f\u7528\u6240\u6709\u5fc5\u8981\u7684\u53c2\u6570\u3002\u4f8b\u5982\uff0cRoadGraph\u63d2\u4ef6\u4f7f\u7528\u7684\u7b56\u7565\u662f\u4f7f\u7528\u8fb9\u957f\u5ea6\u548c\u5c5e\u6027\u4e2d\u7684\u901f\u5ea6\u503c\u6765\u8ba1\u7b97\u884c\u7a0b\u65f6\u95f4\u3002 \u662f\u65f6\u5019\u6df1\u5165\u7814\u7a76\u8fd9\u4e2a\u8fc7\u7a0b\u4e86\u3002 \u9996\u5148\uff0c\u8981\u4f7f\u7528\u8fd9\u4e2a\u5e93\uff0c\u6211\u4eec\u5e94\u8be5\u5bfc\u5165\u5206\u6790\u6a21\u5757 1 from qgis.analysis import * \u7136\u540e\u662f\u4e00\u4e9b\u521b\u5efa\u63a7\u5236\u5668\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 # \u4e0d\u8981\u4f7f\u7528\u56fe\u5c42\u5c5e\u6027\u4e2d\u6709\u5173\u9053\u8def\u65b9\u5411\u7684\u4fe1\u606f\uff0c\u6240\u6709\u9053\u8def\u90fd\u662f\u53cc\u5411\u7684 director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , QgsVectorLayerDirector . DirectionBoth ) # \u4f7f\u7528\u7b2c5\u4e2a\u5b57\u6bb5\u4f5c\u4e3a\u9053\u8def\u7684\u65b9\u5411\u4fe1\u606f. # \u6b63\u5411\u5355\u65b9\u5411\u9053\u8def\u4f7f\u7528 \"yes\", # \u53cd\u5411\u5355\u65b9\u5411\u9053\u8def\u4f7f\u7528 \"1\" # \u56e0\u6b64\uff0c\u53cc\u5411\u9053\u8def\u4f7f\u7528 \u201cno\u201d\u3002\u9ed8\u8ba4\u60c5\u51b5\u9053\u8def\u662f\u53cc\u5411\u8def\u3002 # \u6b64\u65b9\u6848\u53ef\u7528\u4e8eOpenStreetMap\u6570\u636e director = QgsVectorLayerDirector ( vectorLayer , 5 , 'yes' , '1' , 'no' , QgsVectorLayerDirector . DirectionBoth ) \u4e3a\u4e86\u6784\u9020\u4e00\u4e2a\u63a7\u5236\u5668\uff0c\u6211\u4eec\u5e94\u8be5\u4f20\u9012\u4e00\u4e2a\u77e2\u91cf\u56fe\u5c42\uff0c\u8be5\u77e2\u91cf\u56fe\u5c42\u4f5c\u4e3a\u56fe\u7ed3\u6784\u7684\u6e90\uff0c\u4ee5\u53ca\u5173\u4e8e\u6bcf\u4e2a\u8def\u6bb5\u4e0a\u5141\u8bb8\u79fb\u52a8\u7684\u4fe1\u606f\uff08\u5355\u5411\u6216\u53cc\u5411\u79fb\u52a8\u3001\u76f4\u63a5\u6216\u53cd\u5411\uff09\uff0c\u50cf\u8fd9\u6837\uff1a 1 2 3 4 5 6 director = QgsVectorLayerDirector ( vectorLayer , directionFieldId , directDirectionValue , reverseDirectionValue , bothDirectionValue , defaultDirection ) \u4ee5\u4e0b\u662f\u8fd9\u4e9b\u53c2\u6570\u7684\u5168\u90e8\u542b\u4e49\uff1a vectorLayer \u2014\u2014\u7528\u4e8e\u6784\u5efa\u56fe\u7684\u77e2\u91cf\u56fe\u5c42 directionFieldId \u2014\u2014\u5b57\u6bb5\u7684\u7d22\u5f15\u503c\uff0c\u7528\u4e8e\u5b58\u50a8\u9053\u8def\u65b9\u5411\u7684\u4fe1\u606f\u3002\u5982\u679c\u662f -1 \uff0c\u8868\u793a\u4e0d\u4f7f\u7528\u8fd9\u4e9b\u4fe1\u606f\u3002\u6574\u578b\u3002 directDirectionValue \u2014\u2014\u6b63\u5411\u7684\u5b57\u6bb5\u503c\uff08\u4ece\u7b2c\u4e00\u4e2a\u76f4\u7ebf\u70b9\u79fb\u52a8\u5230\u6700\u540e\u4e00\u4e2a\u76f4\u7ebf\u70b9\uff09\u3002\u5b57\u7b26\u4e32\u3002 reverseDirectionValue \u2014\u2014\u53cd\u5411\u9053\u8def\u7684\u5b57\u6bb5\u503c\uff08\u4ece\u6700\u540e\u4e00\u4e2a\u76f4\u7ebf\u70b9\u79fb\u52a8\u5230\u7b2c\u4e00\u4e2a\u76f4\u7ebf\u70b9\uff09\u3002\u5b57\u7b26\u4e32\u3002 bothDirectionValue \u2014\u2014\u53cc\u5411\u9053\u8def\u7684\u5b57\u6bb5\u503c\uff08\u5bf9\u4e8e\u8fd9\u6837\u7684\u9053\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u7b2c\u4e00\u70b9\u79fb\u52a8\u5230\u6700\u540e\u4e00\u70b9\uff0c\u4e5f\u53ef\u4ee5\u4ece\u6700\u540e\u4e00\u70b9\u79fb\u52a8\u5230\u7b2c\u4e00\u70b9\uff09\u3002\u5b57\u7b26\u4e32\u3002 defaultDirectio \u2014\u2014\u9ed8\u8ba4\u9053\u8def\u65b9\u5411\u3002\u8be5\u503c\u5c06\u7528\u4e8e\u8fd9\u4e9b\u9053\u8def\u5f53\u5b57\u6bb5 directionFieldId \u672a\u8bbe\u7f6e\u65f6\u6216\u5177\u6709\u4e0e\u4e0a\u9762\u6307\u5b9a\u7684\u4e09\u4e2a\u503c\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\u3002\u53ef\u7528\u7684\u503c\u662f\uff1a QgsVectorLayerDirector.DirectionForward \u2014\u2014\u6b63\u5411\u5355\u5411\u9053\u8def QgsVectorLayerDirector.DirectionBackward \u2014\u2014\u53cd\u5411\u5355\u5411\u9053\u8def QgsVectorLayerDirector.DirectionBoth \u53cc\u5411\u9053\u8def \u7136\u540e\u6709\u5fc5\u8981\u521b\u5efa\u7528\u4e8e\u8ba1\u7b97\u8fb9\u5c5e\u6027\u7684\u7b56\u7565\uff1a 1 2 3 4 5 6 7 # \u5305\u542b\u901f\u5ea6\u4fe1\u606f\u7684\u5b57\u6bb5\u7d22\u5f15\u503c attributeId = 1 # \u9ed8\u8ba4\u901f\u5ea6 defaultValue = 50 # \u8f6c\u5316\u901f\u5ea6\u5230\u7c73\u5236\u5355\u4f4d ('1' \u8868\u793a\u4e0d\u8f6c\u5316) toMetricFactor = 1 strategy = QgsNetworkSpeedStrategy ( attributeId , defaultValue , toMetricFactor ) \u544a\u8bc9\u63a7\u5236\u5668\u8fd9\u4e2a\u7b56\u7565 1 2 director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , 3 ) director . addStrategy ( strategy ) \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u5668\u6765\u521b\u5efa\u56fe\u3002 QgsGraphBuilder \u7c7b\u6784\u9020\u51fd\u6570\u63a5\u53d7\u51e0\u4e2a\u53c2\u6570\uff1a crs \u2014\u2014\u5750\u6807\u53c2\u8003\u7cfb\u7edf\u3002\u5fc5\u9700\u3002 otfEnabled \u2014\u2014\u4f7f\u7528\u201con the fly\u201d \u91cd\u6295\u5f71. \u9ed8\u8ba4\u4e3a True (use OTF). topologyTolerance \u2014\u2014\u62d3\u6251\u5bb9\u5dee\u3002\u9ed8\u8ba4\u4e3a0\u3002 ellipsoidID \u2014\u2014\u53c2\u8003\u692d\u7403\u3002\u9ed8\u8ba4\u4e3a\u201cWGS84\u201d\u3002 1 2 # \u53ea\u8bbe\u7f6eCRS,\uff0c\u5176\u5b83\u503c\u9ed8\u8ba4 builder = QgsGraphBuilder ( vectorLayer . crs ()) \u6211\u4eec\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u51e0\u4e2a\u70b9\uff0c\u8fd9\u4e9b\u70b9\u5c06\u7528\u4e8e\u5206\u6790\u3002\u4f8b\u5982\uff1a 1 2 startPoint = QgsPointXY ( 1179720.1871 , 5419067.3507 ) endPoint = QgsPointXY ( 1180616.0205 , 5419745.7839 ) \u73b0\u5728\u4e00\u5207\u5c31\u7eea\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u56fe\u8868\u5e76\u5c06\u8fd9\u4e9b\u70b9\u201c\u8fde\u63a5\u201d\u5230\u5b83 1 tiedPoints = director . makeGraph ( builder , [ startPoint , endPoint ]) \u6784\u5efa\u56fe\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff08\u8fd9\u53d6\u51b3\u4e8e\u56fe\u5c42\u4e2d\u7684\u8981\u7d20\u6570\u91cf\u548c\u56fe\u5c42\u5927\u5c0f\uff09\u3002 tiedPoints \u662f\u4e00\u4e2a\u5305\u542b\u201c\u7ed1\u5b9a\u201d\u70b9\u5750\u6807\u7684\u5217\u8868\u3002\u5f53\u6784\u5efa\u64cd\u4f5c\u5b8c\u6210\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u56fe\u5e76\u5c06\u5176\u7528\u4e8e\u5206\u6790 1 graph = builder . graph () \u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u70b9\u7684\u9876\u70b9\u7d22\u5f15 1 2 startId = graph . findVertex ( tiedPoints [ 0 ]) endId = graph . findVertex ( tiedPoints [ 1 ]) 19.3 \u56fe\u5206\u6790 \u2693\ufe0e \u7f51\u7edc\u5206\u6790\u7528\u4e8e\u627e\u5230\u4e24\u4e2a\u95ee\u9898\u7684\u7b54\u6848\uff1a\u54ea\u4e9b\u9876\u70b9\u662f\u76f8\u8fde\u7684\uff0c\u4ee5\u53ca\u5982\u4f55\u627e\u5230\u6700\u77ed\u8def\u5f84\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u7f51\u7edc\u5206\u6790\u5e93\u63d0\u4f9b\u4e86Dijkstra\u7b97\u6cd5\u3002 Dijkstra\u7b97\u6cd5\u627e\u5230\u4ece\u56fe\u7684\u4e00\u4e2a\u9876\u70b9\u5230\u6240\u6709\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4ee5\u53ca\u4f18\u5316\u53c2\u6570\u7684\u503c\u3002\u7ed3\u679c\u53ef\u4ee5\u8868\u793a\u4e3a\u6700\u77ed\u8def\u5f84\u6811\u3002 \u6700\u77ed\u8def\u5f84\u6811\u662f\u4e00\u4e2a\u6709\u5411\u52a0\u6743\u56fe\uff08\u6216\u66f4\u51c6\u786e\u5730\u8bf4\u662f\u4e00\u68f5\u6811\uff09\uff0c\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a \u53ea\u6709\u4e00\u4e2a\u9876\u70b9\u6ca1\u6709\u5165\u5c04\u8fb9\u2014\u2014\u6811\u7684\u6839 \u6240\u6709\u5176\u4ed6\u9876\u70b9\u53ea\u6709\u4e00\u6761\u5165\u5c04\u8fb9 \u5982\u679c\u9876\u70b9B\u53ef\u4ee5\u4ece\u9876\u70b9A\u5230\u8fbe\uff0c\u90a3\u4e48\u4eceA\u5230B\u7684\u8def\u5f84\u662f\u552f\u4e00\u53ef\u7528\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u5b83\u5728\u8be5\u56fe\u4e0a\u662f\u6700\u4f18\u7684\uff08\u6700\u77ed\u7684\uff09\u8def\u5f84 \u8981\u83b7\u5f97\u6700\u77ed\u8def\u5f84\u6811\uff0c\u53ef\u4ee5\u4f7f\u7528 QgsGraphAnalyzer \u7c7b\u7684 shortestTree() \u548c dijkstra() \u65b9\u6cd5\u3002\u5efa\u8bae\u4f7f\u7528 dijkstra() \u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u66f4\u5feb\uff0c\u800c\u4e14\u66f4\u6709\u6548\u5730\u4f7f\u7528\u5185\u5b58\u3002 shortestTree() \u65b9\u6cd5\u5728\u4f60\u60f3\u5728\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u884c\u8d70\u65f6\u5f88\u6709\u7528\u3002\u5b83\u603b\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u56fe\u5bf9\u8c61\uff08QgsGraph\uff09\u5e76\u63a5\u53d7\u4e09\u4e2a\u53d8\u91cf\uff1a source \u2014\u2014\u8f93\u5165\u7684\u56fe startVertexIdx \u2014\u2014\u6811\u4e0a\u7684\u70b9\u7684\u7d22\u5f15\uff08\u6811\u7684\u6839\uff09 criterionNum \u2014\u2014\u4f7f\u7528\u7684\u8fb9\u5c5e\u6027\u7684\u6570\u91cf\uff08\u4ece0\u5f00\u59cb\uff09 1 tree = QgsGraphAnalyzer . shortestTree ( graph , startId , 0 ) dijkstra() \u65b9\u6cd5\u6709\u76f8\u540c\u7684\u53c2\u6570\uff0c\u4f46\u8fd4\u56de\u4e24\u4e2a\u6570\u7ec4\u3002\u5728\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0cn\u5143\u7d20\u5305\u542b\u4f20\u5165\u8fb9\u7684\u7d22\u5f15\uff0c\u5982\u679c\u6ca1\u6709\u4f20\u5165\u8fb9\u5219\u4e3a-1\u3002\u5728\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\uff0cn\u5143\u7d20\u5305\u542b\u4ece\u6811\u7684\u6839\u5230\u9876\u70b9n\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u9876\u70b9n\u4ece\u6839\u90e8\u65e0\u6cd5\u5230\u8fbe\uff0c\u5219\u4e3aDOUBLE_MAX\u3002 1 ( tree , cost ) = QgsGraphAnalyzer . dijkstra ( graph , startId , 0 ) \u4e0b\u9762\u662f\u4e00\u4e9b\u975e\u5e38\u7b80\u5355\u7684\u4ee3\u7801\uff0c\u4f7f\u7528 shortestTree() \u65b9\u6cd5\u521b\u5efa\u7684\u56fe\u663e\u793a\u6700\u77ed\u8def\u5f84\u6811\uff08\u5728 Layers \u9762\u677f\u4e2d\u9009\u62e9 linestring \u56fe\u5c42\uff0c\u7528\u4f60\u81ea\u5df1\u7684\u5750\u6807\u66ff\u6362\uff09\u3002 \u8b66\u544a \u8fd9\u6bb5\u4ee3\u7801\u4ec5\u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b83\u521b\u5efa\u4e86\u5927\u91cf\u7684 QgsRubberBand \u5bf9\u8c61\uff0c\u5728\u5927\u6570\u636e\u96c6\u4e0a\u53ef\u80fd\u4f1a\u5f88\u6162\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from qgis.core import * from qgis.gui import * from qgis.analysis import * from qgis.PyQt.QtCore import * from qgis.PyQt.QtGui import * vectorLayer = QgsVectorLayer ( 'testdata/network.gpkg|layername=network_lines' , 'lines' ) director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , QgsVectorLayerDirector . DirectionBoth ) strategy = QgsNetworkDistanceStrategy () director . addStrategy ( strategy ) builder = QgsGraphBuilder ( vectorLayer . crs ()) pStart = QgsPointXY ( 1179661.925139 , 5419188.074362 ) tiedPoint = director . makeGraph ( builder , [ pStart ]) pStart = tiedPoint [ 0 ] graph = builder . graph () idStart = graph . findVertex ( pStart ) tree = QgsGraphAnalyzer . shortestTree ( graph , idStart , 0 ) i = 0 while ( i < tree . edgeCount ()): rb = QgsRubberBand ( iface . mapCanvas ()) rb . setColor ( Qt . red ) rb . addPoint ( tree . vertex ( tree . edge ( i ) . fromVertex ()) . point ()) rb . addPoint ( tree . vertex ( tree . edge ( i ) . toVertex ()) . point ()) i = i + 1 \u4f7f\u7528 dijkstra() \u65b9\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 from qgis.core import * from qgis.gui import * from qgis.analysis import * from qgis.PyQt.QtCore import * from qgis.PyQt.QtGui import * vectorLayer = QgsVectorLayer ( 'testdata/network.gpkg|layername=network_lines' , 'lines' ) director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , QgsVectorLayerDirector . DirectionBoth ) strategy = QgsNetworkDistanceStrategy () director . addStrategy ( strategy ) builder = QgsGraphBuilder ( vectorLayer . crs ()) pStart = QgsPointXY ( 1179661.925139 , 5419188.074362 ) tiedPoint = director . makeGraph ( builder , [ pStart ]) pStart = tiedPoint [ 0 ] graph = builder . graph () idStart = graph . findVertex ( pStart ) ( tree , costs ) = QgsGraphAnalyzer . dijkstra ( graph , idStart , 0 ) for edgeId in tree : if edgeId == - 1 : continue rb = QgsRubberBand ( iface . mapCanvas ()) rb . setColor ( Qt . red ) rb . addPoint ( graph . vertex ( graph . edge ( edgeId ) . fromVertex ()) . point ()) rb . addPoint ( graph . vertex ( graph . edge ( edgeId ) . toVertex ()) . point ()) 19.3.1 \u67e5\u627e\u6700\u77ed\u8def\u5f84 \u2693\ufe0e \u4e3a\u4e86\u627e\u5230\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u4f73\u8def\u5f84\uff0c\u91c7\u7528\u4e86\u4ee5\u4e0b\u65b9\u6cd5\u3002\u4e24\u70b9\uff08\u8d77\u70b9A\u548c\u7ec8\u70b9B\uff09\u5728\u56fe\u5efa\u7acb\u65f6\u90fd\u88ab \"\u6346\u7ed1 \"\u5728\u4e00\u8d77\u3002\u7136\u540e\u4f7f\u7528 shortestTree() \u6216 dijkstra() \u65b9\u6cd5\uff0c\u6211\u4eec\u5efa\u7acb\u4ee5\u8d77\u70b9A\u4e3a\u6839\u7684\u6700\u77ed\u8def\u5f84\u6811\u3002\u5728\u540c\u4e00\u68f5\u6811\u4e0a\uff0c\u6211\u4eec\u4e5f\u627e\u5230\u4e86\u7ec8\u70b9B\uff0c\u5e76\u5f00\u59cb\u4eceB\u70b9\u8d70\u5230A\u70b9\uff0c\u6574\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 assign T = B while T != B add point T to path get incoming edge for point T look for point TT , that is start point of this edge assign T = TT add point A to path \u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u8def\u5f84\uff0c\u5176\u5f62\u5f0f\u662f\u9876\u70b9\u7684\u5012\u7f6e\u5217\u8868\uff08\u9876\u70b9\u662f\u6309\u7167\u4ece\u7ec8\u70b9\u5230\u8d77\u70b9\u7684\u76f8\u53cd\u987a\u5e8f\u6392\u5217\u7684\uff09\uff0c\u8fd9\u4e9b\u9876\u70b9\u5c06\u5728\u8fd9\u6761\u8def\u5f84\u7684\u884c\u7a0b\u4e2d\u88ab\u8bbf\u95ee\u3002 \u4ee5\u4e0b\u662f\u4f7f\u7528 shortestTree() \u65b9\u6cd5\u7684QGIS Python\u63a7\u5236\u53f0\u793a\u4f8b\u4ee3\u7801\uff08\u4f60\u53ef\u80fd\u9700\u8981\u5728\u56fe\u5c42\u76ee\u5f55\u6811\u4e2d\u4e2d\u52a0\u8f7d\u5e76\u9009\u62e9\u4e00\u4e2a\u7ebf\u56fe\u5c42\uff0c\u5e76\u5c06\u4ee3\u7801\u4e2d\u7684\u5750\u6807\u66ff\u6362\u4e3a\u4f60\u7684\u5750\u6807\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from qgis.core import * from qgis.gui import * from qgis.analysis import * from qgis.PyQt.QtCore import * from qgis.PyQt.QtGui import * vectorLayer = QgsVectorLayer ( 'testdata/network.gpkg|layername=network_lines' , 'lines' ) builder = QgsGraphBuilder ( vectorLayer . sourceCrs ()) director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , QgsVectorLayerDirector . DirectionBoth ) startPoint = QgsPointXY ( 1179661.925139 , 5419188.074362 ) endPoint = QgsPointXY ( 1180942.970617 , 5420040.097560 ) tiedPoints = director . makeGraph ( builder , [ startPoint , endPoint ]) tStart , tStop = tiedPoints graph = builder . graph () idxStart = graph . findVertex ( tStart ) tree = QgsGraphAnalyzer . shortestTree ( graph , idxStart , 0 ) idxStart = tree . findVertex ( tStart ) idxEnd = tree . findVertex ( tStop ) if idxEnd == - 1 : raise Exception ( 'No route!' ) # \u6dfb\u52a0\u6700\u540e\u4e00\u4e2a\u70b9 route = [ tree . vertex ( idxEnd ) . point ()] # \u904d\u5386\u56fe while idxEnd != idxStart : edgeIds = tree . vertex ( idxEnd ) . incomingEdges () if len ( edgeIds ) == 0 : break edge = tree . edge ( edgeIds [ 0 ]) route . insert ( 0 , tree . vertex ( edge . fromVertex ()) . point ()) idxEnd = edge . fromVertex () # \u663e\u793a rb = QgsRubberBand ( iface . mapCanvas ()) rb . setColor ( Qt . green ) # \u5982\u679c\u9879\u76ee\u7684\u5750\u6807\u7cfb\u548c\u56fe\u5c42\u7684\u5750\u6807\u7cfb\u4e0d\u4e00\u6837\uff0c\u5219\u9700\u8981\u5750\u6807\u8f6c\u6362 for p in route : rb . addPoint ( p ) \u4f7f\u7528 dijkstra() \u65b9\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from qgis.core import * from qgis.gui import * from qgis.analysis import * from qgis.PyQt.QtCore import * from qgis.PyQt.QtGui import * vectorLayer = QgsVectorLayer ( 'testdata/network.gpkg|layername=network_lines' , 'lines' ) director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , QgsVectorLayerDirector . DirectionBoth ) strategy = QgsNetworkDistanceStrategy () director . addStrategy ( strategy ) builder = QgsGraphBuilder ( vectorLayer . sourceCrs ()) startPoint = QgsPointXY ( 1179661.925139 , 5419188.074362 ) endPoint = QgsPointXY ( 1180942.970617 , 5420040.097560 ) tiedPoints = director . makeGraph ( builder , [ startPoint , endPoint ]) tStart , tStop = tiedPoints graph = builder . graph () idxStart = graph . findVertex ( tStart ) idxEnd = graph . findVertex ( tStop ) ( tree , costs ) = QgsGraphAnalyzer . dijkstra ( graph , idxStart , 0 ) if tree [ idxEnd ] == - 1 : raise Exception ( 'No route!' ) # Total cost cost = costs [ idxEnd ] # \u6dfb\u52a0\u6700\u540e\u4e00\u4e2a\u70b9 route = [ graph . vertex ( idxEnd ) . point ()] # \u904d\u5386\u56fe while idxEnd != idxStart : idxEnd = graph . edge ( tree [ idxEnd ]) . fromVertex () route . insert ( 0 , graph . vertex ( idxEnd ) . point ()) # \u663e\u793a rb = QgsRubberBand ( iface . mapCanvas ()) rb . setColor ( Qt . red ) # \u5982\u679c\u9879\u76ee\u7684\u5750\u6807\u7cfb\u548c\u56fe\u5c42\u7684\u5750\u6807\u7cfb\u4e0d\u4e00\u6837\uff0c\u5219\u9700\u8981\u5750\u6807\u8f6c\u6362 for p in route : rb . addPoint ( p ) 19.3.2 \u53ef\u8fbe\u533a\u57df \u2693\ufe0e \u9876\u70b9A\u7684\u53ef\u8fbe\u533a\u57df\u662f\u6307\u53ef\u4ee5\u4ece\u9876\u70b9A\u8fdb\u5165\u7684\u56fe\u5f62\u9876\u70b9\u7684\u5b50\u96c6\uff0c\u5e76\u4e14\u4eceA\u5230\u8fd9\u4e9b\u9876\u70b9\u7684\u8def\u5f84\u6210\u672c\u4e0d\u8d85\u8fc7\u67d0\u4e2a\u503c\u3002 \u8fd9\u4e00\u70b9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4f8b\u5b50\u66f4\u6e05\u695a\u5730\u8868\u660e\u3002\"\u6709\u4e00\u4e2a\u6d88\u9632\u7ad9\uff0c\u6d88\u9632\u8f66\u53ef\u4ee5\u57285\u5206\u949f\u5185\u5230\u8fbe\u57ce\u5e02\u7684\u54ea\u4e9b\u5730\u65b9\uff1f10\u5206\u949f\uff1f15\u5206\u949f\uff1f\"\u3002\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f\u6d88\u9632\u7ad9\u7684\u53ef\u8fbe\u533a\u57df\u3002 \u4e3a\u4e86\u627e\u5230\u53ef\u8fbe\u7684\u533a\u57df\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 QgsGraphAnalyzer \u7c7b\u7684 dijkstra() \u65b9\u6cd5\u3002\u53ea\u9700\u5c06cost\u6570\u7ec4\u7684\u5143\u7d20\u4e0e\u9884\u5b9a\u4e49\u7684\u503c\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679ccost[i]\u5c0f\u4e8e\u6216\u7b49\u4e8e\u4e00\u4e2a\u9884\u5b9a\u4e49\u7684\u503c\uff0c\u90a3\u4e48\u9876\u70b9i\u5c31\u5728\u53ef\u8fbe\u533a\u57df\u5185\uff0c\u5426\u5219\u5b83\u5c31\u5728\u5916\u9762\u3002 \u4e00\u4e2a\u66f4\u56f0\u96be\u7684\u95ee\u9898\u662f\u8981\u5f97\u5230\u53ef\u8fbe\u533a\u57df\u7684\u8fb9\u754c\u3002\u5e95\u90e8\u8fb9\u754c\u662f\u4ecd\u53ef\u8bbf\u95ee\u7684\u9876\u70b9\u96c6\u5408\uff0c\u800c\u9876\u90e8\u8fb9\u754c\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684\u9876\u70b9\u96c6\u5408\u3002\u4e8b\u5b9e\u4e0a\u8fd9\u5f88\u7b80\u5355\uff1a\u5b83\u662f\u57fa\u4e8e\u6700\u77ed\u8def\u5f84\u6811\u7684\u8fb9\u7684\u53ef\u8fbe\u6027\u8fb9\u754c\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u8fb9\u7684\u6e90\u9876\u70b9\u662f\u53ef\u8bbf\u95ee\u7684\uff0c\u800c\u8fb9\u7684\u76ee\u6807\u9876\u70b9\u5219\u4e0d\u662f\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , QgsVectorLayerDirector . DirectionBoth ) strategy = QgsNetworkDistanceStrategy () director . addStrategy ( strategy ) builder = QgsGraphBuilder ( vectorLayer . crs ()) pStart = QgsPointXY ( 1179661.925139 , 5419188.074362 ) delta = iface . mapCanvas () . getCoordinateTransform () . mapUnitsPerPixel () * 1 rb = QgsRubberBand ( iface . mapCanvas (), True ) rb . setColor ( Qt . green ) rb . addPoint ( QgsPointXY ( pStart . x () - delta , pStart . y () - delta )) rb . addPoint ( QgsPointXY ( pStart . x () + delta , pStart . y () - delta )) rb . addPoint ( QgsPointXY ( pStart . x () + delta , pStart . y () + delta )) rb . addPoint ( QgsPointXY ( pStart . x () - delta , pStart . y () + delta )) tiedPoints = director . makeGraph ( builder , [ pStart ]) graph = builder . graph () tStart = tiedPoints [ 0 ] idStart = graph . findVertex ( tStart ) ( tree , cost ) = QgsGraphAnalyzer . dijkstra ( graph , idStart , 0 ) upperBound = [] r = 1500.0 i = 0 tree . reverse () while i < len ( cost ): if cost [ i ] > r and tree [ i ] != - 1 : outVertexId = graph . edge ( tree [ i ]) . toVertex () if cost [ outVertexId ] < r : upperBound . append ( i ) i = i + 1 for i in upperBound : centerPoint = graph . vertex ( i ) . point () rb = QgsRubberBand ( iface . mapCanvas (), True ) rb . setColor ( Qt . red ) rb . addPoint ( QgsPointXY ( centerPoint . x () - delta , centerPoint . y () - delta )) rb . addPoint ( QgsPointXY ( centerPoint . x () + delta , centerPoint . y () - delta )) rb . addPoint ( QgsPointXY ( centerPoint . x () + delta , centerPoint . y () + delta )) rb . addPoint ( QgsPointXY ( centerPoint . x () - delta , centerPoint . y () + delta ))","title":"19-\u7f51\u7edc\u5206\u6790\u5e93"},{"location":"19-%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E5%BA%93/#19","text":"\u7f51\u7edc\u5206\u6790\u5e93\u53ef\u7528\u4e8e\uff1a \u4ece\u5730\u7406\u6570\u636e\uff08\u77e2\u91cf\u7ebf\u6298\u7ebf\u56fe\u5c42\uff09\u521b\u5efa\u56fe \u5b9e\u73b0\u56fe\u8bba\u4e2d\u7684\u57fa\u672c\u7b97\u6cd5\uff08\u76ee\u524d\u53ea\u6709Dijkstra\u7684\u7b97\u6cd5\uff09 \u7f51\u7edc\u5206\u6790\u5e93\u662f\u901a\u8fc7\u4ece RoadGraph \u6838\u5fc3\u63d2\u4ef6\u5bfc\u51fa\u57fa\u672c\u51fd\u6570\u521b\u5efa\u7684\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u5728\u63d2\u4ef6\u4e2d\u4f7f\u7528\u5b83\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4ecePython\u63a7\u5236\u53f0\u4f7f\u7528\u5b83\u3002","title":"19 \u7f51\u7edc\u5206\u6790\u5e93"},{"location":"19-%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E5%BA%93/#191","text":"\u7b80\u800c\u8a00\u4e4b\uff0c\u4e00\u4e2a\u5178\u578b\u7528\u4f8b\u53ef\u4ee5\u63cf\u8ff0\u4e3a\uff1a \u4ece\u5730\u7406\u6570\u636e\u521b\u5efa\u56fe\uff08\u77e2\u91cf\u6298\u7ebf\u56fe\u5c42\uff09 \u8fd0\u884c\u56fe\u7b97\u6cd5 \u4f7f\u7528\u5206\u6790\u7ed3\u679c","title":"19.1 \u4e00\u822c\u4fe1\u606f"},{"location":"19-%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E5%BA%93/#192","text":"\u4f60\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u51c6\u5907\u8f93\u5165\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u5c06\u77e2\u91cf\u56fe\u5c42\u8f6c\u6362\u4e3a\u56fe\u3002\u6240\u6709\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u90fd\u5c06\u4f7f\u7528\u8fd9\u4e2a\u56fe\uff0c\u800c\u4e0d\u662f\u56fe\u5c42\u3002 \u4f5c\u4e3a\u6570\u636e\u6e90\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6298\u7ebf\u77e2\u91cf\u56fe\u5c42\u3002\u6298\u7ebf\u7684\u8282\u70b9\u6210\u4e3a\u56fe\u7684\u9876\u70b9\uff0c\u6298\u7ebf\u7684\u7ebf\u6bb5\u6210\u4e3a\u56fe\u7684\u8fb9\u3002\u5982\u679c\u51e0\u4e2a\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u5750\u6807\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u76f8\u540c\u7684\u56fe\u9876\u70b9\u3002\u56e0\u6b64\uff0c\u5177\u6709\u516c\u5171\u8282\u70b9\u7684\u4e24\u6761\u7ebf\u5c31\u4f1a\u76f8\u4e92\u8fde\u63a5\u3002 \u6b64\u5916\uff0c\u5728\u56fe\u521b\u5efa\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u5c06\u4efb\u610f\u6570\u91cf\u7684\u9644\u52a0\u70b9\u201c\u56fa\u5b9a\u201d\uff08\u201c\u7ed1\u201d\uff09\u5230\u8f93\u5165\u77e2\u91cf\u56fe\u5c42\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u9644\u52a0\u70b9\uff0c\u5c06\u627e\u5230\u4e00\u4e2a\u5339\u914d\u2014\u2014\u6700\u8fd1\u7684\u9876\u70b9\u6216\u6700\u8fd1\u7684\u8fb9\u3002\u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fb9\u5c06\u88ab\u5206\u5272\u5e76\u6dfb\u52a0\u4e00\u4e2a\u65b0\u9876\u70b9\u3002 \u77e2\u91cf\u56fe\u5c42\u5c5e\u6027\u548c\u8fb9\u7684\u957f\u5ea6\u53ef\u4ee5\u7528\u4f5c\u8fb9\u7684\u5c5e\u6027\u3002 \u4f7f\u7528 Builder \u7f16\u7a0b\u6a21\u5f0f\u5b8c\u6210\u4ece\u77e2\u91cf\u56fe\u5c42\u5230\u56fe\u7684\u8f6c\u6362\u3002\u56fe\u662f\u4f7f\u7528\u6240\u8c13\u7684\u63a7\u5236\u5668\u6784\u9020\u7684\u3002\u76ee\u524d\u53ea\u6709\u4e00\u4e2a\u63a7\u5236\u5668\uff1a QgsVectorLayerDirector \u3002\u63a7\u5236\u5668\u8bbe\u7f6e\u4e86\u57fa\u672c\u7684\u8bbe\u7f6e\u2014\u2014\u8fd9\u4e9b\u8bbe\u7f6e\u5c06\u7528\u4e8e\u4ece\u7ebf\u77e2\u91cf\u56fe\u5c42\u6784\u9020\u56fe\uff0c\u6784\u5efa\u5668\u7528\u6765\u521b\u5efa\u56fe\u3002\u76ee\u524d\uff0c\u63a7\u5236\u5668\u4e00\u6837\uff0c\u53ea\u6709\u4e00\u4e2a\u6784\u5efa\u5668\u5b58\u5728\uff1a QgsGraphBuilder \uff0c\u5b83\u53ef\u4ee5\u521b\u5efa QgsGraph \u5bf9\u8c61\u3002\u4f60\u53ef\u80fd\u5e0c\u671b\u5b9e\u73b0\u81ea\u5df1\u7684\u6784\u5efa\u5668\uff0c\u4ee5\u5efa\u7acb\u4e00\u4e2a\u4e0e BGL \u6216 NetworkX \u7b49\u5e93\u517c\u5bb9\u7684\u56fe\u3002 \u4e3a\u4e86\u8ba1\u7b97\u8fb9\u5c5e\u6027\uff0c\u4f7f\u7528\u7f16\u7a0b\u6a21\u5f0f \u7b56\u7565 \u3002\u76ee\u524d\u53ea\u6709 QGSNetworkDistanceTreatgy \u7b56\u7565\uff08\u8003\u8651\u5230\u8def\u7ebf\u7684\u957f\u5ea6\uff09\u548c QgsNetworkSpeedStrategy \uff08\u4e5f\u8003\u8651\u5230\u901f\u5ea6\uff09\u53ef\u7528\u3002\u4f60\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u7b56\u7565\uff0c\u4f7f\u7528\u6240\u6709\u5fc5\u8981\u7684\u53c2\u6570\u3002\u4f8b\u5982\uff0cRoadGraph\u63d2\u4ef6\u4f7f\u7528\u7684\u7b56\u7565\u662f\u4f7f\u7528\u8fb9\u957f\u5ea6\u548c\u5c5e\u6027\u4e2d\u7684\u901f\u5ea6\u503c\u6765\u8ba1\u7b97\u884c\u7a0b\u65f6\u95f4\u3002 \u662f\u65f6\u5019\u6df1\u5165\u7814\u7a76\u8fd9\u4e2a\u8fc7\u7a0b\u4e86\u3002 \u9996\u5148\uff0c\u8981\u4f7f\u7528\u8fd9\u4e2a\u5e93\uff0c\u6211\u4eec\u5e94\u8be5\u5bfc\u5165\u5206\u6790\u6a21\u5757 1 from qgis.analysis import * \u7136\u540e\u662f\u4e00\u4e9b\u521b\u5efa\u63a7\u5236\u5668\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 # \u4e0d\u8981\u4f7f\u7528\u56fe\u5c42\u5c5e\u6027\u4e2d\u6709\u5173\u9053\u8def\u65b9\u5411\u7684\u4fe1\u606f\uff0c\u6240\u6709\u9053\u8def\u90fd\u662f\u53cc\u5411\u7684 director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , QgsVectorLayerDirector . DirectionBoth ) # \u4f7f\u7528\u7b2c5\u4e2a\u5b57\u6bb5\u4f5c\u4e3a\u9053\u8def\u7684\u65b9\u5411\u4fe1\u606f. # \u6b63\u5411\u5355\u65b9\u5411\u9053\u8def\u4f7f\u7528 \"yes\", # \u53cd\u5411\u5355\u65b9\u5411\u9053\u8def\u4f7f\u7528 \"1\" # \u56e0\u6b64\uff0c\u53cc\u5411\u9053\u8def\u4f7f\u7528 \u201cno\u201d\u3002\u9ed8\u8ba4\u60c5\u51b5\u9053\u8def\u662f\u53cc\u5411\u8def\u3002 # \u6b64\u65b9\u6848\u53ef\u7528\u4e8eOpenStreetMap\u6570\u636e director = QgsVectorLayerDirector ( vectorLayer , 5 , 'yes' , '1' , 'no' , QgsVectorLayerDirector . DirectionBoth ) \u4e3a\u4e86\u6784\u9020\u4e00\u4e2a\u63a7\u5236\u5668\uff0c\u6211\u4eec\u5e94\u8be5\u4f20\u9012\u4e00\u4e2a\u77e2\u91cf\u56fe\u5c42\uff0c\u8be5\u77e2\u91cf\u56fe\u5c42\u4f5c\u4e3a\u56fe\u7ed3\u6784\u7684\u6e90\uff0c\u4ee5\u53ca\u5173\u4e8e\u6bcf\u4e2a\u8def\u6bb5\u4e0a\u5141\u8bb8\u79fb\u52a8\u7684\u4fe1\u606f\uff08\u5355\u5411\u6216\u53cc\u5411\u79fb\u52a8\u3001\u76f4\u63a5\u6216\u53cd\u5411\uff09\uff0c\u50cf\u8fd9\u6837\uff1a 1 2 3 4 5 6 director = QgsVectorLayerDirector ( vectorLayer , directionFieldId , directDirectionValue , reverseDirectionValue , bothDirectionValue , defaultDirection ) \u4ee5\u4e0b\u662f\u8fd9\u4e9b\u53c2\u6570\u7684\u5168\u90e8\u542b\u4e49\uff1a vectorLayer \u2014\u2014\u7528\u4e8e\u6784\u5efa\u56fe\u7684\u77e2\u91cf\u56fe\u5c42 directionFieldId \u2014\u2014\u5b57\u6bb5\u7684\u7d22\u5f15\u503c\uff0c\u7528\u4e8e\u5b58\u50a8\u9053\u8def\u65b9\u5411\u7684\u4fe1\u606f\u3002\u5982\u679c\u662f -1 \uff0c\u8868\u793a\u4e0d\u4f7f\u7528\u8fd9\u4e9b\u4fe1\u606f\u3002\u6574\u578b\u3002 directDirectionValue \u2014\u2014\u6b63\u5411\u7684\u5b57\u6bb5\u503c\uff08\u4ece\u7b2c\u4e00\u4e2a\u76f4\u7ebf\u70b9\u79fb\u52a8\u5230\u6700\u540e\u4e00\u4e2a\u76f4\u7ebf\u70b9\uff09\u3002\u5b57\u7b26\u4e32\u3002 reverseDirectionValue \u2014\u2014\u53cd\u5411\u9053\u8def\u7684\u5b57\u6bb5\u503c\uff08\u4ece\u6700\u540e\u4e00\u4e2a\u76f4\u7ebf\u70b9\u79fb\u52a8\u5230\u7b2c\u4e00\u4e2a\u76f4\u7ebf\u70b9\uff09\u3002\u5b57\u7b26\u4e32\u3002 bothDirectionValue \u2014\u2014\u53cc\u5411\u9053\u8def\u7684\u5b57\u6bb5\u503c\uff08\u5bf9\u4e8e\u8fd9\u6837\u7684\u9053\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u7b2c\u4e00\u70b9\u79fb\u52a8\u5230\u6700\u540e\u4e00\u70b9\uff0c\u4e5f\u53ef\u4ee5\u4ece\u6700\u540e\u4e00\u70b9\u79fb\u52a8\u5230\u7b2c\u4e00\u70b9\uff09\u3002\u5b57\u7b26\u4e32\u3002 defaultDirectio \u2014\u2014\u9ed8\u8ba4\u9053\u8def\u65b9\u5411\u3002\u8be5\u503c\u5c06\u7528\u4e8e\u8fd9\u4e9b\u9053\u8def\u5f53\u5b57\u6bb5 directionFieldId \u672a\u8bbe\u7f6e\u65f6\u6216\u5177\u6709\u4e0e\u4e0a\u9762\u6307\u5b9a\u7684\u4e09\u4e2a\u503c\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\u3002\u53ef\u7528\u7684\u503c\u662f\uff1a QgsVectorLayerDirector.DirectionForward \u2014\u2014\u6b63\u5411\u5355\u5411\u9053\u8def QgsVectorLayerDirector.DirectionBackward \u2014\u2014\u53cd\u5411\u5355\u5411\u9053\u8def QgsVectorLayerDirector.DirectionBoth \u53cc\u5411\u9053\u8def \u7136\u540e\u6709\u5fc5\u8981\u521b\u5efa\u7528\u4e8e\u8ba1\u7b97\u8fb9\u5c5e\u6027\u7684\u7b56\u7565\uff1a 1 2 3 4 5 6 7 # \u5305\u542b\u901f\u5ea6\u4fe1\u606f\u7684\u5b57\u6bb5\u7d22\u5f15\u503c attributeId = 1 # \u9ed8\u8ba4\u901f\u5ea6 defaultValue = 50 # \u8f6c\u5316\u901f\u5ea6\u5230\u7c73\u5236\u5355\u4f4d ('1' \u8868\u793a\u4e0d\u8f6c\u5316) toMetricFactor = 1 strategy = QgsNetworkSpeedStrategy ( attributeId , defaultValue , toMetricFactor ) \u544a\u8bc9\u63a7\u5236\u5668\u8fd9\u4e2a\u7b56\u7565 1 2 director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , 3 ) director . addStrategy ( strategy ) \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u5668\u6765\u521b\u5efa\u56fe\u3002 QgsGraphBuilder \u7c7b\u6784\u9020\u51fd\u6570\u63a5\u53d7\u51e0\u4e2a\u53c2\u6570\uff1a crs \u2014\u2014\u5750\u6807\u53c2\u8003\u7cfb\u7edf\u3002\u5fc5\u9700\u3002 otfEnabled \u2014\u2014\u4f7f\u7528\u201con the fly\u201d \u91cd\u6295\u5f71. \u9ed8\u8ba4\u4e3a True (use OTF). topologyTolerance \u2014\u2014\u62d3\u6251\u5bb9\u5dee\u3002\u9ed8\u8ba4\u4e3a0\u3002 ellipsoidID \u2014\u2014\u53c2\u8003\u692d\u7403\u3002\u9ed8\u8ba4\u4e3a\u201cWGS84\u201d\u3002 1 2 # \u53ea\u8bbe\u7f6eCRS,\uff0c\u5176\u5b83\u503c\u9ed8\u8ba4 builder = QgsGraphBuilder ( vectorLayer . crs ()) \u6211\u4eec\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u51e0\u4e2a\u70b9\uff0c\u8fd9\u4e9b\u70b9\u5c06\u7528\u4e8e\u5206\u6790\u3002\u4f8b\u5982\uff1a 1 2 startPoint = QgsPointXY ( 1179720.1871 , 5419067.3507 ) endPoint = QgsPointXY ( 1180616.0205 , 5419745.7839 ) \u73b0\u5728\u4e00\u5207\u5c31\u7eea\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u56fe\u8868\u5e76\u5c06\u8fd9\u4e9b\u70b9\u201c\u8fde\u63a5\u201d\u5230\u5b83 1 tiedPoints = director . makeGraph ( builder , [ startPoint , endPoint ]) \u6784\u5efa\u56fe\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff08\u8fd9\u53d6\u51b3\u4e8e\u56fe\u5c42\u4e2d\u7684\u8981\u7d20\u6570\u91cf\u548c\u56fe\u5c42\u5927\u5c0f\uff09\u3002 tiedPoints \u662f\u4e00\u4e2a\u5305\u542b\u201c\u7ed1\u5b9a\u201d\u70b9\u5750\u6807\u7684\u5217\u8868\u3002\u5f53\u6784\u5efa\u64cd\u4f5c\u5b8c\u6210\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u56fe\u5e76\u5c06\u5176\u7528\u4e8e\u5206\u6790 1 graph = builder . graph () \u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u70b9\u7684\u9876\u70b9\u7d22\u5f15 1 2 startId = graph . findVertex ( tiedPoints [ 0 ]) endId = graph . findVertex ( tiedPoints [ 1 ])","title":"19.2 \u6784\u5efa\u4e00\u4e2a\u56fe"},{"location":"19-%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E5%BA%93/#193","text":"\u7f51\u7edc\u5206\u6790\u7528\u4e8e\u627e\u5230\u4e24\u4e2a\u95ee\u9898\u7684\u7b54\u6848\uff1a\u54ea\u4e9b\u9876\u70b9\u662f\u76f8\u8fde\u7684\uff0c\u4ee5\u53ca\u5982\u4f55\u627e\u5230\u6700\u77ed\u8def\u5f84\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u7f51\u7edc\u5206\u6790\u5e93\u63d0\u4f9b\u4e86Dijkstra\u7b97\u6cd5\u3002 Dijkstra\u7b97\u6cd5\u627e\u5230\u4ece\u56fe\u7684\u4e00\u4e2a\u9876\u70b9\u5230\u6240\u6709\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4ee5\u53ca\u4f18\u5316\u53c2\u6570\u7684\u503c\u3002\u7ed3\u679c\u53ef\u4ee5\u8868\u793a\u4e3a\u6700\u77ed\u8def\u5f84\u6811\u3002 \u6700\u77ed\u8def\u5f84\u6811\u662f\u4e00\u4e2a\u6709\u5411\u52a0\u6743\u56fe\uff08\u6216\u66f4\u51c6\u786e\u5730\u8bf4\u662f\u4e00\u68f5\u6811\uff09\uff0c\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a \u53ea\u6709\u4e00\u4e2a\u9876\u70b9\u6ca1\u6709\u5165\u5c04\u8fb9\u2014\u2014\u6811\u7684\u6839 \u6240\u6709\u5176\u4ed6\u9876\u70b9\u53ea\u6709\u4e00\u6761\u5165\u5c04\u8fb9 \u5982\u679c\u9876\u70b9B\u53ef\u4ee5\u4ece\u9876\u70b9A\u5230\u8fbe\uff0c\u90a3\u4e48\u4eceA\u5230B\u7684\u8def\u5f84\u662f\u552f\u4e00\u53ef\u7528\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u5b83\u5728\u8be5\u56fe\u4e0a\u662f\u6700\u4f18\u7684\uff08\u6700\u77ed\u7684\uff09\u8def\u5f84 \u8981\u83b7\u5f97\u6700\u77ed\u8def\u5f84\u6811\uff0c\u53ef\u4ee5\u4f7f\u7528 QgsGraphAnalyzer \u7c7b\u7684 shortestTree() \u548c dijkstra() \u65b9\u6cd5\u3002\u5efa\u8bae\u4f7f\u7528 dijkstra() \u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u66f4\u5feb\uff0c\u800c\u4e14\u66f4\u6709\u6548\u5730\u4f7f\u7528\u5185\u5b58\u3002 shortestTree() \u65b9\u6cd5\u5728\u4f60\u60f3\u5728\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u884c\u8d70\u65f6\u5f88\u6709\u7528\u3002\u5b83\u603b\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u56fe\u5bf9\u8c61\uff08QgsGraph\uff09\u5e76\u63a5\u53d7\u4e09\u4e2a\u53d8\u91cf\uff1a source \u2014\u2014\u8f93\u5165\u7684\u56fe startVertexIdx \u2014\u2014\u6811\u4e0a\u7684\u70b9\u7684\u7d22\u5f15\uff08\u6811\u7684\u6839\uff09 criterionNum \u2014\u2014\u4f7f\u7528\u7684\u8fb9\u5c5e\u6027\u7684\u6570\u91cf\uff08\u4ece0\u5f00\u59cb\uff09 1 tree = QgsGraphAnalyzer . shortestTree ( graph , startId , 0 ) dijkstra() \u65b9\u6cd5\u6709\u76f8\u540c\u7684\u53c2\u6570\uff0c\u4f46\u8fd4\u56de\u4e24\u4e2a\u6570\u7ec4\u3002\u5728\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0cn\u5143\u7d20\u5305\u542b\u4f20\u5165\u8fb9\u7684\u7d22\u5f15\uff0c\u5982\u679c\u6ca1\u6709\u4f20\u5165\u8fb9\u5219\u4e3a-1\u3002\u5728\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\uff0cn\u5143\u7d20\u5305\u542b\u4ece\u6811\u7684\u6839\u5230\u9876\u70b9n\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u9876\u70b9n\u4ece\u6839\u90e8\u65e0\u6cd5\u5230\u8fbe\uff0c\u5219\u4e3aDOUBLE_MAX\u3002 1 ( tree , cost ) = QgsGraphAnalyzer . dijkstra ( graph , startId , 0 ) \u4e0b\u9762\u662f\u4e00\u4e9b\u975e\u5e38\u7b80\u5355\u7684\u4ee3\u7801\uff0c\u4f7f\u7528 shortestTree() \u65b9\u6cd5\u521b\u5efa\u7684\u56fe\u663e\u793a\u6700\u77ed\u8def\u5f84\u6811\uff08\u5728 Layers \u9762\u677f\u4e2d\u9009\u62e9 linestring \u56fe\u5c42\uff0c\u7528\u4f60\u81ea\u5df1\u7684\u5750\u6807\u66ff\u6362\uff09\u3002 \u8b66\u544a \u8fd9\u6bb5\u4ee3\u7801\u4ec5\u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b83\u521b\u5efa\u4e86\u5927\u91cf\u7684 QgsRubberBand \u5bf9\u8c61\uff0c\u5728\u5927\u6570\u636e\u96c6\u4e0a\u53ef\u80fd\u4f1a\u5f88\u6162\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from qgis.core import * from qgis.gui import * from qgis.analysis import * from qgis.PyQt.QtCore import * from qgis.PyQt.QtGui import * vectorLayer = QgsVectorLayer ( 'testdata/network.gpkg|layername=network_lines' , 'lines' ) director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , QgsVectorLayerDirector . DirectionBoth ) strategy = QgsNetworkDistanceStrategy () director . addStrategy ( strategy ) builder = QgsGraphBuilder ( vectorLayer . crs ()) pStart = QgsPointXY ( 1179661.925139 , 5419188.074362 ) tiedPoint = director . makeGraph ( builder , [ pStart ]) pStart = tiedPoint [ 0 ] graph = builder . graph () idStart = graph . findVertex ( pStart ) tree = QgsGraphAnalyzer . shortestTree ( graph , idStart , 0 ) i = 0 while ( i < tree . edgeCount ()): rb = QgsRubberBand ( iface . mapCanvas ()) rb . setColor ( Qt . red ) rb . addPoint ( tree . vertex ( tree . edge ( i ) . fromVertex ()) . point ()) rb . addPoint ( tree . vertex ( tree . edge ( i ) . toVertex ()) . point ()) i = i + 1 \u4f7f\u7528 dijkstra() \u65b9\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 from qgis.core import * from qgis.gui import * from qgis.analysis import * from qgis.PyQt.QtCore import * from qgis.PyQt.QtGui import * vectorLayer = QgsVectorLayer ( 'testdata/network.gpkg|layername=network_lines' , 'lines' ) director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , QgsVectorLayerDirector . DirectionBoth ) strategy = QgsNetworkDistanceStrategy () director . addStrategy ( strategy ) builder = QgsGraphBuilder ( vectorLayer . crs ()) pStart = QgsPointXY ( 1179661.925139 , 5419188.074362 ) tiedPoint = director . makeGraph ( builder , [ pStart ]) pStart = tiedPoint [ 0 ] graph = builder . graph () idStart = graph . findVertex ( pStart ) ( tree , costs ) = QgsGraphAnalyzer . dijkstra ( graph , idStart , 0 ) for edgeId in tree : if edgeId == - 1 : continue rb = QgsRubberBand ( iface . mapCanvas ()) rb . setColor ( Qt . red ) rb . addPoint ( graph . vertex ( graph . edge ( edgeId ) . fromVertex ()) . point ()) rb . addPoint ( graph . vertex ( graph . edge ( edgeId ) . toVertex ()) . point ())","title":"19.3 \u56fe\u5206\u6790"},{"location":"19-%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E5%BA%93/#1931","text":"\u4e3a\u4e86\u627e\u5230\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u4f73\u8def\u5f84\uff0c\u91c7\u7528\u4e86\u4ee5\u4e0b\u65b9\u6cd5\u3002\u4e24\u70b9\uff08\u8d77\u70b9A\u548c\u7ec8\u70b9B\uff09\u5728\u56fe\u5efa\u7acb\u65f6\u90fd\u88ab \"\u6346\u7ed1 \"\u5728\u4e00\u8d77\u3002\u7136\u540e\u4f7f\u7528 shortestTree() \u6216 dijkstra() \u65b9\u6cd5\uff0c\u6211\u4eec\u5efa\u7acb\u4ee5\u8d77\u70b9A\u4e3a\u6839\u7684\u6700\u77ed\u8def\u5f84\u6811\u3002\u5728\u540c\u4e00\u68f5\u6811\u4e0a\uff0c\u6211\u4eec\u4e5f\u627e\u5230\u4e86\u7ec8\u70b9B\uff0c\u5e76\u5f00\u59cb\u4eceB\u70b9\u8d70\u5230A\u70b9\uff0c\u6574\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 assign T = B while T != B add point T to path get incoming edge for point T look for point TT , that is start point of this edge assign T = TT add point A to path \u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u8def\u5f84\uff0c\u5176\u5f62\u5f0f\u662f\u9876\u70b9\u7684\u5012\u7f6e\u5217\u8868\uff08\u9876\u70b9\u662f\u6309\u7167\u4ece\u7ec8\u70b9\u5230\u8d77\u70b9\u7684\u76f8\u53cd\u987a\u5e8f\u6392\u5217\u7684\uff09\uff0c\u8fd9\u4e9b\u9876\u70b9\u5c06\u5728\u8fd9\u6761\u8def\u5f84\u7684\u884c\u7a0b\u4e2d\u88ab\u8bbf\u95ee\u3002 \u4ee5\u4e0b\u662f\u4f7f\u7528 shortestTree() \u65b9\u6cd5\u7684QGIS Python\u63a7\u5236\u53f0\u793a\u4f8b\u4ee3\u7801\uff08\u4f60\u53ef\u80fd\u9700\u8981\u5728\u56fe\u5c42\u76ee\u5f55\u6811\u4e2d\u4e2d\u52a0\u8f7d\u5e76\u9009\u62e9\u4e00\u4e2a\u7ebf\u56fe\u5c42\uff0c\u5e76\u5c06\u4ee3\u7801\u4e2d\u7684\u5750\u6807\u66ff\u6362\u4e3a\u4f60\u7684\u5750\u6807\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from qgis.core import * from qgis.gui import * from qgis.analysis import * from qgis.PyQt.QtCore import * from qgis.PyQt.QtGui import * vectorLayer = QgsVectorLayer ( 'testdata/network.gpkg|layername=network_lines' , 'lines' ) builder = QgsGraphBuilder ( vectorLayer . sourceCrs ()) director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , QgsVectorLayerDirector . DirectionBoth ) startPoint = QgsPointXY ( 1179661.925139 , 5419188.074362 ) endPoint = QgsPointXY ( 1180942.970617 , 5420040.097560 ) tiedPoints = director . makeGraph ( builder , [ startPoint , endPoint ]) tStart , tStop = tiedPoints graph = builder . graph () idxStart = graph . findVertex ( tStart ) tree = QgsGraphAnalyzer . shortestTree ( graph , idxStart , 0 ) idxStart = tree . findVertex ( tStart ) idxEnd = tree . findVertex ( tStop ) if idxEnd == - 1 : raise Exception ( 'No route!' ) # \u6dfb\u52a0\u6700\u540e\u4e00\u4e2a\u70b9 route = [ tree . vertex ( idxEnd ) . point ()] # \u904d\u5386\u56fe while idxEnd != idxStart : edgeIds = tree . vertex ( idxEnd ) . incomingEdges () if len ( edgeIds ) == 0 : break edge = tree . edge ( edgeIds [ 0 ]) route . insert ( 0 , tree . vertex ( edge . fromVertex ()) . point ()) idxEnd = edge . fromVertex () # \u663e\u793a rb = QgsRubberBand ( iface . mapCanvas ()) rb . setColor ( Qt . green ) # \u5982\u679c\u9879\u76ee\u7684\u5750\u6807\u7cfb\u548c\u56fe\u5c42\u7684\u5750\u6807\u7cfb\u4e0d\u4e00\u6837\uff0c\u5219\u9700\u8981\u5750\u6807\u8f6c\u6362 for p in route : rb . addPoint ( p ) \u4f7f\u7528 dijkstra() \u65b9\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from qgis.core import * from qgis.gui import * from qgis.analysis import * from qgis.PyQt.QtCore import * from qgis.PyQt.QtGui import * vectorLayer = QgsVectorLayer ( 'testdata/network.gpkg|layername=network_lines' , 'lines' ) director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , QgsVectorLayerDirector . DirectionBoth ) strategy = QgsNetworkDistanceStrategy () director . addStrategy ( strategy ) builder = QgsGraphBuilder ( vectorLayer . sourceCrs ()) startPoint = QgsPointXY ( 1179661.925139 , 5419188.074362 ) endPoint = QgsPointXY ( 1180942.970617 , 5420040.097560 ) tiedPoints = director . makeGraph ( builder , [ startPoint , endPoint ]) tStart , tStop = tiedPoints graph = builder . graph () idxStart = graph . findVertex ( tStart ) idxEnd = graph . findVertex ( tStop ) ( tree , costs ) = QgsGraphAnalyzer . dijkstra ( graph , idxStart , 0 ) if tree [ idxEnd ] == - 1 : raise Exception ( 'No route!' ) # Total cost cost = costs [ idxEnd ] # \u6dfb\u52a0\u6700\u540e\u4e00\u4e2a\u70b9 route = [ graph . vertex ( idxEnd ) . point ()] # \u904d\u5386\u56fe while idxEnd != idxStart : idxEnd = graph . edge ( tree [ idxEnd ]) . fromVertex () route . insert ( 0 , graph . vertex ( idxEnd ) . point ()) # \u663e\u793a rb = QgsRubberBand ( iface . mapCanvas ()) rb . setColor ( Qt . red ) # \u5982\u679c\u9879\u76ee\u7684\u5750\u6807\u7cfb\u548c\u56fe\u5c42\u7684\u5750\u6807\u7cfb\u4e0d\u4e00\u6837\uff0c\u5219\u9700\u8981\u5750\u6807\u8f6c\u6362 for p in route : rb . addPoint ( p )","title":"19.3.1 \u67e5\u627e\u6700\u77ed\u8def\u5f84"},{"location":"19-%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E5%BA%93/#1932","text":"\u9876\u70b9A\u7684\u53ef\u8fbe\u533a\u57df\u662f\u6307\u53ef\u4ee5\u4ece\u9876\u70b9A\u8fdb\u5165\u7684\u56fe\u5f62\u9876\u70b9\u7684\u5b50\u96c6\uff0c\u5e76\u4e14\u4eceA\u5230\u8fd9\u4e9b\u9876\u70b9\u7684\u8def\u5f84\u6210\u672c\u4e0d\u8d85\u8fc7\u67d0\u4e2a\u503c\u3002 \u8fd9\u4e00\u70b9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4f8b\u5b50\u66f4\u6e05\u695a\u5730\u8868\u660e\u3002\"\u6709\u4e00\u4e2a\u6d88\u9632\u7ad9\uff0c\u6d88\u9632\u8f66\u53ef\u4ee5\u57285\u5206\u949f\u5185\u5230\u8fbe\u57ce\u5e02\u7684\u54ea\u4e9b\u5730\u65b9\uff1f10\u5206\u949f\uff1f15\u5206\u949f\uff1f\"\u3002\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f\u6d88\u9632\u7ad9\u7684\u53ef\u8fbe\u533a\u57df\u3002 \u4e3a\u4e86\u627e\u5230\u53ef\u8fbe\u7684\u533a\u57df\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 QgsGraphAnalyzer \u7c7b\u7684 dijkstra() \u65b9\u6cd5\u3002\u53ea\u9700\u5c06cost\u6570\u7ec4\u7684\u5143\u7d20\u4e0e\u9884\u5b9a\u4e49\u7684\u503c\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679ccost[i]\u5c0f\u4e8e\u6216\u7b49\u4e8e\u4e00\u4e2a\u9884\u5b9a\u4e49\u7684\u503c\uff0c\u90a3\u4e48\u9876\u70b9i\u5c31\u5728\u53ef\u8fbe\u533a\u57df\u5185\uff0c\u5426\u5219\u5b83\u5c31\u5728\u5916\u9762\u3002 \u4e00\u4e2a\u66f4\u56f0\u96be\u7684\u95ee\u9898\u662f\u8981\u5f97\u5230\u53ef\u8fbe\u533a\u57df\u7684\u8fb9\u754c\u3002\u5e95\u90e8\u8fb9\u754c\u662f\u4ecd\u53ef\u8bbf\u95ee\u7684\u9876\u70b9\u96c6\u5408\uff0c\u800c\u9876\u90e8\u8fb9\u754c\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684\u9876\u70b9\u96c6\u5408\u3002\u4e8b\u5b9e\u4e0a\u8fd9\u5f88\u7b80\u5355\uff1a\u5b83\u662f\u57fa\u4e8e\u6700\u77ed\u8def\u5f84\u6811\u7684\u8fb9\u7684\u53ef\u8fbe\u6027\u8fb9\u754c\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u8fb9\u7684\u6e90\u9876\u70b9\u662f\u53ef\u8bbf\u95ee\u7684\uff0c\u800c\u8fb9\u7684\u76ee\u6807\u9876\u70b9\u5219\u4e0d\u662f\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 director = QgsVectorLayerDirector ( vectorLayer , - 1 , '' , '' , '' , QgsVectorLayerDirector . DirectionBoth ) strategy = QgsNetworkDistanceStrategy () director . addStrategy ( strategy ) builder = QgsGraphBuilder ( vectorLayer . crs ()) pStart = QgsPointXY ( 1179661.925139 , 5419188.074362 ) delta = iface . mapCanvas () . getCoordinateTransform () . mapUnitsPerPixel () * 1 rb = QgsRubberBand ( iface . mapCanvas (), True ) rb . setColor ( Qt . green ) rb . addPoint ( QgsPointXY ( pStart . x () - delta , pStart . y () - delta )) rb . addPoint ( QgsPointXY ( pStart . x () + delta , pStart . y () - delta )) rb . addPoint ( QgsPointXY ( pStart . x () + delta , pStart . y () + delta )) rb . addPoint ( QgsPointXY ( pStart . x () - delta , pStart . y () + delta )) tiedPoints = director . makeGraph ( builder , [ pStart ]) graph = builder . graph () tStart = tiedPoints [ 0 ] idStart = graph . findVertex ( tStart ) ( tree , cost ) = QgsGraphAnalyzer . dijkstra ( graph , idStart , 0 ) upperBound = [] r = 1500.0 i = 0 tree . reverse () while i < len ( cost ): if cost [ i ] > r and tree [ i ] != - 1 : outVertexId = graph . edge ( tree [ i ]) . toVertex () if cost [ outVertexId ] < r : upperBound . append ( i ) i = i + 1 for i in upperBound : centerPoint = graph . vertex ( i ) . point () rb = QgsRubberBand ( iface . mapCanvas (), True ) rb . setColor ( Qt . red ) rb . addPoint ( QgsPointXY ( centerPoint . x () - delta , centerPoint . y () - delta )) rb . addPoint ( QgsPointXY ( centerPoint . x () + delta , centerPoint . y () - delta )) rb . addPoint ( QgsPointXY ( centerPoint . x () + delta , centerPoint . y () + delta )) rb . addPoint ( QgsPointXY ( centerPoint . x () - delta , centerPoint . y () + delta ))","title":"19.3.2 \u53ef\u8fbe\u533a\u57df"},{"location":"2-%E5%8A%A0%E8%BD%BD%E9%A1%B9%E7%9B%AE/","text":"\u672c\u8282\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 from qgis.core import ( QgsProject , QgsPathResolver ) from qgis.gui import ( QgsLayerTreeMapCanvasBridge , ) 2 \u52a0\u8f7d\u9879\u76ee \u2693\ufe0e \u6709\u65f6\u4f60\u9700\u8981\u4ece\u63d2\u4ef6\u52a0\u8f7d\u73b0\u6709\u9879\u76ee\uff0c\u6216\u8005\uff08\u66f4\u5e38\u89c1\uff09\u5728\u5f00\u53d1\u72ec\u7acb\u7684QGIS Python\u5e94\u7528\u7a0b\u5e8f\u65f6\u52a0\u8f7d\uff08\u8bf7\u53c2\u9605\uff1a Python\u5e94\u7528\u7a0b\u5e8f \uff09\u3002 \u5c06\u9879\u76ee\u52a0\u8f7d\u5230\u5f53\u524dQGIS\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u9700\u8981\u521b\u5efa QgsProject \u7c7b\u7684\u5b9e\u4f8b\u3002\u8fd9\u662f\u4e00\u4e2a\u5355\u4f8b\u7c7b\uff0c\u56e0\u6b64\u4f60\u5fc5\u987b\u4f7f\u7528\u5176 instance() \u65b9\u6cd5\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u4f60\u53ef\u4ee5\u8c03\u7528 read() \u65b9\u6cd5\uff0c\u4f20\u9012\u52a0\u8f7d\u9879\u76ee\u7684\u8def\u5f84\uff1a 1 2 3 4 5 6 7 8 9 10 11 # \u5982\u679c\u4f60\u4e0d\u5728QGIS\u63a7\u5236\u53f0\u5185\u8fd0\u884c\uff0c\u9996\u5148\u9700\u8981\u5bfc\u5165qgis\u548cPyQt\u7c7b\uff0c\u5982\u4e0b\u6240\u793a\uff1a from qgis.core import QgsProject # \u83b7\u53d6\u9879\u76ee\u5b9e\u4f8b project = QgsProject . instance () # \u6253\u5370\u5f53\u524d\u9879\u76ee\u7684\u6587\u4ef6\u540d\uff08\u53ef\u80fd\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u6ca1\u6709\u9879\u76ee\u52a0\u8f7d\uff09 # print(project.fileName()) # \u52a0\u8f7d\u53e6\u4e00\u4e2a\u9879\u76ee project . read ( 'testdata/01_project.qgs' ) print ( project . fileName ()) # testdata/01_project.qgs \u5982\u679c\u4f60\u9700\u8981\u5bf9\u9879\u76ee\u8fdb\u884c\u4fee\u6539\uff08\u4f8b\u5982\u6dfb\u52a0\u6216\u5220\u9664\u67d0\u4e9b\u56fe\u5c42\uff09\u5e76\u4fdd\u5b58\u66f4\u6539\uff0c\u8c03\u7528 write() \u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u8fd8\u652f\u6301\u5c06\u9879\u76ee\u4fdd\u5b58\u5230\u65b0\u7684\u4f4d\u7f6e\uff1a 1 2 3 4 # \u5c06\u9879\u76ee\u4fdd\u5b58\u5230\u540c\u4e00\u4e2a\u6587\u4ef6 project . write () # ...\u6216\u65b0\u6587\u4ef6 project . write ( 'testdata/my_new_qgis_project.qgs' ) read() \u548c write() \u51fd\u6570\u90fd\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u68c0\u67e5\u64cd\u4f5c\u662f\u5426\u6210\u529f\u3002 \u63d0\u793a \u5982\u679c\u4f60\u6b63\u5728\u7f16\u5199QGIS\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e3a\u4e86\u5c06\u52a0\u8f7d\u7684\u9879\u76ee\u4e0e\u753b\u5e03\u540c\u6b65\uff0c\u4f60\u9700\u8981\u5b9e\u4f8b\u5316 QgsLayerTreeMapCanvasBridge \uff0c\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 bridge = QgsLayerTreeMapCanvasBridge ( QgsProject . instance () . layerTreeRoot (), canvas ) # \u73b0\u5728\u4f60\u53ef\u4ee5\u5b89\u5168\u5730\u52a0\u8f7d\u9879\u76ee\uff0c\u5e76\u5728\u753b\u5e03\u4e0a\u770b\u5230\u5b83 project . read ( 'testdata/my_new_qgis_project.qgs' ) 2.1 \u89e3\u51b3\u9519\u8bef\u8def\u5f84 \u2693\ufe0e \u5728\u9879\u76ee\u4e2d\u52a0\u8f7d\u7684\u56fe\u5c42\u53ef\u80fd\u88ab\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5f53\u9879\u76ee\u518d\u6b21\u52a0\u8f7d\u65f6\uff0c\u6240\u6709\u7684\u56fe\u5c42\u8def\u5f84\u90fd\u88ab\u7834\u574f\u3002 QgsPathResolver \u7c7b\u7684 setPathPreprocessor() \u65b9\u6cd5\u5141\u8bb8\u8bbe\u7f6e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u8def\u5f84\u9884\u5904\u7406\u51fd\u6570\uff0c\u5b83\u5141\u8bb8\u5728\u5c06\u8def\u5f84\u548c\u6570\u636e\u6e90\u89e3\u6790\u4e3a\u6587\u4ef6\u5f15\u7528\u6216\u56fe\u5c42\u6e90\u4e4b\u524d\u5bf9\u5b83\u4eec\u8fdb\u884c\u64cd\u4f5c\u3002 \u8be5\u5904\u7406\u51fd\u6570\u5fc5\u987b\u63a5\u53d7\u4e00\u4e2a\u5355\u4e00\u7684\u5b57\u7b26\u4e32\u53c2\u6570\uff08\u4ee3\u8868\u539f\u59cb\u6587\u4ef6\u8def\u5f84\u6216\u6570\u636e\u6e90\uff09\uff0c\u5e76\u8fd4\u56de\u8be5\u8def\u5f84\u7684\u5904\u7406\u7248\u672c\u3002 \u8def\u5f84\u9884\u5904\u7406\u5668\u51fd\u6570\u5728\u4efb\u4f55\u9519\u8bef\u56fe\u5c42\u5904\u7406\u7a0b\u5e8f\u4e4b\u524d\u88ab\u8c03\u7528\u3002 \u4e00\u4e9b\u5e94\u7528\u6848\u4f8b\uff1a \u66ff\u6362\u8fc7\u65f6\u7684\u8def\u5f84\uff1a 1 2 3 4 def my_processor ( path ): return path . replace ( 'c:/Users/ClintBarton/Documents/Projects' , 'x:/Projects/' ) QgsPathResolver . setPathPreprocessor ( my_processor ) \u7528\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5e93\u4e3b\u673a\u5730\u5740\u6765\u66ff\u6362\uff1a 1 2 3 4 def my_processor ( path ): return path . replace ( 'host=10.1.1.115' , 'host=10.1.1.116' ) QgsPathResolver . setPathPreprocessor ( my_processor ) \u66ff\u6362\u65b0\u7684\u6570\u636e\u5e93\u8bc1\u4e66\uff1a 1 2 3 4 5 6 def my_processor ( path ): path = path . replace ( \"user='gis_team'\" , \"user='team_awesome'\" ) path = path . replace ( \"password='cats'\" , \"password='g7as!m*'\" ) return path QgsPathResolver . setPathPreprocessor ( my_processor )","title":"2-\u52a0\u8f7d\u9879\u76ee"},{"location":"2-%E5%8A%A0%E8%BD%BD%E9%A1%B9%E7%9B%AE/#2","text":"\u6709\u65f6\u4f60\u9700\u8981\u4ece\u63d2\u4ef6\u52a0\u8f7d\u73b0\u6709\u9879\u76ee\uff0c\u6216\u8005\uff08\u66f4\u5e38\u89c1\uff09\u5728\u5f00\u53d1\u72ec\u7acb\u7684QGIS Python\u5e94\u7528\u7a0b\u5e8f\u65f6\u52a0\u8f7d\uff08\u8bf7\u53c2\u9605\uff1a Python\u5e94\u7528\u7a0b\u5e8f \uff09\u3002 \u5c06\u9879\u76ee\u52a0\u8f7d\u5230\u5f53\u524dQGIS\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u9700\u8981\u521b\u5efa QgsProject \u7c7b\u7684\u5b9e\u4f8b\u3002\u8fd9\u662f\u4e00\u4e2a\u5355\u4f8b\u7c7b\uff0c\u56e0\u6b64\u4f60\u5fc5\u987b\u4f7f\u7528\u5176 instance() \u65b9\u6cd5\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u4f60\u53ef\u4ee5\u8c03\u7528 read() \u65b9\u6cd5\uff0c\u4f20\u9012\u52a0\u8f7d\u9879\u76ee\u7684\u8def\u5f84\uff1a 1 2 3 4 5 6 7 8 9 10 11 # \u5982\u679c\u4f60\u4e0d\u5728QGIS\u63a7\u5236\u53f0\u5185\u8fd0\u884c\uff0c\u9996\u5148\u9700\u8981\u5bfc\u5165qgis\u548cPyQt\u7c7b\uff0c\u5982\u4e0b\u6240\u793a\uff1a from qgis.core import QgsProject # \u83b7\u53d6\u9879\u76ee\u5b9e\u4f8b project = QgsProject . instance () # \u6253\u5370\u5f53\u524d\u9879\u76ee\u7684\u6587\u4ef6\u540d\uff08\u53ef\u80fd\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u6ca1\u6709\u9879\u76ee\u52a0\u8f7d\uff09 # print(project.fileName()) # \u52a0\u8f7d\u53e6\u4e00\u4e2a\u9879\u76ee project . read ( 'testdata/01_project.qgs' ) print ( project . fileName ()) # testdata/01_project.qgs \u5982\u679c\u4f60\u9700\u8981\u5bf9\u9879\u76ee\u8fdb\u884c\u4fee\u6539\uff08\u4f8b\u5982\u6dfb\u52a0\u6216\u5220\u9664\u67d0\u4e9b\u56fe\u5c42\uff09\u5e76\u4fdd\u5b58\u66f4\u6539\uff0c\u8c03\u7528 write() \u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u8fd8\u652f\u6301\u5c06\u9879\u76ee\u4fdd\u5b58\u5230\u65b0\u7684\u4f4d\u7f6e\uff1a 1 2 3 4 # \u5c06\u9879\u76ee\u4fdd\u5b58\u5230\u540c\u4e00\u4e2a\u6587\u4ef6 project . write () # ...\u6216\u65b0\u6587\u4ef6 project . write ( 'testdata/my_new_qgis_project.qgs' ) read() \u548c write() \u51fd\u6570\u90fd\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u68c0\u67e5\u64cd\u4f5c\u662f\u5426\u6210\u529f\u3002 \u63d0\u793a \u5982\u679c\u4f60\u6b63\u5728\u7f16\u5199QGIS\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e3a\u4e86\u5c06\u52a0\u8f7d\u7684\u9879\u76ee\u4e0e\u753b\u5e03\u540c\u6b65\uff0c\u4f60\u9700\u8981\u5b9e\u4f8b\u5316 QgsLayerTreeMapCanvasBridge \uff0c\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 bridge = QgsLayerTreeMapCanvasBridge ( QgsProject . instance () . layerTreeRoot (), canvas ) # \u73b0\u5728\u4f60\u53ef\u4ee5\u5b89\u5168\u5730\u52a0\u8f7d\u9879\u76ee\uff0c\u5e76\u5728\u753b\u5e03\u4e0a\u770b\u5230\u5b83 project . read ( 'testdata/my_new_qgis_project.qgs' )","title":"2 \u52a0\u8f7d\u9879\u76ee"},{"location":"2-%E5%8A%A0%E8%BD%BD%E9%A1%B9%E7%9B%AE/#21","text":"\u5728\u9879\u76ee\u4e2d\u52a0\u8f7d\u7684\u56fe\u5c42\u53ef\u80fd\u88ab\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5f53\u9879\u76ee\u518d\u6b21\u52a0\u8f7d\u65f6\uff0c\u6240\u6709\u7684\u56fe\u5c42\u8def\u5f84\u90fd\u88ab\u7834\u574f\u3002 QgsPathResolver \u7c7b\u7684 setPathPreprocessor() \u65b9\u6cd5\u5141\u8bb8\u8bbe\u7f6e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u8def\u5f84\u9884\u5904\u7406\u51fd\u6570\uff0c\u5b83\u5141\u8bb8\u5728\u5c06\u8def\u5f84\u548c\u6570\u636e\u6e90\u89e3\u6790\u4e3a\u6587\u4ef6\u5f15\u7528\u6216\u56fe\u5c42\u6e90\u4e4b\u524d\u5bf9\u5b83\u4eec\u8fdb\u884c\u64cd\u4f5c\u3002 \u8be5\u5904\u7406\u51fd\u6570\u5fc5\u987b\u63a5\u53d7\u4e00\u4e2a\u5355\u4e00\u7684\u5b57\u7b26\u4e32\u53c2\u6570\uff08\u4ee3\u8868\u539f\u59cb\u6587\u4ef6\u8def\u5f84\u6216\u6570\u636e\u6e90\uff09\uff0c\u5e76\u8fd4\u56de\u8be5\u8def\u5f84\u7684\u5904\u7406\u7248\u672c\u3002 \u8def\u5f84\u9884\u5904\u7406\u5668\u51fd\u6570\u5728\u4efb\u4f55\u9519\u8bef\u56fe\u5c42\u5904\u7406\u7a0b\u5e8f\u4e4b\u524d\u88ab\u8c03\u7528\u3002 \u4e00\u4e9b\u5e94\u7528\u6848\u4f8b\uff1a \u66ff\u6362\u8fc7\u65f6\u7684\u8def\u5f84\uff1a 1 2 3 4 def my_processor ( path ): return path . replace ( 'c:/Users/ClintBarton/Documents/Projects' , 'x:/Projects/' ) QgsPathResolver . setPathPreprocessor ( my_processor ) \u7528\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5e93\u4e3b\u673a\u5730\u5740\u6765\u66ff\u6362\uff1a 1 2 3 4 def my_processor ( path ): return path . replace ( 'host=10.1.1.115' , 'host=10.1.1.116' ) QgsPathResolver . setPathPreprocessor ( my_processor ) \u66ff\u6362\u65b0\u7684\u6570\u636e\u5e93\u8bc1\u4e66\uff1a 1 2 3 4 5 6 def my_processor ( path ): path = path . replace ( \"user='gis_team'\" , \"user='team_awesome'\" ) path = path . replace ( \"password='cats'\" , \"password='g7as!m*'\" ) return path QgsPathResolver . setPathPreprocessor ( my_processor )","title":"2.1 \u89e3\u51b3\u9519\u8bef\u8def\u5f84"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/","text":"20-QGIS\u670d\u52a1\u5668\u548cPython \u2693\ufe0e 20.1 \u4ecb\u7ecd \u2693\ufe0e \u8981\u4e86\u89e3\u6709\u5173QGIS\u670d\u52a1\u5668\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb QGIS\u670d\u52a1\u5668\u6307\u5357/\u624b\u518c \u3002 QGIS\u670d\u52a1\u5668\u662f\u4e09\u4e2a\u4e0d\u540c\u7684\u4e1c\u897f\uff1a QGIS\u670d\u52a1\u5668\u5e93\uff1a\u4e00\u4e2a\u4e3a\u521b\u5efaOGC\u7f51\u7edc\u670d\u52a1\u63d0\u4f9bAPI\u7684\u5e93 QGIS\u670d\u52a1\u5668FCGI\uff1a\u4e00\u4e2aFCGI\u4e8c\u8fdb\u5236\u5e94\u7528\u7a0b\u5e8f qgis_maserv.fcgi \uff0c\u4e0e\u7f51\u7edc\u670d\u52a1\u5668\u4e00\u8d77\u5b9e\u73b0\u4e00\u5957OGC\u670d\u52a1\uff08WMS\u3001WFS\u3001WCS\u7b49\uff09\u548cOGC APIs\uff08WFS3/OAPIF\uff09\u3002 QGIS\u5f00\u53d1\u670d\u52a1\u5668\uff1a\u4e00\u4e2a\u5f00\u53d1\u670d\u52a1\u5668\u4e8c\u8fdb\u5236\u5e94\u7528\u7a0b\u5e8f qgis_mapserver \uff0c\u5b9e\u73b0\u4e86\u4e00\u5957OGC\u670d\u52a1\uff08WMS\u3001WFS\u3001WCS\u7b49\uff09\u548cOGC APIs\uff08WFS3/OAPIF\uff09\u3002 \u672c\u7ae0\u7684\u91cd\u70b9\u662f\u7b2c\u4e00\u4e2a\u8bdd\u9898\uff0c\u901a\u8fc7\u89e3\u91caQGIS\u670d\u52a1\u5668API\u7684\u7528\u6cd5\u6765\u8bf4\u660e\u5982\u4f55\u4f7f\u7528Python\u6765\u6269\u5c55\u3001\u589e\u5f3a\u6216\u5b9a\u5236\u670d\u52a1\u5668\u884c\u4e3a\uff0c\u6216\u5982\u4f55\u4f7f\u7528QGIS\u670d\u52a1\u5668API\u5c06QGIS\u670d\u52a1\u5668\u5d4c\u5165\u5230\u53e6\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u6539\u53d8QGIS\u670d\u52a1\u5668\u7684\u884c\u4e3a\u6216\u6269\u5c55\u5176\u529f\u80fd\uff0c\u4ee5\u63d0\u4f9b\u65b0\u7684\u5b9a\u5236\u670d\u52a1\u6216API\uff0c\u4e00\u4e0b\u662f\u4f60\u53ef\u80fd\u9762\u4e34\u7684\u4e3b\u8981\u60c5\u51b5\uff1a \u878d\u5408 \u2192 \u4ece\u53e6\u4e00\u4e2aPython\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528QGIS\u670d\u52a1\u5668API \u72ec\u7acb \u2192 \u4ee5\u72ec\u7acb\u7684WSGI/HTTP\u670d\u52a1\u65b9\u5f0f\u8fd0\u884cQGIS\u670d\u52a1\u5668 \u8fc7\u6ee4 \u2192 \u4f7f\u7528\u8fc7\u6ee4\u63d2\u4ef6\u589e\u5f3a/\u5b9a\u5236QGIS\u670d\u52a1\u5668 \u670d\u52a1 \u2192 \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684*\u670d\u52a1* OGC APIs \u2192 \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684*OGC API* \u5d4c\u5165\u548c\u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u76f4\u63a5\u4ece\u53e6\u4e00\u4e2aPython\u811a\u672c\u6216\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528QGIS\u670d\u52a1\u5668\u7684Python API\u3002\u5176\u4f59\u7684\u9009\u9879\u66f4\u9002\u5408\u4e8e\u5f53\u4f60\u60f3\u5728\u6807\u51c6\u7684QGIS\u670d\u52a1\u5668\u4e8c\u8fdb\u5236\u5e94\u7528\u7a0b\u5e8f\uff08FCGI\u6216\u5f00\u53d1\u670d\u52a1\u5668\uff09\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u529f\u80fd\u65f6\uff1a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u4e3a\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u7f16\u5199\u4e00\u4e2aPython\u63d2\u4ef6\uff0c\u5e76\u6ce8\u518c\u4f60\u7684\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u3001\u670d\u52a1\u6216API\u3002 20.2 \u670d\u52a1\u5668API\u57fa\u7840 \u2693\ufe0e \u4e00\u4e2a\u5178\u578b\u7684QGIS\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u6240\u6d89\u53ca\u7684\u57fa\u672c\u7c7b\u662f\uff1a QgsServer \u670d\u52a1\u5b9e\u4f8b (\u901a\u5e38\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b) QgsServerRequest \u8bf7\u6c42\u5bf9\u8c61(\u901a\u5e38\u5728\u6bcf\u6b21\u8bf7\u6c42\u65f6\u91cd\u65b0\u521b\u5efa) QgsServer.handleRequest(request, response) \u5904\u7406\u8bf7\u6c42\u5e76\u54cd\u5e94 QGIS\u670d\u52a1\u5668FCGI\u6216\u5f00\u53d1\u670d\u52a1\u5668\u7684\u5de5\u4f5c\u6d41\u7a0b\u53ef\u4ee5\u6982\u62ec\u4e3a\u4ee5\u4e0b\u51e0\u70b9\uff1a 1 2 3 4 5 6 7 8 9 initialize the QgsApplication create the QgsServer the main server loop waits forever for client requests: for each incoming request: create a QgsServerRequest request create a QgsServerResponse response call QgsServer.handleRequest(request, response) filter plugins may be executed send the output to the client \u5728 QgsServer.handleRequest(request, response) \u65b9\u6cd5\u4e2d\uff0c\u8fc7\u6ee4\u5668\u63d2\u4ef6\u7684\u56de\u8c03\u51fd\u6570\u88ab\u8c03\u7528\uff0c QgsServerRequest \u548c QgsServerResponse \u901a\u8fc7 QgsServerInterface \u7c7b\u88ab\u63d0\u4f9b\u7ed9\u63d2\u4ef6\u3002 \u8b66\u544a QGIS\u670d\u52a1\u5668\u7c7b\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u5728\u6784\u5efa\u57fa\u4e8eQGIS\u670d\u52a1\u5668API\u7684\u53ef\u6269\u5c55\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u4f60\u5e94\u8be5\u59cb\u7ec8\u4f7f\u7528\u591a\u8fdb\u7a0b\u6a21\u578b\u6216\u5bb9\u5668\u3002 20.3 \u72ec\u7acb\u6216\u5d4c\u5165 \u2693\ufe0e \u5bf9\u4e8e\u72ec\u7acb\u7684\u670d\u52a1\u5668\u5e94\u7528\u6216\u5d4c\u5165\uff0c\u4f60\u9700\u8981\u76f4\u63a5\u4f7f\u7528\u4e0a\u8ff0\u7684\u670d\u52a1\u5668\u7c7b\uff0c\u5c06\u5b83\u4eec\u5305\u88c5\u6210\u4e00\u4e2aWeb\u670d\u52a1\u5668\u5b9e\u73b0\uff0c\u7ba1\u7406\u6240\u6709\u4e0e\u5ba2\u6237\u7aef\u7684HTTP\u534f\u8bae\u4ea4\u4e92\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u5173\u4e8eQGIS\u670d\u52a1\u5668API\u5e94\u7528\u7684\u6700\u5c0f\u4f8b\u5b50\uff08\u6ca1\u6709HTTP\u90e8\u5206\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from qgis.core import QgsApplication from qgis.server import * app = QgsApplication ([], False ) # \u521b\u5efa\u670d\u52a1\u5668\u5b9e\u4f8b\uff0c\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u5b9e\u4f8b\uff0c\u5728\u591a\u4e2a\u8bf7\u6c42\u4e2d\u91cd\u590d\u4f7f\u7528 server = QgsServer () # \u901a\u8fc7\u6307\u5b9a\u5b8c\u6574\u7684URL\u548c\u4e00\u4e2a\u53ef\u9009\u7684\u4e3b\u4f53\u6765\u521b\u5efa\u8bf7\u6c42\uff08\u4f8b\u5982POST\u8bf7\u6c42\uff09 request = QgsBufferServerRequest ( 'http://localhost:8081/?MAP=/qgis-server/projects/helloworld.qgs' + '&SERVICE=WMS&REQUEST=GetCapabilities' ) # \u521b\u5efa\u54cd\u5e94\u5bf9\u8c61 response = QgsBufferServerResponse () # \u5904\u7406\u8bf7\u6c42 server . handleRequest ( request , response ) print ( response . headers ()) print ( response . body () . data () . decode ( 'utf8' )) app . exitQgis () \u8fd9\u91cc\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u72ec\u7acb\u5e94\u7528\u5b9e\u4f8b\uff0c\u5b83\u662f\u4e3aQGIS\u6e90\u4ee3\u7801\u5e93\u7684\u6301\u7eed\u96c6\u6210\u6d4b\u8bd5\u800c\u5f00\u53d1\u7684\uff0c\u5b83\u5c55\u793a\u4e86\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u63d2\u4ef6\u8fc7\u6ee4\u5668\u548c\u8ba4\u8bc1\u65b9\u6848\uff08\u4e0d\u610f\u5473\u7740\u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u662f\u4e3a\u6d4b\u8bd5\u76ee\u7684\u800c\u5f00\u53d1\u7684\uff0c\u4f46\u5bf9\u4e8e\u5b66\u4e60\u6765\u8bf4\u4ecd\u7136\u5f88\u6709\u8da3\uff09\uff1a https://github.com/qgis/QGIS/blob/master/tests/src/python/qgis_wrapped_server.py 20.4 \u670d\u52a1\u5668\u63d2\u4ef6 \u2693\ufe0e \u670d\u52a1\u5668python\u63d2\u4ef6\u5728QGIS\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\u88ab\u52a0\u8f7d\u4e00\u6b21\uff0c\u53ef\u7528\u4e8e\u6ce8\u518c\u8fc7\u6ee4\u5668\u3001\u670d\u52a1\u6216API\u3002 \u670d\u52a1\u5668\u63d2\u4ef6\u7684\u7ed3\u6784\u4e0e\u684c\u9762\u7248\u7684\u63d2\u4ef6\u975e\u5e38\u76f8\u4f3c\uff0c\u4e00\u4e2a QgsServerInterface \u5bf9\u8c61\u88ab\u63d0\u4f9b\u7ed9\u63d2\u4ef6\uff0c\u63d2\u4ef6\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u670d\u52a1\u5668\u63a5\u53e3\u66b4\u9732\u7684\u65b9\u6cd5\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u3001\u670d\u52a1\u6216API\u6ce8\u518c\u5230\u76f8\u5e94\u7684\u6ce8\u518c\u8868\u3002 20.4.1 \u670d\u52a1\u5668\u8fc7\u6ee4\u63d2\u4ef6 \u2693\ufe0e \u8fc7\u6ee4\u5668\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u5b83\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b50\u7c7b\u5316\u4e0b\u9762\u7684\u4e00\u4e2a\u7c7b\u5e76\u8c03\u7528 QgsServerInterface \u7684\u76f8\u5e94\u65b9\u6cd5\u6765\u5b9e\u4f8b\u5316\u3002 \u8fc7\u6ee4\u5668\u7c7b\u578b \u57fa\u7c7b QgsServerInterface \u6ce8\u518c I/O QgsServerFilter registerFilter() Access Control QgsAccessControlFilter registerAccessControl() Cache QgsServerCacheFilter registerServerCache() 20.4.1.1 I/O\u8fc7\u6ee4\u5668 \u2693\ufe0e I/O\u8fc7\u6ee4\u5668\u53ef\u4ee5\u4fee\u6539\u6838\u5fc3\u670d\u52a1\uff08WMS\u3001WFS\u7b49\uff09\u7684\u670d\u52a1\u5668\u8f93\u5165\u548c\u8f93\u51fa\uff08\u8bf7\u6c42\u548c\u54cd\u5e94\uff09\uff0c\u5141\u8bb8\u5bf9\u670d\u52a1\u5de5\u4f5c\u6d41\u8fdb\u884c\u4efb\u4f55\u5f62\u5f0f\u7684\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u9650\u5236\u5bf9\u9009\u5b9a\u56fe\u5c42\u7684\u8bbf\u95ee\uff0c\u5411XML\u54cd\u5e94\u6ce8\u5165XSL\u6837\u5f0f\u8868\uff0c\u5411\u751f\u6210\u7684WMS\u56fe\u50cf\u6dfb\u52a0\u6c34\u5370\u7b49\u7b49\u3002 \u4ece\u8fd9\u4e00\u70b9\u6765\u770b\uff0c\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u5feb\u901f\u6d4f\u89c8\u4e00\u4e0b \u670d\u52a1\u5668\u63d2\u4ef6\u7684API\u6587\u6863 \u5f88\u6709\u7528\u3002 \u6bcf\u4e00\u4e2a\u63d2\u4ef6\u5e94\u8be5\u81f3\u5c11\u5b9e\u73b0\u4ee5\u4e0b\u4e09\u4e2a\u56de\u8c03\u51fd\u6570\uff1a requestReady() responseComplete() sendResponse() \u6240\u6709\u7684\u8fc7\u6ee4\u5668\u90fd\u53ef\u4ee5\u8bbf\u95ee\u8bf7\u6c42/\u54cd\u5e94\u5bf9\u8c61\uff08 QgsRequestHandler \uff09\uff0c\u5e76\u4e14\u53ef\u4ee5\u64cd\u4f5c\u5b83\u7684\u6240\u6709\u5c5e\u6027\uff08\u8f93\u5165/\u8f93\u51fa\uff09\u548c\u5f15\u53d1\u5f02\u5e38\uff08\u540c\u65f6\u4ee5\u4e00\u79cd\u76f8\u5f53\u7279\u522b\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u770b\u5230\uff09\u3002 \u4e0b\u9762\u662f\u663e\u793a\u670d\u52a1\u5668\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u5178\u578b\u8bf7\u6c42\u4ee5\u53ca\u4f55\u65f6\u8c03\u7528\u8fc7\u6ee4\u5668\u56de\u8c03\u51fd\u6570\u7684\u4f2a\u4ee3\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 for each incoming request: create GET/POST request handler pass request to an instance of QgsServerInterface call requestReady filters if there is not a response: if SERVICE is WMS/WFS/WCS: create WMS/WFS/WCS service call service\u2019s executeRequest possibly call sendResponse for each chunk of bytes sent to the client by a streaming services (WFS) call responseComplete call sendResponse request handler sends the response to the client \u4e0b\u9762\u51e0\u4e2a\u6bb5\u843d\u8be6\u7ec6\u63cf\u8ff0\u4e86\u53ef\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002 20.4.1.1.1 \u8bf7\u6c42\u5c31\u7eea \u2693\ufe0e \u5f53\u8bf7\u6c42\u51c6\u5907\u5c31\u7eea\u65f6\uff0c\u5c06\u88ab\u8c03\u7528\uff1a\u4f20\u5165\u7684URL\u548c\u6570\u636e\u5df2\u7ecf\u88ab\u89e3\u6790\uff0c\u5728\u8fdb\u5165\u6838\u5fc3\u670d\u52a1\uff08WMS\uff0cWFS\u7b49\uff09\u5f00\u5173\u4e4b\u524d\uff0c\u8fd9\u662f\u4f60\u53ef\u4ee5\u64cd\u4f5c\u8f93\u5165\u548c\u6267\u884c\u52a8\u4f5c\u7684\u5730\u65b9\uff1a \u8ba4\u8bc1\u6388\u6743 \u91cd\u5b9a\u5411 \u6dfb\u52a0\u5220\u9664\u67d0\u4e9b\u53c2\u6570 (\u4f8b\u5982\u7c7b\u578b\u540d\u79f0) \u629b\u51fa\u5f02\u5e38 \u4f60\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8**SERVICE**\u53c2\u6570\u6765\u5b8c\u5168\u66ff\u4ee3\u4e00\u4e2a\u6838\u5fc3\u670d\u52a1\uff0c\u4ece\u800c\u5b8c\u5168\u7ed5\u8fc7\u6838\u5fc3\u670d\u52a1\uff08\u4e0d\u8fc7\u8fd9\u5e76\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\uff09\u3002 20.4.1.1.2 \u53d1\u9001\u54cd\u5e94 \u2693\ufe0e \u6bcf\u5f53\u6709\u4efb\u4f55\u8f93\u51fa\u88ab\u53d1\u9001\u5230**FCGI** stdout \uff08\u5e76\u4ece\u90a3\u91cc\u53d1\u9001\u5230\u5ba2\u6237\u7aef\uff09\u65f6\uff0c\u5c06\u88ab\u8c03\u7528\u3002\u8fd9\u901a\u5e38\u662f\u5728\u6838\u5fc3\u670d\u52a1\u5b8c\u6210\u5b83\u4eec\u7684\u8fc7\u7a0b\u548c\u8c03\u7528 responseComplete \u94a9\u5b50\u540e\u8fdb\u884c\u7684\uff0c\u4f46\u5728\u5c11\u6570\u60c5\u51b5\u4e0b\uff0cXML\u4f1a\u53d8\u5f97\u5982\u6b64\u5de8\u5927\uff0c\u4ee5\u81f3\u4e8e\u9700\u8981\u4e00\u4e2a\u6d41\u5f0fXML\u5b9e\u73b0\uff08WFS GetFeature\u5c31\u662f\u5176\u4e2d\u4e4b\u4e00\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728\u54cd\u5e94\u5b8c\u6210\u4e4b\u524d\uff0c\u53ef\u80fd\u4f1a\u4f8b\u5916\u5730\u591a\u6b21\u8c03\u7528 sendResponse() \uff0c\u800c\u4e0d\u662f\u5355\u6b21\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff08\u4e5f\u53ea\u6709\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff09\uff0c\u4e5f\u4f1a\u5728 responseComplete() \u4e4b\u524d\u8c03\u7528\u3002 sendResponse() \u662f\u76f4\u63a5\u64cd\u4f5c\u6838\u5fc3\u670d\u52a1\u8f93\u51fa\u7684\u6700\u4f73\u4f4d\u7f6e\uff0c\u867d\u7136 responseComplete() \u901a\u5e38\u4e5f\u662f\u4e00\u79cd\u9009\u62e9\uff0c\u4f46\u5728\u6d41\u5a92\u4f53\u670d\u52a1\u7684\u60c5\u51b5\u4e0b\uff0c sendResponse() \u662f\u552f\u4e00\u53ef\u884c\u7684\u9009\u62e9\u3002 20.4.1.1.3 \u54cd\u5e94\u5b8c\u6210 \u2693\ufe0e \u5f53\u6838\u5fc3\u670d\u52a1\uff08\u5982\u679c\u88ab\u51fb\u4e2d\u7684\u8bdd\uff09\u5b8c\u6210\u5b83\u4eec\u7684\u8fc7\u7a0b\uff0c\u5e76\u4e14\u8bf7\u6c42\u51c6\u5907\u597d\u88ab\u53d1\u9001\u5230\u5ba2\u6237\u7aef\u65f6\uff0c\u5c06\u88ab\u8c03\u7528\u4e00\u6b21\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u901a\u5e38\u5728 sendResponse() \u4e4b\u524d\u8c03\u7528\uff0c\u9664\u4e86\u6d41\u5a92\u4f53\u670d\u52a1\uff08\u6216\u5176\u4ed6\u63d2\u4ef6\u8fc7\u6ee4\u5668\uff09\u53ef\u80fd\u5728\u4e4b\u524d\u8c03\u7528 sendResponse() \u3002 responseComplete() \u662f\u63d0\u4f9b\u65b0\u670d\u52a1\u5b9e\u73b0\uff08WPS\u6216\u81ea\u5b9a\u4e49\u670d\u52a1\uff09\u548c\u5bf9\u6765\u81ea\u6838\u5fc3\u670d\u52a1\u7684\u8f93\u51fa\u8fdb\u884c\u76f4\u63a5\u64cd\u4f5c\u7684\u7406\u60f3\u573a\u6240\uff08\u4f8b\u5982\uff0c\u5728WMS\u56fe\u50cf\u4e0a\u6dfb\u52a0\u6c34\u5370\uff09\u3002 20.4.1.2 \u4ece\u63d2\u4ef6\u5f15\u53d1\u5f02\u5e38 \u2693\ufe0e \u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u8fd8\u6709\u4e00\u4e9b\u5de5\u4f5c\u8981\u505a\uff1a\u76ee\u524d\u7684\u5b9e\u73b0\u53ef\u4ee5\u901a\u8fc7\u5c06 QgsRequestHandler \u5c5e\u6027\u8bbe\u7f6e\u4e3aQgsMapServiceException\u7684\u4e00\u4e2a\u5b9e\u4f8b\u6765\u533a\u5206\u5df2\u5904\u7406\u548c\u672a\u5904\u7406\u7684\u5f02\u5e38\uff0c\u8fd9\u6837\uff0c\u4e3b\u8981\u7684C++\u4ee3\u7801\u53ef\u4ee5\u6355\u83b7\u5df2\u5904\u7406\u7684Python\u5f02\u5e38\u800c\u5ffd\u7565\u672a\u5904\u7406\u7684\u5f02\u5e38\uff08\u6216\u8005\u66f4\u597d\u7684\u662f\uff1a\u8bb0\u5f55\u65e5\u5fd7\uff09\u3002 \u8fd9\u79cd\u65b9\u6cd5\u57fa\u672c\u4e0a\u662f\u53ef\u884c\u7684\uff0c\u4f46\u5b83\u4e0d\u662f\u5f88 \"pythonic\"\uff1a\u4e00\u4e2a\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u5728python\u4ee3\u7801\u4e2d\u5f15\u53d1\u5f02\u5e38\uff0c\u5e76\u770b\u5230\u5b83\u4eec\u8fdb\u5165\u5230C++\u5faa\u73af\u4e2d\u88ab\u5904\u7406\u3002 20.4.1.3 \u7f16\u5199\u4e00\u4e2a\u670d\u52a1\u5668\u63d2\u4ef6 \u2693\ufe0e \u670d\u52a1\u5668\u63d2\u4ef6\u662f\u4e00\u4e2a\u6807\u51c6\u7684 QGIS Python \u63d2\u4ef6\uff0c\u5982 16-\u5f00\u53d1Python\u63d2\u4ef6 \u4e2d\u6240\u8ff0\uff0c\u5b83\u53ea\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u989d\u5916\u7684\uff08\u6216\u66ff\u4ee3\u7684\uff09\u63a5\u53e3\uff1a\u5178\u578b\u7684 QGIS \u684c\u9762\u63d2\u4ef6\u901a\u8fc7 QgisInterface \u5b9e\u4f8b\u8bbf\u95ee QGIS \u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u670d\u52a1\u5668\u63d2\u4ef6\u53ea\u6709\u5728 QGIS Server \u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u65f6\u624d\u80fd\u8bbf\u95ee\u3002 \u4e3a\u4e86\u8ba9QGIS Server\u77e5\u9053\u4e00\u4e2a\u63d2\u4ef6\u6709\u4e00\u4e2a\u670d\u52a1\u5668\u63a5\u53e3\uff0c\u9700\u8981\u4e00\u4e2a\u7279\u6b8a\u7684\u5143\u6570\u636e\u6761\u76ee\uff08\u5728 metadata.txt \u4e2d\uff09\u3002 1 server = True \u91cd\u8981\u7684 \u53ea\u6709\u8bbe\u7f6e\u4e86 server=True \u5143\u6570\u636e\u7684\u63d2\u4ef6\u624d\u80fd\u88abQGIS Server\u52a0\u8f7d\u548c\u6267\u884c\u3002 \u8fd9\u91cc\u8ba8\u8bba\u7684\u4f8b\u5b50\u63d2\u4ef6\uff08\u8fd8\u6709\u5f88\u591a\uff09\u53ef\u4ee5\u5728github\u4e0a\u627e\u5230\uff0c\u5730\u5740\u662fhttps://github.com/elpaso/qgis3-server-vagrant/tree/master/resources/web/plugins\uff0c\u4e00\u4e9b\u670d\u52a1\u5668\u63d2\u4ef6\u4e5f\u53d1\u5e03\u5728 QGIS\u5b98\u65b9\u63d2\u4ef6\u4ed3\u5e93 \u4e2d\u3002 20.4.1.4 \u63d2\u4ef6\u6587\u4ef6 \u2693\ufe0e \u4e0b\u9762\u662f\u6211\u4eec\u7684\u793a\u4f8b\u670d\u52a1\u5668\u63d2\u4ef6\u7684\u76ee\u5f55\u7ed3\u6784\u3002 1 2 3 4 5 PYTHON_PLUGINS_PATH/ HelloServer/ __init__.py --> *required* HelloServer.py --> *required* metadata.txt --> *required* 20.4.1.4.1 __init__.py \u2693\ufe0e \u8fd9\u4e2a\u6587\u4ef6\u662fPython\u7684\u5bfc\u5165\u7cfb\u7edf\u6240\u8981\u6c42\u7684\u3002\u6b64\u5916\uff0cQGIS Server\u8981\u6c42\u8be5\u6587\u4ef6\u5305\u542b\u4e00\u4e2a serverClassFactory() \u51fd\u6570\uff0c\u5f53\u670d\u52a1\u5668\u542f\u52a8\u65f6\uff0c\u63d2\u4ef6\u88ab\u52a0\u8f7d\u5230QGIS Server\u4e2d\u65f6\uff0c\u8be5\u51fd\u6570\u5c06\u88ab\u8c03\u7528\u3002\u5b83\u63a5\u6536\u5bf9 QgsServerInterface \u5b9e\u4f8b\u7684\u5f15\u7528\uff0c\u5e76\u5fc5\u987b\u8fd4\u56de\u4f60\u7684\u63d2\u4ef6\u7c7b\u7684\u5b9e\u4f8b\u3002\u4ee5\u4e0b\u662f\u63d2\u4ef6\u793a\u4f8b __init__.py \u7684\u6837\u5b50\uff1a 1 2 3 def serverClassFactory ( serverIface ): from .HelloServer import HelloServerServer return HelloServerServer ( serverIface ) 20.4.1.4.2 HelloServer.py \u2693\ufe0e \u8fd9\u5c31\u662f\u9b54\u6cd5\u53d1\u751f\u7684\u5730\u65b9\uff0c\u8fd9\u5c31\u662f\u9b54\u6cd5\u7684\u6a21\u6837\u3002(\u4f8b\u5982\uff1a HelloServer.py ) \u4e00\u4e2a\u670d\u52a1\u5668\u63d2\u4ef6\u901a\u5e38\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u56de\u8c03\u51fd\u6570\u7ec4\u6210\uff0c\u88ab\u6253\u5305\u5230 QgsServerFilter \u7684\u5b9e\u4f8b\u4e2d\u3002 \u6bcf\u4e2a QgsServerFilter \u90fd\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6216\u591a\u4e2a\u4ee5\u4e0b\u7684\u56de\u8c03\u51fd\u6570\uff1a requestReady() responseComplete() sendResponse() \u4e0b\u9762\u7684\u4f8b\u5b50\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6700\u5c0f\u7684\u8fc7\u6ee4\u5668\uff0c\u5f53**SERVICE**\u53c2\u6570\u7b49\u4e8e \" HELLO \"\u65f6\uff0c\u6253\u5370\u51fa*HelloServer*! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class HelloFilter ( QgsServerFilter ): def __init__ ( self , serverIface ): super () . __init__ ( serverIface ) def requestReady ( self ): QgsMessageLog . logMessage ( \"HelloFilter.requestReady\" ) def sendResponse ( self ): QgsMessageLog . logMessage ( \"HelloFilter.sendResponse\" ) def responseComplete ( self ): QgsMessageLog . logMessage ( \"HelloFilter.responseComplete\" ) request = self . serverInterface () . requestHandler () params = request . parameterMap () if params . get ( 'SERVICE' , '' ) . upper () == 'HELLO' : request . clear () request . setResponseHeader ( 'Content-type' , 'text/plain' ) # \u6ce8\u610f\u5185\u5bb9\u7c7b\u578b\u662f\"bytes\" request . appendBody ( b 'HelloServer!' ) \u8fc7\u6ee4\u5668\u5fc5\u987b\u88ab\u6ce8\u518c\u5230**serverIface**\u4e2d\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a 1 2 3 class HelloServerServer : def __init__ ( self , serverIface ): serverIface . registerFilter ( HelloFilter ( serverIface ), 100 ) registerFilter() \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u5b9a\u4e49\u4e86\u540c\u540d\u56de\u8c03\u51fd\u6570\u7684\u987a\u5e8f\uff08\u4f18\u5148\u7ea7\u4f4e\u7684\u56de\u8c03\u5148\u88ab\u8c03\u7528\uff09\u3002 \u901a\u8fc7\u4f7f\u7528\u8fd9\u4e09\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u63d2\u4ef6\u53ef\u4ee5\u4ee5\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u64cd\u7eb5\u670d\u52a1\u5668\u7684\u8f93\u5165\u8f93\u51fa\u3002\u5728\u6bcf\u4e2a\u65f6\u523b\uff0c\u63d2\u4ef6\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u901a\u8fc7 QgsServerInterface \u8bbf\u95ee QgsRequestHandler \u3002 QgsRequestHandler \u7c7b\u6709\u5f88\u591a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u6765\u5728\u8fdb\u5165\u670d\u52a1\u5668\u7684\u6838\u5fc3\u5904\u7406\u4e4b\u524d\uff08\u901a\u8fc7\u4f7f\u7528 requestReady() \uff09\u6216\u5728\u8bf7\u6c42\u88ab\u6838\u5fc3\u670d\u52a1\u5904\u7406\u4e4b\u540e\uff08\u901a\u8fc7\u4f7f\u7528 sendResponse() \uff09\u6539\u53d8\u8f93\u5165\u53c2\u6570\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u6db5\u76d6\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u4f7f\u7528\u6848\u4f8b\u3002 20.4.1.4.3 \u4fee\u6539\u8f93\u5165 \u2693\ufe0e \u793a\u4f8b\u63d2\u4ef6\u5305\u542b\u4e00\u4e2a\u6539\u53d8\u6765\u81ea\u67e5\u8be2\u5b57\u7b26\u4e32\u7684\u8f93\u5165\u53c2\u6570\u7684\u6d4b\u8bd5\u4f8b\u5b50\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4e00\u4e2a\u65b0\u7684\u53c2\u6570\u88ab\u6ce8\u5165\u5230\uff08\u5df2\u7ecf\u89e3\u6790\u8fc7\u7684\uff09 parameterMap \u4e2d\uff0c\u7136\u540e\u8fd9\u4e2a\u53c2\u6570\u88ab\u6838\u5fc3\u670d\u52a1\uff08WMS\u7b49\uff09\u770b\u5230\uff0c\u5728\u6838\u5fc3\u670d\u52a1\u5904\u7406\u7ed3\u675f\u65f6\uff0c\u6211\u4eec\u68c0\u67e5\u8fd9\u4e2a\u53c2\u6570\u662f\u5426\u4ecd\u7136\u5b58\u5728\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class ParamsFilter ( QgsServerFilter ): def __init__ ( self , serverIface ): super ( ParamsFilter , self ) . __init__ ( serverIface ) def requestReady ( self ): request = self . serverInterface () . requestHandler () params = request . parameterMap ( ) request . setParameter ( 'TEST_NEW_PARAM' , 'ParamsFilter' ) def responseComplete ( self ): request = self . serverInterface () . requestHandler () params = request . parameterMap ( ) if params . get ( 'TEST_NEW_PARAM' ) == 'ParamsFilter' : QgsMessageLog . logMessage ( \"SUCCESS - ParamsFilter.responseComplete\" ) else : QgsMessageLog . logMessage ( \"FAIL - ParamsFilter.responseComplete\" ) \u8fd9\u662f\u65e5\u5fd7\u6587\u4ef6\u4e2d\u5185\u5bb9\u7684\u6458\u5f55\uff1a 1 2 3 4 5 6 src/core/qgsmessagelog.cpp: 45: (logMessage) [0ms] 2014-12-12T12:39:29 plugin[0] HelloServerServer - loading filter ParamsFilter src/core/qgsmessagelog.cpp: 45: (logMessage) [1ms] 2014-12-12T12:39:29 Server[0] Server plugin HelloServer loaded! src/core/qgsmessagelog.cpp: 45: (logMessage) [0ms] 2014-12-12T12:39:29 Server[0] Server python plugins loaded src/mapserver/qgshttprequesthandler.cpp: 547: (requestStringToParameterMap) [1ms] inserting pair SERVICE // HELLO into the parameter map src/mapserver/qgsserverfilter.cpp: 42: (requestReady) [0ms] QgsServerFilter plugin default requestReady called src/core/qgsmessagelog.cpp: 45: (logMessage) [0ms] 2014-12-12T12:39:29 plugin[0] SUCCESS - ParamsFilter.responseComplete \u5728\u7a81\u51fa\u663e\u793a\u7684\u4e00\u884c\uff0c\"SUCCESS \"\u5b57\u7b26\u4e32\u8868\u793a\u8be5\u63d2\u4ef6\u901a\u8fc7\u4e86\u6d4b\u8bd5\u3002 \u540c\u6837\u7684\u6280\u672f\u53ef\u4ee5\u88ab\u5229\u7528\u6765\u4ee3\u66ff\u6838\u5fc3\u670d\u52a1\uff1a\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7**WFS SERVICE**\u8bf7\u6c42\u6216\u4efb\u4f55\u5176\u4ed6\u6838\u5fc3\u8bf7\u6c42\uff0c\u53ea\u9700\u5c06**SERVICE**\u53c2\u6570\u6539\u4e3a\u4e0d\u540c\u7684\u53c2\u6570\uff0c\u6838\u5fc3\u670d\u52a1\u5c31\u4f1a\u88ab\u8df3\u8fc7\u3002\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5c06\u4f60\u7684\u81ea\u5b9a\u4e49\u7ed3\u679c\u6ce8\u5165\u5230\u8f93\u51fa\u4e2d\uff0c\u5e76\u5c06\u5176\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\uff08\u8fd9\u5c06\u5728\u4e0b\u9762\u89e3\u91ca\uff09\u3002 \u63d0\u793a \u5982\u679c\u4f60\u771f\u7684\u60f3\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u670d\u52a1\uff0c\u5efa\u8bae\u5c06 QgsService \u5b50\u7c7b\u5316\uff0c\u5e76\u901a\u8fc7\u8c03\u7528\u5176 registerService(service) \u65b9\u6cd5\u5728 registerFilter() \u65b9\u6cd5\u4e0a\u6ce8\u518c\u4f60\u7684\u670d\u52a1\u3002 20.4.1.4.4 \u4fee\u6539\u6216\u66ff\u6362\u8f93\u51fa \u2693\ufe0e \u6c34\u5370\u8fc7\u6ee4\u5668\u7684\u4f8b\u5b50\u663e\u793a\u4e86\u5982\u4f55\u7528\u4e00\u4e2a\u65b0\u7684\u56fe\u50cf\u66ff\u6362WMS\u7684\u8f93\u51fa\uff0c\u8be5\u56fe\u50cf\u662f\u901a\u8fc7\u5728WMS\u6838\u5fc3\u670d\u52a1\u751f\u6210\u7684WMS\u56fe\u50cf\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u6c34\u5370\u56fe\u50cf\u800c\u83b7\u5f97\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 from qgis.server import * from qgis.PyQt.QtCore import * from qgis.PyQt.QtGui import * class WatermarkFilter ( QgsServerFilter ): def __init__ ( self , serverIface ): super () . __init__ ( serverIface ) def responseComplete ( self ): request = self . serverInterface () . requestHandler () params = request . parameterMap ( ) # \u4e00\u4e9b\u68c0\u67e5 if ( params . get ( 'SERVICE' ) . upper () == 'WMS' \\ and params . get ( 'REQUEST' ) . upper () == 'GETMAP' \\ and not request . exceptionRaised () ): QgsMessageLog . logMessage ( \"WatermarkFilter.responseComplete: image ready %s \" % request . parameter ( \"FORMAT\" )) # \u83b7\u53d6\u56fe\u50cf img = QImage () img . loadFromData ( request . body ()) # \u6dfb\u52a0\u6c34\u5370 watermark = QImage ( os . path . join ( os . path . dirname ( __file__ ), 'media/watermark.png' )) p = QPainter ( img ) p . drawImage ( QRect ( 20 , 20 , 40 , 40 ), watermark ) p . end () ba = QByteArray () buffer = QBuffer ( ba ) buffer . open ( QIODevice . WriteOnly ) img . save ( buffer , \"PNG\" if \"png\" in request . parameter ( \"FORMAT\" ) else \"JPG\" ) # \u8bbe\u7f6e\u6570\u636e\u4f53 request . clearBody () request . appendBody ( ba ) \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c SERVICE**\u53c2\u6570\u503c\u88ab\u68c0\u67e5\uff0c\u5982\u679c\u4f20\u5165\u7684\u8bf7\u6c42\u662f\u4e00\u4e2a**WMS GETMAP \uff0c\u5e76\u4e14\u6ca1\u6709\u88ab\u5148\u524d\u6267\u884c\u7684\u63d2\u4ef6\u6216\u6838\u5fc3\u670d\u52a1\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662fWMS\uff09\u8bbe\u7f6e\u8fc7\u5f02\u5e38\uff0c\u90a3\u4e48WMS\u751f\u6210\u7684\u56fe\u50cf\u5c31\u4f1a\u4ece\u8f93\u51fa\u7f13\u51b2\u533a\u4e2d\u88ab\u68c0\u7d22\u51fa\u6765\uff0c\u5e76\u4e14\u6dfb\u52a0\u6c34\u5370\u56fe\u50cf\u3002\u6700\u540e\u4e00\u6b65\u662f\u6e05\u9664\u8f93\u51fa\u7f13\u51b2\u533a\uff0c\u7528\u65b0\u751f\u6210\u7684\u56fe\u50cf\u66ff\u6362\u5b83\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u6211\u4eec\u8fd8\u5e94\u8be5\u68c0\u67e5\u6240\u8981\u6c42\u7684\u56fe\u50cf\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u53ea\u652f\u6301PNG\u6216JPG\u3002 20.4.1.5 \u8bbf\u95ee\u63a7\u5236\u8fc7\u6ee4\u5668 \u2693\ufe0e \u8bbf\u95ee\u63a7\u5236\u8fc7\u6ee4\u5668\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u5bf9\u54ea\u4e9b\u5c42\u3001\u8981\u7d20\u548c\u5c5e\u6027\u53ef\u4ee5\u88ab\u8bbf\u95ee\u7684\u7ec6\u7c92\u5ea6\u63a7\u5236\uff0c\u4ee5\u4e0b\u56de\u8c03\u51fd\u6570\u53ef\u4ee5\u5728\u8bbf\u95ee\u63a7\u5236\u8fc7\u6ee4\u5668\u4e2d\u5b9e\u73b0\uff1a layerFilterExpression(layer) layerFilterSubsetString(layer) layerPermissions(layer) authorizedLayerAttributes(layer, attributes) allowToEdit(layer, feature) cacheKey() 20.4.1.5.1. \u63d2\u4ef6\u6587\u4ef6 \u2693\ufe0e \u4e0b\u9762\u662f\u6211\u4eec\u7684\u793a\u4f8b\u670d\u52a1\u5668\u63d2\u4ef6\u7684\u76ee\u5f55\u7ed3\u6784\uff1a 1 2 3 4 5 PYTHON_PLUGINS_PATH/ MyAccessControl/ __init__.py --> *required* AccessControl.py --> *required* metadata.txt --> *required* 20.4.1.5.2 __init__.py \u2693\ufe0e \u8fd9\u4e2a\u6587\u4ef6\u662fPython\u7684\u5bfc\u5165\u7cfb\u7edf\u6240\u8981\u6c42\u7684\u3002\u5bf9\u4e8e\u6240\u6709\u7684QGIS\u670d\u52a1\u5668\u63d2\u4ef6\u6765\u8bf4\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5305\u542b\u4e00\u4e2a serverClassFactory() \u51fd\u6570\uff0c\u5f53\u63d2\u4ef6\u5728\u542f\u52a8\u65f6\u88ab\u52a0\u8f7d\u5230QGIS\u670d\u52a1\u5668\u4e2d\u65f6\uff0c\u5b83\u5c06\u88ab\u8c03\u7528\u3002\u5b83\u63a5\u6536\u4e00\u4e2a\u5bf9 QgsServerInterface \u5b9e\u4f8b\u7684\u5f15\u7528\uff0c\u5e76\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u4f60\u7684\u63d2\u4ef6\u7c7b\u7684\u5b9e\u4f8b\u3002\u4ee5\u4e0b\u662f\u63d2\u4ef6\u5b9e\u4f8b __init__.py \u7684\u6837\u5b50\uff1a 1 2 3 def serverClassFactory ( serverIface ): from MyAccessControl.AccessControl import AccessControlServer return AccessControlServer ( serverIface ) 20.4.1.5.3. AccessControl.py \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class AccessControlFilter ( QgsAccessControlFilter ): def __init__ ( self , server_iface ): super () . __init__ ( server_iface ) def layerFilterExpression ( self , layer ): \"\"\" \u8fd4\u56de\u4e00\u4e2a\u989d\u5916\u7684\u8868\u8fbe\u5f0f\u8fc7\u6ee4\u5668 \"\"\" return super () . layerFilterExpression ( layer ) def layerFilterSubsetString ( self , layer ): \"\"\" \u8fd4\u56de\u4e00\u4e2a\u989d\u5916\u7684\u5b50\u96c6\u5b57\u7b26\u4e32\uff08\u901a\u5e38\u662fSQL\uff09\u8fc7\u6ee4\u5668 \"\"\" return super () . layerFilterSubsetString ( layer ) def layerPermissions ( self , layer ): \"\"\" \u8fd4\u56de\u8be5\u5c42\u7684\u6743\u9650 \"\"\" return super () . layerPermissions ( layer ) def authorizedLayerAttributes ( self , layer , attributes ): \"\"\" \u8fd4\u56de\u6388\u6743\u7684\u56fe\u5c42\u5c5e\u6027 \"\"\" return super () . authorizedLayerAttributes ( layer , attributes ) def allowToEdit ( self , layer , feature ): \"\"\" \u6211\u4eec\u662f\u5426\u88ab\u6388\u6743\u4fee\u6539\u4ee5\u4e0b\u51e0\u4f55\u56fe\u5f62 \"\"\" return super () . allowToEdit ( layer , feature ) def cacheKey ( self ): return super () . cacheKey () class AccessControlServer : def __init__ ( self , serverIface ): \"\"\" \u6ce8\u518c\u8bbf\u95ee\u63a7\u5236\u8fc7\u6ee4\u5668 \"\"\" serverIface . registerAccessControl ( AccessControlFilter ( serverIface ), 100 ) \u8fd9\u4e2a\u4f8b\u5b50\u4e3a\u6bcf\u4e2a\u4eba\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u8bbf\u95ee\u6743\u9650\u3002 \u63d2\u4ef6\u7684\u4f5c\u7528\u662f\u77e5\u9053\u8c01\u5728\u767b\u5f55\u3002 \u5728\u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u90fd\u6709\u4e00\u4e2a\u56fe\u5c42\u7684\u53c2\u6570\uff0c\u4ee5\u4fbf\u80fd\u591f\u5b9a\u5236\u6bcf\u4e2a\u56fe\u5c42\u7684\u9650\u5236\u3002 20.4.1.5.4. layerFilterExpression \u2693\ufe0e \u7528\u4e8e\u6dfb\u52a0\u4e00\u4e2a\u8868\u8fbe\u5f0f\u6765\u9650\u5236\u7ed3\u679c\uff0c\u4f8b\u5982\uff1a 1 2 def layerFilterExpression ( self , layer ): return \"$role = 'user'\" \u9650\u5236\u8981\u7d20\u7684\u5c5e\u6027 role \u7b49\u4e8e \u201cuser\u201d \u3002 20.4.1.5.5. layerFilterSubsetString \u2693\ufe0e \u4e0e\u524d\u8005\u76f8\u540c\uff0c\u4f46\u4f7f\u7528 SubsetString \uff08\u5728\u6570\u636e\u5e93\u4e2d\u6267\u884c\uff09\u3002 1 2 def layerFilterSubsetString ( self , layer ): return \"role = 'user'\" \u9650\u5236\u8981\u7d20\u7684\u5c5e\u6027 role \u7b49\u4e8e \u201cuser\u201d \u3002 20.4.1.5.6. layerPermissions \u2693\ufe0e \u9650\u5236\u8bbf\u95ee\u56fe\u5c42\u3002 \u8fd4\u56de\u4e00\u4e2a LayerPermissions() \u5bf9\u8c61\uff0c\u5b83\u6709\u4ee5\u4e0b\u5c5e\u6027\uff1a canRead \u53ef\u4ee5\u5728 GetCapabilities \u4e2d\u770b\u5230\u5b83\u5e76\u6709\u8bfb\u53d6\u6743\u9650\u3002 canInsert \u80fd\u591f\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8981\u7d20\u3002 canUpdate \u80fd\u591f\u66f4\u65b0\u4e00\u4e2a\u8981\u7d20\u3002 canDelete \u80fd\u591f\u5220\u9664\u4e00\u4e2a\u8981\u7d20\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 def layerPermissions ( self , layer ): rights = QgsAccessControlFilter . LayerPermissions () rights . canRead = True rights . canInsert = rights . canUpdate = rights . canDelete = False return rights \u9650\u5236\u6bcf\u4e00\u4e2a\u4eba\u53ea\u8bfb\u8bbf\u95ee\u3002 20.4.1.5.7. authorizedLayerAttributes \u2693\ufe0e \u7528\u4e8e\u9650\u5236\u4e00\u4e2a\u7279\u5b9a\u7684\u5c5e\u6027\u5b50\u96c6\u7684\u53ef\u89c1\u6027\u3002 \u53c2\u6570 attribute \u8fd4\u56de\u5f53\u524d\u7684\u53ef\u89c1\u5c5e\u6027\u96c6\u3002 \u4f8b\u5982\uff1a 1 2 def authorizedLayerAttributes ( self , layer , attributes ): return [ a for a in attributes if a != \"role\" ] \u9690\u85cf\u2018role\u2019\u5c5e\u6027\u3002 20.4.1.5.8. allowToEdit \u2693\ufe0e \u8fd9\u88ab\u7528\u6765\u9650\u5236\u5bf9\u4e00\u4e2a\u5c5e\u6027\u5b50\u96c6\u7684\u7f16\u8f91\u3002 \u5b83\u5728 WFS-Transaction \u534f\u8bae\u4e2d\u4f7f\u7528\u3002 \u4f8b\u5982\uff1a 1 2 def allowToEdit ( self , layer , feature ): return feature . attribute ( 'role' ) == 'user' \u53ea\u80fd\u591f\u7f16\u8f91\u5177\u6709\u2018role\u2019\u5c5e\u6027\u7684\u8981\u7d20\u3002 20.4.1.5.9. cacheKey \u2693\ufe0e QGIS\u670d\u52a1\u5668\u4f1a\u5bf9\u80fd\u529b\u8fdb\u884c\u7f13\u5b58\uff0c\u5982\u679c\u8981\u5bf9\u6bcf\u4e2a\u89d2\u8272\u8fdb\u884c\u7f13\u5b58\uff0c\u4f60\u53ef\u4ee5\u5728\u6b64\u65b9\u6cd5\u4e2d\u8fd4\u56de\u89d2\u8272\u3002\u6216\u8005\u8fd4\u56de None \u4ee5\u5b8c\u5168\u7981\u7528\u7f13\u5b58\u3002 20.4.2 \u81ea\u5b9a\u4e49\u670d\u52a1 \u2693\ufe0e \u5728QGIS\u670d\u52a1\u5668\u4e2d\uff0cWMS\u3001WFS\u548cWCS\u7b49\u6838\u5fc3\u670d\u52a1\u662f\u4f5c\u4e3a QgsService \u7684\u5b50\u7c7b\u5b9e\u73b0\u7684\u3002 \u4e3a\u4e86\u5b9e\u73b0\u4e00\u4e2a\u65b0\u7684\u670d\u52a1\uff0c\u5f53\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570 SERVICE \u4e0e\u670d\u52a1\u540d\u79f0\u76f8\u5339\u914d\u65f6\u5c06\u88ab\u6267\u884c\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0\u4f60\u81ea\u5df1\u7684 QgsService \uff0c\u5e76\u901a\u8fc7\u8c03\u7528 registerService(service) \u5728 serviceRegistry() \u4e0a\u6ce8\u518c\u4f60\u7684\u670d\u52a1\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u540d\u4e3aCUSTOM\u7684\u81ea\u5b9a\u4e49\u670d\u52a1\u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from qgis.server import QgsService from qgis.core import QgsMessageLog class CustomServiceService ( QgsService ): def __init__ ( self ): QgsService . __init__ ( self ) def name ( self ): return \"CUSTOM\" def version ( self ): return \"1.0.0\" def executeRequest ( self , request , response , project ): response . setStatusCode ( 200 ) QgsMessageLog . logMessage ( 'Custom service executeRequest' ) response . write ( \"Custom service executeRequest\" ) class CustomService (): def __init__ ( self , serverIface ): serverIface . serviceRegistry () . registerService ( CustomServiceService ()) 20.4.3. \u81ea\u5b9a\u4e49APIs \u2693\ufe0e \u5728QGIS Server\u4e2d\uff0c\u8bf8\u5982OAPIF\uff08\u53c8\u79f0WFS3\uff09\u7b49\u6838\u5fc3OGC APIs\u88ab\u5b9e\u73b0\u4e3a QgsServerOgcApiHandler \u5b50\u7c7b\u7684\u96c6\u5408\uff0c\u8fd9\u4e9b\u5b50\u7c7b\u88ab\u6ce8\u518c\u5230 QgsServerOgcApi \uff08\u6216\u5176\u7236\u7c7b QgsServerApi \uff09\u7684\u5b9e\u4f8b\u4e2d\u3002 \u8981\u5b9e\u73b0\u4e00\u4e2a\u65b0\u7684API\uff0c\u5f53url\u8def\u5f84\u4e0e\u67d0\u4e2aURL\u76f8\u5339\u914d\u65f6\u5c31\u4f1a\u88ab\u6267\u884c\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0\u4f60\u81ea\u5df1\u7684 QgsServerOgcApiHandler \u5b9e\u4f8b\uff0c\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230 QgsServerOgcApi \u4e2d\uff0c\u5e76\u901a\u8fc7\u8c03\u7528\u5176 registerApi(api) \u5728 serviceRegistry() \u4e0a\u6ce8\u518c\u8be5API\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49API\u7684\u4f8b\u5b50\uff0c\u5f53URL\u5305\u542b /customapi \u65f6\u5c06\u88ab\u6267\u884c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 import json import os from qgis.PyQt.QtCore import QBuffer , QIODevice , QTextStream , QRegularExpression from qgis.server import ( QgsServiceRegistry , QgsService , QgsServerFilter , QgsServerOgcApi , QgsServerQueryStringParameter , QgsServerOgcApiHandler , ) from qgis.core import ( QgsMessageLog , QgsJsonExporter , QgsCircle , QgsFeature , QgsPoint , QgsGeometry , ) class CustomApiHandler ( QgsServerOgcApiHandler ): def __init__ ( self ): super ( CustomApiHandler , self ) . __init__ () self . setContentTypes ([ QgsServerOgcApi . HTML , QgsServerOgcApi . JSON ]) def path ( self ): return QRegularExpression ( \"/customapi\" ) def operationId ( self ): return \"CustomApiXYCircle\" def summary ( self ): return \"Creates a circle around a point\" def description ( self ): return \"Creates a circle around a point\" def linkTitle ( self ): return \"Custom Api XY Circle\" def linkType ( self ): return QgsServerOgcApi . data def handleRequest ( self , context ): \"\"\"Simple Circle\"\"\" values = self . values ( context ) x = values [ 'x' ] y = values [ 'y' ] r = values [ 'r' ] f = QgsFeature () f . setAttributes ([ x , y , r ]) f . setGeometry ( QgsCircle ( QgsPoint ( x , y ), r ) . toCircularString ()) exporter = QgsJsonExporter () self . write ( json . loads ( exporter . exportFeature ( f )), context ) def templatePath ( self , context ): # \u6a21\u677f\u8def\u5f84\u7528\u4e8e\u63d0\u4f9bHTML\u5185\u5bb9 return os . path . join ( os . path . dirname ( __file__ ), 'circle.html' ) def parameters ( self , context ): return [ QgsServerQueryStringParameter ( 'x' , True , QgsServerQueryStringParameter . Type . Double , 'X coordinate' ), QgsServerQueryStringParameter ( 'y' , True , QgsServerQueryStringParameter . Type . Double , 'Y coordinate' ), QgsServerQueryStringParameter ( 'r' , True , QgsServerQueryStringParameter . Type . Double , 'radius' )] class CustomApi (): def __init__ ( self , serverIface ): api = QgsServerOgcApi ( serverIface , '/customapi' , 'custom api' , 'a custom api' , '1.1' ) handler = CustomApiHandler () api . registerHandler ( handler ) serverIface . serviceRegistry () . registerApi ( api )","title":"20-QGIS\u670d\u52a1\u5668\u548cPython"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#20-qgispython","text":"","title":"20-QGIS\u670d\u52a1\u5668\u548cPython"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#201","text":"\u8981\u4e86\u89e3\u6709\u5173QGIS\u670d\u52a1\u5668\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb QGIS\u670d\u52a1\u5668\u6307\u5357/\u624b\u518c \u3002 QGIS\u670d\u52a1\u5668\u662f\u4e09\u4e2a\u4e0d\u540c\u7684\u4e1c\u897f\uff1a QGIS\u670d\u52a1\u5668\u5e93\uff1a\u4e00\u4e2a\u4e3a\u521b\u5efaOGC\u7f51\u7edc\u670d\u52a1\u63d0\u4f9bAPI\u7684\u5e93 QGIS\u670d\u52a1\u5668FCGI\uff1a\u4e00\u4e2aFCGI\u4e8c\u8fdb\u5236\u5e94\u7528\u7a0b\u5e8f qgis_maserv.fcgi \uff0c\u4e0e\u7f51\u7edc\u670d\u52a1\u5668\u4e00\u8d77\u5b9e\u73b0\u4e00\u5957OGC\u670d\u52a1\uff08WMS\u3001WFS\u3001WCS\u7b49\uff09\u548cOGC APIs\uff08WFS3/OAPIF\uff09\u3002 QGIS\u5f00\u53d1\u670d\u52a1\u5668\uff1a\u4e00\u4e2a\u5f00\u53d1\u670d\u52a1\u5668\u4e8c\u8fdb\u5236\u5e94\u7528\u7a0b\u5e8f qgis_mapserver \uff0c\u5b9e\u73b0\u4e86\u4e00\u5957OGC\u670d\u52a1\uff08WMS\u3001WFS\u3001WCS\u7b49\uff09\u548cOGC APIs\uff08WFS3/OAPIF\uff09\u3002 \u672c\u7ae0\u7684\u91cd\u70b9\u662f\u7b2c\u4e00\u4e2a\u8bdd\u9898\uff0c\u901a\u8fc7\u89e3\u91caQGIS\u670d\u52a1\u5668API\u7684\u7528\u6cd5\u6765\u8bf4\u660e\u5982\u4f55\u4f7f\u7528Python\u6765\u6269\u5c55\u3001\u589e\u5f3a\u6216\u5b9a\u5236\u670d\u52a1\u5668\u884c\u4e3a\uff0c\u6216\u5982\u4f55\u4f7f\u7528QGIS\u670d\u52a1\u5668API\u5c06QGIS\u670d\u52a1\u5668\u5d4c\u5165\u5230\u53e6\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u6539\u53d8QGIS\u670d\u52a1\u5668\u7684\u884c\u4e3a\u6216\u6269\u5c55\u5176\u529f\u80fd\uff0c\u4ee5\u63d0\u4f9b\u65b0\u7684\u5b9a\u5236\u670d\u52a1\u6216API\uff0c\u4e00\u4e0b\u662f\u4f60\u53ef\u80fd\u9762\u4e34\u7684\u4e3b\u8981\u60c5\u51b5\uff1a \u878d\u5408 \u2192 \u4ece\u53e6\u4e00\u4e2aPython\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528QGIS\u670d\u52a1\u5668API \u72ec\u7acb \u2192 \u4ee5\u72ec\u7acb\u7684WSGI/HTTP\u670d\u52a1\u65b9\u5f0f\u8fd0\u884cQGIS\u670d\u52a1\u5668 \u8fc7\u6ee4 \u2192 \u4f7f\u7528\u8fc7\u6ee4\u63d2\u4ef6\u589e\u5f3a/\u5b9a\u5236QGIS\u670d\u52a1\u5668 \u670d\u52a1 \u2192 \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684*\u670d\u52a1* OGC APIs \u2192 \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684*OGC API* \u5d4c\u5165\u548c\u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u76f4\u63a5\u4ece\u53e6\u4e00\u4e2aPython\u811a\u672c\u6216\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528QGIS\u670d\u52a1\u5668\u7684Python API\u3002\u5176\u4f59\u7684\u9009\u9879\u66f4\u9002\u5408\u4e8e\u5f53\u4f60\u60f3\u5728\u6807\u51c6\u7684QGIS\u670d\u52a1\u5668\u4e8c\u8fdb\u5236\u5e94\u7528\u7a0b\u5e8f\uff08FCGI\u6216\u5f00\u53d1\u670d\u52a1\u5668\uff09\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u529f\u80fd\u65f6\uff1a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u4e3a\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u7f16\u5199\u4e00\u4e2aPython\u63d2\u4ef6\uff0c\u5e76\u6ce8\u518c\u4f60\u7684\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u3001\u670d\u52a1\u6216API\u3002","title":"20.1 \u4ecb\u7ecd"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#202-api","text":"\u4e00\u4e2a\u5178\u578b\u7684QGIS\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u6240\u6d89\u53ca\u7684\u57fa\u672c\u7c7b\u662f\uff1a QgsServer \u670d\u52a1\u5b9e\u4f8b (\u901a\u5e38\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b) QgsServerRequest \u8bf7\u6c42\u5bf9\u8c61(\u901a\u5e38\u5728\u6bcf\u6b21\u8bf7\u6c42\u65f6\u91cd\u65b0\u521b\u5efa) QgsServer.handleRequest(request, response) \u5904\u7406\u8bf7\u6c42\u5e76\u54cd\u5e94 QGIS\u670d\u52a1\u5668FCGI\u6216\u5f00\u53d1\u670d\u52a1\u5668\u7684\u5de5\u4f5c\u6d41\u7a0b\u53ef\u4ee5\u6982\u62ec\u4e3a\u4ee5\u4e0b\u51e0\u70b9\uff1a 1 2 3 4 5 6 7 8 9 initialize the QgsApplication create the QgsServer the main server loop waits forever for client requests: for each incoming request: create a QgsServerRequest request create a QgsServerResponse response call QgsServer.handleRequest(request, response) filter plugins may be executed send the output to the client \u5728 QgsServer.handleRequest(request, response) \u65b9\u6cd5\u4e2d\uff0c\u8fc7\u6ee4\u5668\u63d2\u4ef6\u7684\u56de\u8c03\u51fd\u6570\u88ab\u8c03\u7528\uff0c QgsServerRequest \u548c QgsServerResponse \u901a\u8fc7 QgsServerInterface \u7c7b\u88ab\u63d0\u4f9b\u7ed9\u63d2\u4ef6\u3002 \u8b66\u544a QGIS\u670d\u52a1\u5668\u7c7b\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u5728\u6784\u5efa\u57fa\u4e8eQGIS\u670d\u52a1\u5668API\u7684\u53ef\u6269\u5c55\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u4f60\u5e94\u8be5\u59cb\u7ec8\u4f7f\u7528\u591a\u8fdb\u7a0b\u6a21\u578b\u6216\u5bb9\u5668\u3002","title":"20.2 \u670d\u52a1\u5668API\u57fa\u7840"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#203","text":"\u5bf9\u4e8e\u72ec\u7acb\u7684\u670d\u52a1\u5668\u5e94\u7528\u6216\u5d4c\u5165\uff0c\u4f60\u9700\u8981\u76f4\u63a5\u4f7f\u7528\u4e0a\u8ff0\u7684\u670d\u52a1\u5668\u7c7b\uff0c\u5c06\u5b83\u4eec\u5305\u88c5\u6210\u4e00\u4e2aWeb\u670d\u52a1\u5668\u5b9e\u73b0\uff0c\u7ba1\u7406\u6240\u6709\u4e0e\u5ba2\u6237\u7aef\u7684HTTP\u534f\u8bae\u4ea4\u4e92\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u5173\u4e8eQGIS\u670d\u52a1\u5668API\u5e94\u7528\u7684\u6700\u5c0f\u4f8b\u5b50\uff08\u6ca1\u6709HTTP\u90e8\u5206\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from qgis.core import QgsApplication from qgis.server import * app = QgsApplication ([], False ) # \u521b\u5efa\u670d\u52a1\u5668\u5b9e\u4f8b\uff0c\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u5b9e\u4f8b\uff0c\u5728\u591a\u4e2a\u8bf7\u6c42\u4e2d\u91cd\u590d\u4f7f\u7528 server = QgsServer () # \u901a\u8fc7\u6307\u5b9a\u5b8c\u6574\u7684URL\u548c\u4e00\u4e2a\u53ef\u9009\u7684\u4e3b\u4f53\u6765\u521b\u5efa\u8bf7\u6c42\uff08\u4f8b\u5982POST\u8bf7\u6c42\uff09 request = QgsBufferServerRequest ( 'http://localhost:8081/?MAP=/qgis-server/projects/helloworld.qgs' + '&SERVICE=WMS&REQUEST=GetCapabilities' ) # \u521b\u5efa\u54cd\u5e94\u5bf9\u8c61 response = QgsBufferServerResponse () # \u5904\u7406\u8bf7\u6c42 server . handleRequest ( request , response ) print ( response . headers ()) print ( response . body () . data () . decode ( 'utf8' )) app . exitQgis () \u8fd9\u91cc\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u72ec\u7acb\u5e94\u7528\u5b9e\u4f8b\uff0c\u5b83\u662f\u4e3aQGIS\u6e90\u4ee3\u7801\u5e93\u7684\u6301\u7eed\u96c6\u6210\u6d4b\u8bd5\u800c\u5f00\u53d1\u7684\uff0c\u5b83\u5c55\u793a\u4e86\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u63d2\u4ef6\u8fc7\u6ee4\u5668\u548c\u8ba4\u8bc1\u65b9\u6848\uff08\u4e0d\u610f\u5473\u7740\u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u662f\u4e3a\u6d4b\u8bd5\u76ee\u7684\u800c\u5f00\u53d1\u7684\uff0c\u4f46\u5bf9\u4e8e\u5b66\u4e60\u6765\u8bf4\u4ecd\u7136\u5f88\u6709\u8da3\uff09\uff1a https://github.com/qgis/QGIS/blob/master/tests/src/python/qgis_wrapped_server.py","title":"20.3 \u72ec\u7acb\u6216\u5d4c\u5165"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#204","text":"\u670d\u52a1\u5668python\u63d2\u4ef6\u5728QGIS\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\u88ab\u52a0\u8f7d\u4e00\u6b21\uff0c\u53ef\u7528\u4e8e\u6ce8\u518c\u8fc7\u6ee4\u5668\u3001\u670d\u52a1\u6216API\u3002 \u670d\u52a1\u5668\u63d2\u4ef6\u7684\u7ed3\u6784\u4e0e\u684c\u9762\u7248\u7684\u63d2\u4ef6\u975e\u5e38\u76f8\u4f3c\uff0c\u4e00\u4e2a QgsServerInterface \u5bf9\u8c61\u88ab\u63d0\u4f9b\u7ed9\u63d2\u4ef6\uff0c\u63d2\u4ef6\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u670d\u52a1\u5668\u63a5\u53e3\u66b4\u9732\u7684\u65b9\u6cd5\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u3001\u670d\u52a1\u6216API\u6ce8\u518c\u5230\u76f8\u5e94\u7684\u6ce8\u518c\u8868\u3002","title":"20.4 \u670d\u52a1\u5668\u63d2\u4ef6"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#2041","text":"\u8fc7\u6ee4\u5668\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u5b83\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b50\u7c7b\u5316\u4e0b\u9762\u7684\u4e00\u4e2a\u7c7b\u5e76\u8c03\u7528 QgsServerInterface \u7684\u76f8\u5e94\u65b9\u6cd5\u6765\u5b9e\u4f8b\u5316\u3002 \u8fc7\u6ee4\u5668\u7c7b\u578b \u57fa\u7c7b QgsServerInterface \u6ce8\u518c I/O QgsServerFilter registerFilter() Access Control QgsAccessControlFilter registerAccessControl() Cache QgsServerCacheFilter registerServerCache()","title":"20.4.1 \u670d\u52a1\u5668\u8fc7\u6ee4\u63d2\u4ef6"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#20411-io","text":"I/O\u8fc7\u6ee4\u5668\u53ef\u4ee5\u4fee\u6539\u6838\u5fc3\u670d\u52a1\uff08WMS\u3001WFS\u7b49\uff09\u7684\u670d\u52a1\u5668\u8f93\u5165\u548c\u8f93\u51fa\uff08\u8bf7\u6c42\u548c\u54cd\u5e94\uff09\uff0c\u5141\u8bb8\u5bf9\u670d\u52a1\u5de5\u4f5c\u6d41\u8fdb\u884c\u4efb\u4f55\u5f62\u5f0f\u7684\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u9650\u5236\u5bf9\u9009\u5b9a\u56fe\u5c42\u7684\u8bbf\u95ee\uff0c\u5411XML\u54cd\u5e94\u6ce8\u5165XSL\u6837\u5f0f\u8868\uff0c\u5411\u751f\u6210\u7684WMS\u56fe\u50cf\u6dfb\u52a0\u6c34\u5370\u7b49\u7b49\u3002 \u4ece\u8fd9\u4e00\u70b9\u6765\u770b\uff0c\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u5feb\u901f\u6d4f\u89c8\u4e00\u4e0b \u670d\u52a1\u5668\u63d2\u4ef6\u7684API\u6587\u6863 \u5f88\u6709\u7528\u3002 \u6bcf\u4e00\u4e2a\u63d2\u4ef6\u5e94\u8be5\u81f3\u5c11\u5b9e\u73b0\u4ee5\u4e0b\u4e09\u4e2a\u56de\u8c03\u51fd\u6570\uff1a requestReady() responseComplete() sendResponse() \u6240\u6709\u7684\u8fc7\u6ee4\u5668\u90fd\u53ef\u4ee5\u8bbf\u95ee\u8bf7\u6c42/\u54cd\u5e94\u5bf9\u8c61\uff08 QgsRequestHandler \uff09\uff0c\u5e76\u4e14\u53ef\u4ee5\u64cd\u4f5c\u5b83\u7684\u6240\u6709\u5c5e\u6027\uff08\u8f93\u5165/\u8f93\u51fa\uff09\u548c\u5f15\u53d1\u5f02\u5e38\uff08\u540c\u65f6\u4ee5\u4e00\u79cd\u76f8\u5f53\u7279\u522b\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u770b\u5230\uff09\u3002 \u4e0b\u9762\u662f\u663e\u793a\u670d\u52a1\u5668\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u5178\u578b\u8bf7\u6c42\u4ee5\u53ca\u4f55\u65f6\u8c03\u7528\u8fc7\u6ee4\u5668\u56de\u8c03\u51fd\u6570\u7684\u4f2a\u4ee3\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 for each incoming request: create GET/POST request handler pass request to an instance of QgsServerInterface call requestReady filters if there is not a response: if SERVICE is WMS/WFS/WCS: create WMS/WFS/WCS service call service\u2019s executeRequest possibly call sendResponse for each chunk of bytes sent to the client by a streaming services (WFS) call responseComplete call sendResponse request handler sends the response to the client \u4e0b\u9762\u51e0\u4e2a\u6bb5\u843d\u8be6\u7ec6\u63cf\u8ff0\u4e86\u53ef\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002","title":"20.4.1.1 I/O\u8fc7\u6ee4\u5668"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#20412","text":"\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u8fd8\u6709\u4e00\u4e9b\u5de5\u4f5c\u8981\u505a\uff1a\u76ee\u524d\u7684\u5b9e\u73b0\u53ef\u4ee5\u901a\u8fc7\u5c06 QgsRequestHandler \u5c5e\u6027\u8bbe\u7f6e\u4e3aQgsMapServiceException\u7684\u4e00\u4e2a\u5b9e\u4f8b\u6765\u533a\u5206\u5df2\u5904\u7406\u548c\u672a\u5904\u7406\u7684\u5f02\u5e38\uff0c\u8fd9\u6837\uff0c\u4e3b\u8981\u7684C++\u4ee3\u7801\u53ef\u4ee5\u6355\u83b7\u5df2\u5904\u7406\u7684Python\u5f02\u5e38\u800c\u5ffd\u7565\u672a\u5904\u7406\u7684\u5f02\u5e38\uff08\u6216\u8005\u66f4\u597d\u7684\u662f\uff1a\u8bb0\u5f55\u65e5\u5fd7\uff09\u3002 \u8fd9\u79cd\u65b9\u6cd5\u57fa\u672c\u4e0a\u662f\u53ef\u884c\u7684\uff0c\u4f46\u5b83\u4e0d\u662f\u5f88 \"pythonic\"\uff1a\u4e00\u4e2a\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u5728python\u4ee3\u7801\u4e2d\u5f15\u53d1\u5f02\u5e38\uff0c\u5e76\u770b\u5230\u5b83\u4eec\u8fdb\u5165\u5230C++\u5faa\u73af\u4e2d\u88ab\u5904\u7406\u3002","title":"20.4.1.2 \u4ece\u63d2\u4ef6\u5f15\u53d1\u5f02\u5e38"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#20413","text":"\u670d\u52a1\u5668\u63d2\u4ef6\u662f\u4e00\u4e2a\u6807\u51c6\u7684 QGIS Python \u63d2\u4ef6\uff0c\u5982 16-\u5f00\u53d1Python\u63d2\u4ef6 \u4e2d\u6240\u8ff0\uff0c\u5b83\u53ea\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u989d\u5916\u7684\uff08\u6216\u66ff\u4ee3\u7684\uff09\u63a5\u53e3\uff1a\u5178\u578b\u7684 QGIS \u684c\u9762\u63d2\u4ef6\u901a\u8fc7 QgisInterface \u5b9e\u4f8b\u8bbf\u95ee QGIS \u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u670d\u52a1\u5668\u63d2\u4ef6\u53ea\u6709\u5728 QGIS Server \u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u65f6\u624d\u80fd\u8bbf\u95ee\u3002 \u4e3a\u4e86\u8ba9QGIS Server\u77e5\u9053\u4e00\u4e2a\u63d2\u4ef6\u6709\u4e00\u4e2a\u670d\u52a1\u5668\u63a5\u53e3\uff0c\u9700\u8981\u4e00\u4e2a\u7279\u6b8a\u7684\u5143\u6570\u636e\u6761\u76ee\uff08\u5728 metadata.txt \u4e2d\uff09\u3002 1 server = True \u91cd\u8981\u7684 \u53ea\u6709\u8bbe\u7f6e\u4e86 server=True \u5143\u6570\u636e\u7684\u63d2\u4ef6\u624d\u80fd\u88abQGIS Server\u52a0\u8f7d\u548c\u6267\u884c\u3002 \u8fd9\u91cc\u8ba8\u8bba\u7684\u4f8b\u5b50\u63d2\u4ef6\uff08\u8fd8\u6709\u5f88\u591a\uff09\u53ef\u4ee5\u5728github\u4e0a\u627e\u5230\uff0c\u5730\u5740\u662fhttps://github.com/elpaso/qgis3-server-vagrant/tree/master/resources/web/plugins\uff0c\u4e00\u4e9b\u670d\u52a1\u5668\u63d2\u4ef6\u4e5f\u53d1\u5e03\u5728 QGIS\u5b98\u65b9\u63d2\u4ef6\u4ed3\u5e93 \u4e2d\u3002","title":"20.4.1.3 \u7f16\u5199\u4e00\u4e2a\u670d\u52a1\u5668\u63d2\u4ef6"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#20414","text":"\u4e0b\u9762\u662f\u6211\u4eec\u7684\u793a\u4f8b\u670d\u52a1\u5668\u63d2\u4ef6\u7684\u76ee\u5f55\u7ed3\u6784\u3002 1 2 3 4 5 PYTHON_PLUGINS_PATH/ HelloServer/ __init__.py --> *required* HelloServer.py --> *required* metadata.txt --> *required*","title":"20.4.1.4 \u63d2\u4ef6\u6587\u4ef6"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#20415","text":"\u8bbf\u95ee\u63a7\u5236\u8fc7\u6ee4\u5668\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u5bf9\u54ea\u4e9b\u5c42\u3001\u8981\u7d20\u548c\u5c5e\u6027\u53ef\u4ee5\u88ab\u8bbf\u95ee\u7684\u7ec6\u7c92\u5ea6\u63a7\u5236\uff0c\u4ee5\u4e0b\u56de\u8c03\u51fd\u6570\u53ef\u4ee5\u5728\u8bbf\u95ee\u63a7\u5236\u8fc7\u6ee4\u5668\u4e2d\u5b9e\u73b0\uff1a layerFilterExpression(layer) layerFilterSubsetString(layer) layerPermissions(layer) authorizedLayerAttributes(layer, attributes) allowToEdit(layer, feature) cacheKey()","title":"20.4.1.5 \u8bbf\u95ee\u63a7\u5236\u8fc7\u6ee4\u5668"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#2042","text":"\u5728QGIS\u670d\u52a1\u5668\u4e2d\uff0cWMS\u3001WFS\u548cWCS\u7b49\u6838\u5fc3\u670d\u52a1\u662f\u4f5c\u4e3a QgsService \u7684\u5b50\u7c7b\u5b9e\u73b0\u7684\u3002 \u4e3a\u4e86\u5b9e\u73b0\u4e00\u4e2a\u65b0\u7684\u670d\u52a1\uff0c\u5f53\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570 SERVICE \u4e0e\u670d\u52a1\u540d\u79f0\u76f8\u5339\u914d\u65f6\u5c06\u88ab\u6267\u884c\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0\u4f60\u81ea\u5df1\u7684 QgsService \uff0c\u5e76\u901a\u8fc7\u8c03\u7528 registerService(service) \u5728 serviceRegistry() \u4e0a\u6ce8\u518c\u4f60\u7684\u670d\u52a1\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u540d\u4e3aCUSTOM\u7684\u81ea\u5b9a\u4e49\u670d\u52a1\u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from qgis.server import QgsService from qgis.core import QgsMessageLog class CustomServiceService ( QgsService ): def __init__ ( self ): QgsService . __init__ ( self ) def name ( self ): return \"CUSTOM\" def version ( self ): return \"1.0.0\" def executeRequest ( self , request , response , project ): response . setStatusCode ( 200 ) QgsMessageLog . logMessage ( 'Custom service executeRequest' ) response . write ( \"Custom service executeRequest\" ) class CustomService (): def __init__ ( self , serverIface ): serverIface . serviceRegistry () . registerService ( CustomServiceService ())","title":"20.4.2 \u81ea\u5b9a\u4e49\u670d\u52a1"},{"location":"20-QGIS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CPython/#2043-apis","text":"\u5728QGIS Server\u4e2d\uff0c\u8bf8\u5982OAPIF\uff08\u53c8\u79f0WFS3\uff09\u7b49\u6838\u5fc3OGC APIs\u88ab\u5b9e\u73b0\u4e3a QgsServerOgcApiHandler \u5b50\u7c7b\u7684\u96c6\u5408\uff0c\u8fd9\u4e9b\u5b50\u7c7b\u88ab\u6ce8\u518c\u5230 QgsServerOgcApi \uff08\u6216\u5176\u7236\u7c7b QgsServerApi \uff09\u7684\u5b9e\u4f8b\u4e2d\u3002 \u8981\u5b9e\u73b0\u4e00\u4e2a\u65b0\u7684API\uff0c\u5f53url\u8def\u5f84\u4e0e\u67d0\u4e2aURL\u76f8\u5339\u914d\u65f6\u5c31\u4f1a\u88ab\u6267\u884c\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0\u4f60\u81ea\u5df1\u7684 QgsServerOgcApiHandler \u5b9e\u4f8b\uff0c\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230 QgsServerOgcApi \u4e2d\uff0c\u5e76\u901a\u8fc7\u8c03\u7528\u5176 registerApi(api) \u5728 serviceRegistry() \u4e0a\u6ce8\u518c\u8be5API\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49API\u7684\u4f8b\u5b50\uff0c\u5f53URL\u5305\u542b /customapi \u65f6\u5c06\u88ab\u6267\u884c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 import json import os from qgis.PyQt.QtCore import QBuffer , QIODevice , QTextStream , QRegularExpression from qgis.server import ( QgsServiceRegistry , QgsService , QgsServerFilter , QgsServerOgcApi , QgsServerQueryStringParameter , QgsServerOgcApiHandler , ) from qgis.core import ( QgsMessageLog , QgsJsonExporter , QgsCircle , QgsFeature , QgsPoint , QgsGeometry , ) class CustomApiHandler ( QgsServerOgcApiHandler ): def __init__ ( self ): super ( CustomApiHandler , self ) . __init__ () self . setContentTypes ([ QgsServerOgcApi . HTML , QgsServerOgcApi . JSON ]) def path ( self ): return QRegularExpression ( \"/customapi\" ) def operationId ( self ): return \"CustomApiXYCircle\" def summary ( self ): return \"Creates a circle around a point\" def description ( self ): return \"Creates a circle around a point\" def linkTitle ( self ): return \"Custom Api XY Circle\" def linkType ( self ): return QgsServerOgcApi . data def handleRequest ( self , context ): \"\"\"Simple Circle\"\"\" values = self . values ( context ) x = values [ 'x' ] y = values [ 'y' ] r = values [ 'r' ] f = QgsFeature () f . setAttributes ([ x , y , r ]) f . setGeometry ( QgsCircle ( QgsPoint ( x , y ), r ) . toCircularString ()) exporter = QgsJsonExporter () self . write ( json . loads ( exporter . exportFeature ( f )), context ) def templatePath ( self , context ): # \u6a21\u677f\u8def\u5f84\u7528\u4e8e\u63d0\u4f9bHTML\u5185\u5bb9 return os . path . join ( os . path . dirname ( __file__ ), 'circle.html' ) def parameters ( self , context ): return [ QgsServerQueryStringParameter ( 'x' , True , QgsServerQueryStringParameter . Type . Double , 'X coordinate' ), QgsServerQueryStringParameter ( 'y' , True , QgsServerQueryStringParameter . Type . Double , 'Y coordinate' ), QgsServerQueryStringParameter ( 'r' , True , QgsServerQueryStringParameter . Type . Double , 'radius' )] class CustomApi (): def __init__ ( self , serverIface ): api = QgsServerOgcApi ( serverIface , '/customapi' , 'custom api' , 'a custom api' , '1.1' ) handler = CustomApiHandler () api . registerHandler ( handler ) serverIface . serviceRegistry () . registerApi ( api )","title":"20.4.3. \u81ea\u5b9a\u4e49APIs"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/","text":"21 PyQGIS\u901f\u67e5\u8868 \u2693\ufe0e 21.1 \u7528\u6237\u63a5\u53e3 \u2693\ufe0e \u6539\u53d8\u5916\u89c2 1 2 3 4 5 6 7 from qgis.PyQt.QtWidgets import QApplication app = QApplication . instance () app . setStyleSheet ( \".QWidget {color: blue; background-color: yellow;}\" ) # \u4f60\u53ef\u4ee5\u4ece\u6587\u4ef6\u8bfb\u53d6\u6837\u5f0f with open ( \"testdata/file.qss\" ) as qss_file_content : app . setStyleSheet ( qss_file_content . read ()) \u6539\u53d8\u56fe\u6807\u548c\u6807\u9898 1 2 3 4 5 from qgis.PyQt.QtGui import QIcon icon = QIcon ( r \"/path/to/logo/file.png\" ) iface . mainWindow () . setWindowIcon ( icon ) iface . mainWindow () . setWindowTitle ( \"My QGIS\" ) 21.2 \u8bbe\u7f6e \u2693\ufe0e \u83b7\u5f97\u8bbe\u7f6e\u5217\u8868 1 2 3 4 5 6 from qgis.PyQt.QtCore import QSettings qs = QSettings () for k in sorted ( qs . allKeys ()): print ( k ) 21.3 \u5de5\u5177\u680f \u2693\ufe0e \u79fb\u9664\u5de5\u5177\u680f 1 2 3 4 5 6 7 8 from qgis.utils import iface toolbar = iface . helpToolBar () parent = toolbar . parentWidget () parent . removeToolBar ( toolbar ) # \u6dfb\u52a0 parent . addToolBar ( toolbar ) \u79fb\u9664\u64cd\u4f5c 1 2 3 4 actions = iface . attributesToolBar () . actions () iface . attributesToolBar () . clear () iface . attributesToolBar () . addAction ( actions [ 4 ]) iface . attributesToolBar () . addAction ( actions [ 3 ]) 21.4 \u83dc\u5355 \u2693\ufe0e \u79fb\u9664\u83dc\u5355 1 2 3 4 5 6 7 8 9 from qgis.utils import iface # \u5e2e\u52a9\u83dc\u5355 menu = iface . helpMenu () menubar = menu . parentWidget () menubar . removeAction ( menu . menuAction ()) # \u6dfb\u52a0 menubar . addAction ( menu . menuAction ()) 21.5 \u753b\u5e03 \u2693\ufe0e \u8bbf\u95ee\u753b\u5e03 1 2 3 from qgis.utils import iface canvas = iface . mapCanvas () \u6539\u53d8\u753b\u5e03\u989c\u8272 1 2 3 4 from qgis.PyQt.QtCore import Qt iface . mapCanvas () . setCanvasColor ( Qt . black ) iface . mapCanvas () . refresh () \u753b\u5e03\u5237\u65b0\u95f4\u9694 1 2 3 from qgis.PyQt.QtCore import QSettings # 150\u6beb\u79d2 QSettings () . setValue ( \"/qgis/map_update_interval\" , 150 ) 21.6 \u56fe\u5c42 \u2693\ufe0e \u6dfb\u52a0\u56fe\u5c42 1 2 3 4 5 from qgis.utils import iface layer = iface . addVectorLayer ( \"/path/to/shapefile/file.shp\" , \"layer name you like\" , \"ogr\" ) if not layer : print ( \"Layer failed to load!\" ) \u83b7\u53d6\u5f53\u524d\u56fe\u5c42 1 layer = iface . activeLayer () \u56fe\u5c42\u5217\u8868 1 2 3 from qgis.core import QgsProject QgsProject . instance () . mapLayers () . values () \u83b7\u5f97\u56fe\u5c42\u540d\u79f0 1 2 3 4 5 6 7 8 9 10 11 12 from qgis.core import QgsVectorLayer layer = QgsVectorLayer ( \"Point?crs=EPSG:4326\" , \"layer name you like\" , \"memory\" ) QgsProject . instance () . addMapLayer ( layer ) layers_names = [] for layer in QgsProject . instance () . mapLayers () . values (): layers_names . append ( layer . name ()) print ( \"layers TOC = {} \" . format ( layers_names )) layers_names = [ layer . name () for layer in QgsProject . instance () . mapLayers () . values ()] print ( \"layers TOC = {} \" . format ( layers_names )) \u901a\u8fc7\u540d\u79f0\u67e5\u627e\u56fe\u5c42 1 2 3 4 from qgis.core import QgsProject layer = QgsProject . instance () . mapLayersByName ( \"layer name you like\" )[ 0 ] print ( layer . name ()) \u8bbe\u7f6e\u5f53\u524d\u56fe\u5c42 1 2 3 4 from qgis.core import QgsProject layer = QgsProject . instance () . mapLayersByName ( \"layer name you like\" )[ 0 ] iface . setActiveLayer ( layer ) \u5237\u65b0\u56fe\u5c42 1 2 3 4 5 6 7 from qgis.core import QgsProject layer = QgsProject . instance () . mapLayersByName ( \"layer name you like\" )[ 0 ] # 5\u79d2 layer . setAutoRefreshInterval ( 5000 ) # \u81ea\u52a8\u5237\u65b0 layer . setAutoRefreshEnabled ( True ) \u6dfb\u52a0\u8868\u5355\u8981\u7d20 1 2 3 4 5 6 7 8 from qgis.core import QgsFeature , QgsGeometry feat = QgsFeature () geom = QgsGeometry () feat . setGeometry ( geom ) feat . setFields ( layer . fields ()) iface . openFeatureForm ( layer , feat , False ) \u6dfb\u52a0\u65e0\u8868\u5355\u8981\u7d20 1 2 3 4 5 6 from qgis.core import QgsPointXY pr = layer . dataProvider () feat = QgsFeature () feat . setGeometry ( QgsGeometry . fromPointXY ( QgsPointXY ( 10 , 10 ))) pr . addFeatures ([ feat ]) \u83b7\u5f97\u8981\u7d20 1 2 for f in layer . getFeatures (): print ( f ) \u83b7\u5f97\u5df2\u9009\u8981\u7d20 1 2 for f in layer . selectedFeatures (): print ( f ) \u83b7\u5f97\u8981\u7d20id 1 2 selected_ids = layer . selectedFeatureIds () print ( selected_ids ) \u4ece\u5df2\u9009\u8981\u7d20id\u521b\u5efa\u5185\u5b58\u56fe\u5c42 1 2 3 4 from qgis.core import QgsFeatureRequest memory_layer = layer . materialize ( QgsFeatureRequest () . setFilterFids ( layer . selectedFeatureIds ())) QgsProject . instance () . addMapLayer ( memory_layer ) \u83b7\u5f97\u51e0\u4f55 1 2 3 4 # \u70b9\u56fe\u5c42 for f in layer . getFeatures (): geom = f . geometry () print ( ' %f , %f ' % ( geom . asPoint () . y (), geom . asPoint () . x ())) \u79fb\u52a8\u51e0\u4f55 1 2 3 4 5 6 from qgis.core import QgsFeature , QgsGeometry poly = QgsFeature () geom = QgsGeometry . fromWkt ( \"POINT(7 45)\" ) geom . translate ( 1 , 1 ) poly . setGeometry ( geom ) print ( poly . geometry ()) \u8bbe\u7f6e\u5750\u6807\u53c2\u8003\u7cfb\u7edf 1 2 3 4 from qgis.core import QgsProject , QgsCoordinateReferenceSystem for layer in QgsProject . instance () . mapLayers () . values (): layer . setCrs ( QgsCoordinateReferenceSystem ( 4326 , QgsCoordinateReferenceSystem . EpsgCrsId )) \u67e5\u770b\u5750\u6807\u53c2\u8003\u7cfb\u7edf 1 2 3 4 5 from qgis.core import QgsProject for layer in QgsProject . instance () . mapLayers () . values (): crs = layer . crs () . authid () layer . setName ( ' {} ( {} )' . format ( layer . name (), crs )) \u9690\u85cf\u5b57\u6bb5 1 2 3 4 5 6 7 8 9 10 from qgis.core import QgsEditorWidgetSetup def fieldVisibility ( layer , fname ): setup = QgsEditorWidgetSetup ( 'Hidden' , {}) for i , column in enumerate ( layer . fields ()): if column . name () == fname : layer . setEditorWidgetSetup ( idx , setup ) break else : continue \u56fe\u5c42\u6dfb\u52a0WKT\u8981\u7d20 1 2 3 4 5 6 7 8 9 10 from qgis.core import QgsVectorLayer , QgsFeature , QgsGeometry , QgsProject layer = QgsVectorLayer ( 'Polygon?crs=epsg:4326' , 'Mississippi' , 'memory' ) pr = layer . dataProvider () poly = QgsFeature () geom = QgsGeometry . fromWkt ( \"POLYGON ((-88.82 34.99,-88.0934.89,-88.39 30.34,-89.57 30.18,-89.73 31,-91.63 30.99,-90.8732.37,-91.23 33.44,-90.93 34.23,-90.30 34.99,-88.82 34.99))\" ) poly . setGeometry ( geom ) pr . addFeatures ([ poly ]) layer . updateExtents () QgsProject . instance () . addMapLayers ([ layer ]) \u4eceGeoPackage\u52a0\u8f7d\u6240\u6709\u56fe\u5c42 1 2 3 4 5 6 7 8 9 10 11 12 13 from qgis.core import QgsVectorLayer , QgsProject fileName = \"/path/to/gpkg/file.gpkg\" layer = QgsVectorLayer ( fileName , \"test\" , \"ogr\" ) subLayers = layer . dataProvider () . subLayers () for subLayer in subLayers : name = subLayer . split ( '!!::!!' )[ 1 ] uri = \" %s |layername= %s \" % ( fileName , name ,) # \u521b\u5efa\u56fe\u5c42 sub_vlayer = QgsVectorLayer ( uri , name , 'ogr' ) # Add layer to map QgsProject . instance () . addMapLayer ( sub_vlayer ) \u52a0\u8f7d\u74e6\u7247\u56fe\u5c42\uff08xyz\uff09 1 2 3 4 5 6 7 8 from qgis.core import QgsRasterLayer , QgsProject def loadXYZ ( url , name ): rasterLyr = QgsRasterLayer ( \"type=xyz&url=\" + url , name , \"wms\" ) QgsProject . instance () . addMapLayer ( rasterLyr ) urlWithParams = 'type=xyz&url=https://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&zmax=19&zmin=0&crs=EPSG3857' loadXYZ ( urlWithParams , 'OpenStreetMap' ) \u79fb\u9664\u6240\u6709\u56fe\u5c42 1 QgsProject . instance () . removeAllMapLayers () \u79fb\u9664\u5168\u90e8 1 QgsProject . instance () . clear () 21.7 \u76ee\u5f55 \u2693\ufe0e \u8bbf\u95ee\u9009\u4e2d\u7684\u56fe\u5c42 1 2 3 from qgis.utils import iface iface . mapCanvas () . layers () \u79fb\u9664\u4e0a\u4e0b\u6587\u83dc\u5355 1 2 3 4 5 ltv = iface . layerTreeView () mp = ltv . menuProvider () ltv . setMenuProvider ( None ) # \u6062\u590d ltv . setMenuProvider ( mp ) 21.8 \u9ad8\u7ea7\u76ee\u5f55 \u2693\ufe0e \u6839\u8282\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 from qgis.core import QgsVectorLayer , QgsProject , QgsLayerTreeLayer root = QgsProject . instance () . layerTreeRoot () node_group = root . addGroup ( \"My Group\" ) layer = QgsVectorLayer ( \"Point?crs=EPSG:4326\" , \"layer name you like\" , \"memory\" ) QgsProject . instance () . addMapLayer ( layer , False ) node_group . addLayer ( layer ) print ( root ) print ( root . children ()) \u8bbf\u95ee\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9 1 2 3 4 5 6 7 from qgis.core import QgsLayerTreeGroup , QgsLayerTreeLayer , QgsLayerTree child0 = root . children ()[ 0 ] print ( child0 . name ()) print ( type ( child0 )) print ( isinstance ( child0 , QgsLayerTreeLayer )) print ( isinstance ( child0 . parent (), QgsLayerTree )) \u67e5\u627e\u56fe\u5c42\u7ec4\u548c\u6240\u6709\u8282\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from qgis.core import QgsLayerTreeGroup , QgsLayerTreeLayer def get_group_layers ( group ): print ( '- group: ' + group . name ()) for child in group . children (): if isinstance ( child , QgsLayerTreeGroup ): # \u904d\u5386\u5d4c\u5957\u56fe\u5c42\u7ec4 get_group_layers ( child ) else : print ( ' - layer: ' + child . name ()) root = QgsProject . instance () . layerTreeRoot () for child in root . children (): if isinstance ( child , QgsLayerTreeGroup ): get_group_layers ( child ) elif isinstance ( child , QgsLayerTreeLayer ): print ( '- layer: ' + child . name ()) \u901a\u8fc7\u540d\u79f0\u67e5\u627e\u56fe\u5c42\u7ec4 1 print ( root . findGroup ( \"My Group\" )) \u901a\u8fc7id\u67e5\u627e\u56fe\u5c42\u7ec4 1 print ( root . findLayer ( layer . layerId ())) \u6dfb\u52a0\u56fe\u5c42 1 2 3 4 5 from qgis.core import QgsVectorLayer , QgsProject layer1 = QgsVectorLayer ( \"Point?crs=EPSG:4326\" , \"layer name you like\" , \"memory\" ) QgsProject . instance () . addMapLayer ( layer1 , False ) node_layer1 = root . addLayer ( layer1 ) \u6dfb\u52a0\u56fe\u5c42\u7ec4 1 2 3 4 from qgis.core import QgsLayerTreeGroup node_group2 = QgsLayerTreeGroup ( \"Group 2\" ) root . addChildNode ( node_group2 ) \u79fb\u9664\u52a0\u8f7d\u7684\u56fe\u5c42 1 2 3 4 5 6 7 8 9 10 11 12 layer = QgsProject . instance () . mapLayersByName ( \"layer name you like\" )[ 0 ] root = QgsProject . instance () . layerTreeRoot () myLayer = root . findLayer ( layer . id ()) myClone = myLayer . clone () parent = myLayer . parent () myGroup = root . findGroup ( \"My Group\" ) # \u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e myGroup . insertChildNode ( 0 , myClone ) parent . removeChildNode ( myLayer ) \u79fb\u9664\u6307\u5b9a\u56fe\u5c42\u7ec4 1 2 3 4 5 6 7 8 QgsProject . instance () . addMapLayer ( layer , False ) root = QgsProject . instance () . layerTreeRoot () myGroup = root . findGroup ( \"My Group\" ) myOriginalLayer = root . findLayer ( layer . id ()) myLayer = myOriginalLayer . clone () myGroup . insertChildNode ( 0 , myLayer ) parent . removeChildNode ( myOriginalLayer ) \u6539\u53d8\u53ef\u89c1\u6027 1 2 myGroup . setItemVisibilityChecked ( False ) myLayer . setItemVisibilityChecked ( False ) \u56fe\u5c42\u7ec4\u662f\u5426\u88ab\u9009\u62e9 1 2 3 4 5 def isMyGroupSelected ( groupName ): myGroup = QgsProject . instance () . layerTreeRoot () . findGroup ( groupName ) return myGroup in iface . layerTreeView () . selectedNodes () print ( isMyGroupSelected ( 'my group name' )) \u79fb\u52a8\u8282\u70b9 1 2 3 cloned_group1 = node_group . clone () root . insertChildNode ( 0 , cloned_group1 ) root . removeChildNode ( node_group ) \u5c55\u5f00\u8282\u70b9 1 2 print ( myGroup . isExpanded ()) myGroup . setExpanded ( False ) \u9690\u85cf\u8282\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 from qgis.core import QgsProject model = iface . layerTreeView () . layerTreeModel () ltv = iface . layerTreeView () root = QgsProject . instance () . layerTreeRoot () layer = QgsProject . instance () . mapLayersByName ( 'layer name you like' )[ 0 ] node = root . findLayer ( layer . id ()) index = model . node2index ( node ) ltv . setRowHidden ( index . row (), index . parent (), True ) node . setCustomProperty ( 'nodeHidden' , 'true' ) ltv . setCurrentIndex ( model . node2index ( root )) \u8282\u70b9\u4fe1\u53f7 1 2 3 4 5 6 7 8 def onWillAddChildren ( node , indexFrom , indexTo ): print ( \"WILL ADD\" , node , indexFrom , indexTo ) def onAddedChildren ( node , indexFrom , indexTo ): print ( \"ADDED\" , node , indexFrom , indexTo ) root . willAddChildren . connect ( onWillAddChildren ) root . addedChildren . connect ( onAddedChildren ) \u79fb\u9664\u56fe\u5c42 1 root . removeLayer ( layer ) \u79fb\u9664\u56fe\u5c42\u7ec4 1 root . removeChildNode ( node_group2 ) \u521b\u5efa\u65b0\u7684\u76ee\u5f55\u6811 1 2 3 4 5 root = QgsProject . instance () . layerTreeRoot () model = QgsLayerTreeModel ( root ) view = QgsLayerTreeView () view . setModel ( model ) view . show ( \u79fb\u52a8\u8282\u70b9 1 2 3 cloned_group1 = node_group . clone () root . insertChildNode ( 0 , cloned_group1 ) root . removeChildNode ( node_group ) \u91cd\u547d\u540d\u8282\u70b9 1 2 cloned_group1 . setName ( \"Group X\" ) node_layer1 . setName ( \"Layer X\" ) 21.9 \u5904\u7406\u7b97\u6cd5 \u2693\ufe0e \u83b7\u5f97\u7b97\u6cd5\u5217\u8868 1 2 3 4 5 from qgis.core import QgsApplication for alg in QgsApplication . processingRegistry () . algorithms (): if 'buffer' == alg . name (): print ( \" {} : {} --> {} \" . format ( alg . provider () . name (), alg . name (), alg . displayName ())) \u83b7\u5f97\u7b97\u6cd5\u5e2e\u52a9 1 2 3 from qgis import processing processing . algorithmHelp ( \"qgis:randomselection\" ) \u8fd0\u884c\u7b97\u6cd5 \u672c\u793a\u4f8b\uff0c\u7ed3\u679c\u5b58\u50a8\u5728\u6dfb\u52a0\u5230\u9879\u76ee\u7684\u4e34\u65f6\u5185\u5b58\u5c42\u4e2d\u3002 1 2 3 from qgis import processing result = processing . run ( \"native:buffer\" , { 'INPUT' : layer , 'OUTPUT' : 'memory:' }) QgsProject . instance () . addMapLayer ( result [ 'OUTPUT' ]) \u7b97\u6cd5\u7edf\u8ba1 1 2 3 from qgis.core import QgsApplication len ( QgsApplication . processingRegistry () . algorithms ()) \u6570\u636e\u63d0\u4f9b\u8005\u7edf\u8ba1 1 2 3 from qgis.core import QgsApplication len ( QgsApplication . processingRegistry () . providers ()) \u8868\u8fbe\u5f0f\u7edf\u8ba1 1 2 3 from qgis.core import QgsExpression len ( QgsExpression . Functions ()) 21.10 \u88c5\u9970\u5668 \u2693\ufe0e \u7248\u6743 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 from qgis.PyQt.Qt import QTextDocument from qgis.PyQt.QtGui import QFont mQFont = \"Sans Serif\" mQFontsize = 9 mLabelQString = \"\u00a9 QGIS 2019\" mMarginHorizontal = 0 mMarginVertical = 0 mLabelQColor = \"#FF0000\" INCHES_TO_MM = 0.0393700787402 # 1 \u6beb\u7c73 = 0.0393700787402 \u82f1\u5bf8 case = 2 def add_copyright ( p , text , xOffset , yOffset ): p . translate ( xOffset , yOffset ) text . drawContents ( p ) p . setWorldTransform ( p . worldTransform () ) def _on_render_complete ( p ): deviceHeight = p . device () . height () # \u83b7\u53d6\u7ed8\u5236\u8bbe\u5907\u9ad8\u5ea6 deviceWidth = p . device () . width () # \u83b7\u53d6\u7ed8\u5236\u8bbe\u5907\u5bbd\u5ea6 # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bcc\u6587\u672c\u5bb9\u5668 text = QTextDocument () font = QFont () font . setFamily ( mQFont ) font . setPointSize ( int ( mQFontsize )) text . setDefaultFont ( font ) style = \"<style type= \\\" text/css \\\" > p {color: \" + mLabelQColor + \"}</style>\" text . setHtml ( style + \"<p>\" + mLabelQString + \"</p>\" ) # \u6587\u672c\u5927\u5c0f size = text . size () # \u6e32\u67d3 pixelsInchX = p . device () . logicalDpiX () pixelsInchY = p . device () . logicalDpiY () xOffset = pixelsInchX * INCHES_TO_MM * int ( mMarginHorizontal ) yOffset = pixelsInchY * INCHES_TO_MM * int ( mMarginVertical ) # \u8ba1\u7b97\u70b9\u4f4d if case == 0 : # \u5de6\u4e0a add_copyright ( p , text , xOffset , yOffset ) elif case == 1 : # \u5de6\u4e0b yOffset = deviceHeight - yOffset - size . height () add_copyright ( p , text , xOffset , yOffset ) elif case == 2 : # \u53f3\u4e0a xOffset = deviceWidth - xOffset - size . width () add_copyright ( p , text , xOffset , yOffset ) elif case == 3 : # \u53f3\u4e0b yOffset = deviceHeight - yOffset - size . height () xOffset = deviceWidth - xOffset - size . width () add_copyright ( p , text , xOffset , yOffset ) elif case == 4 : # \u4e0a\u4e2d\u5fc3\u70b9 xOffset = deviceWidth / 2 add_copyright ( p , text , xOffset , yOffset ) else : # \u4e0b\u4e2d\u5fc3\u70b9 yOffset = deviceHeight - yOffset - size . height () xOffset = deviceWidth / 2 add_copyright ( p , text , xOffset , yOffset ) # \u5f53\u753b\u5e03\u6e32\u67d3\u5b8c\u6210\u540e\u53d1\u9001\u4fe1\u53f7 iface . mapCanvas () . renderComplete . connect ( _on_render_complete ) # \u91cd\u7ed8\u753b\u5e03 iface . mapCanvas () . refresh () 21.11 \u521b\u4f5c\u8005 \u2693\ufe0e \u6309\u540d\u79f0\u83b7\u53d6\u6253\u5370\u5e03\u5c40 1 2 3 4 5 composerTitle = 'MyComposer' # \u521b\u4f5c\u8005\u540d\u79f0 project = QgsProject . instance () projectLayoutManager = project . layoutManager () layout = projectLayoutManager . layoutByName ( composerTitle ) 21.12 \u6765\u6e90 \u2693\ufe0e QGIS Python (PyQGIS) API QGIS C++ API StackOverFlow QGIS questions Script by Klas Karlsson","title":"21-PyQGIS\u901f\u67e5\u8868"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#21-pyqgis","text":"","title":"21 PyQGIS\u901f\u67e5\u8868"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#211","text":"\u6539\u53d8\u5916\u89c2 1 2 3 4 5 6 7 from qgis.PyQt.QtWidgets import QApplication app = QApplication . instance () app . setStyleSheet ( \".QWidget {color: blue; background-color: yellow;}\" ) # \u4f60\u53ef\u4ee5\u4ece\u6587\u4ef6\u8bfb\u53d6\u6837\u5f0f with open ( \"testdata/file.qss\" ) as qss_file_content : app . setStyleSheet ( qss_file_content . read ()) \u6539\u53d8\u56fe\u6807\u548c\u6807\u9898 1 2 3 4 5 from qgis.PyQt.QtGui import QIcon icon = QIcon ( r \"/path/to/logo/file.png\" ) iface . mainWindow () . setWindowIcon ( icon ) iface . mainWindow () . setWindowTitle ( \"My QGIS\" )","title":"21.1 \u7528\u6237\u63a5\u53e3"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#212","text":"\u83b7\u5f97\u8bbe\u7f6e\u5217\u8868 1 2 3 4 5 6 from qgis.PyQt.QtCore import QSettings qs = QSettings () for k in sorted ( qs . allKeys ()): print ( k )","title":"21.2 \u8bbe\u7f6e"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#213","text":"\u79fb\u9664\u5de5\u5177\u680f 1 2 3 4 5 6 7 8 from qgis.utils import iface toolbar = iface . helpToolBar () parent = toolbar . parentWidget () parent . removeToolBar ( toolbar ) # \u6dfb\u52a0 parent . addToolBar ( toolbar ) \u79fb\u9664\u64cd\u4f5c 1 2 3 4 actions = iface . attributesToolBar () . actions () iface . attributesToolBar () . clear () iface . attributesToolBar () . addAction ( actions [ 4 ]) iface . attributesToolBar () . addAction ( actions [ 3 ])","title":"21.3 \u5de5\u5177\u680f"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#214","text":"\u79fb\u9664\u83dc\u5355 1 2 3 4 5 6 7 8 9 from qgis.utils import iface # \u5e2e\u52a9\u83dc\u5355 menu = iface . helpMenu () menubar = menu . parentWidget () menubar . removeAction ( menu . menuAction ()) # \u6dfb\u52a0 menubar . addAction ( menu . menuAction ())","title":"21.4 \u83dc\u5355"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#215","text":"\u8bbf\u95ee\u753b\u5e03 1 2 3 from qgis.utils import iface canvas = iface . mapCanvas () \u6539\u53d8\u753b\u5e03\u989c\u8272 1 2 3 4 from qgis.PyQt.QtCore import Qt iface . mapCanvas () . setCanvasColor ( Qt . black ) iface . mapCanvas () . refresh () \u753b\u5e03\u5237\u65b0\u95f4\u9694 1 2 3 from qgis.PyQt.QtCore import QSettings # 150\u6beb\u79d2 QSettings () . setValue ( \"/qgis/map_update_interval\" , 150 )","title":"21.5 \u753b\u5e03"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#216","text":"\u6dfb\u52a0\u56fe\u5c42 1 2 3 4 5 from qgis.utils import iface layer = iface . addVectorLayer ( \"/path/to/shapefile/file.shp\" , \"layer name you like\" , \"ogr\" ) if not layer : print ( \"Layer failed to load!\" ) \u83b7\u53d6\u5f53\u524d\u56fe\u5c42 1 layer = iface . activeLayer () \u56fe\u5c42\u5217\u8868 1 2 3 from qgis.core import QgsProject QgsProject . instance () . mapLayers () . values () \u83b7\u5f97\u56fe\u5c42\u540d\u79f0 1 2 3 4 5 6 7 8 9 10 11 12 from qgis.core import QgsVectorLayer layer = QgsVectorLayer ( \"Point?crs=EPSG:4326\" , \"layer name you like\" , \"memory\" ) QgsProject . instance () . addMapLayer ( layer ) layers_names = [] for layer in QgsProject . instance () . mapLayers () . values (): layers_names . append ( layer . name ()) print ( \"layers TOC = {} \" . format ( layers_names )) layers_names = [ layer . name () for layer in QgsProject . instance () . mapLayers () . values ()] print ( \"layers TOC = {} \" . format ( layers_names )) \u901a\u8fc7\u540d\u79f0\u67e5\u627e\u56fe\u5c42 1 2 3 4 from qgis.core import QgsProject layer = QgsProject . instance () . mapLayersByName ( \"layer name you like\" )[ 0 ] print ( layer . name ()) \u8bbe\u7f6e\u5f53\u524d\u56fe\u5c42 1 2 3 4 from qgis.core import QgsProject layer = QgsProject . instance () . mapLayersByName ( \"layer name you like\" )[ 0 ] iface . setActiveLayer ( layer ) \u5237\u65b0\u56fe\u5c42 1 2 3 4 5 6 7 from qgis.core import QgsProject layer = QgsProject . instance () . mapLayersByName ( \"layer name you like\" )[ 0 ] # 5\u79d2 layer . setAutoRefreshInterval ( 5000 ) # \u81ea\u52a8\u5237\u65b0 layer . setAutoRefreshEnabled ( True ) \u6dfb\u52a0\u8868\u5355\u8981\u7d20 1 2 3 4 5 6 7 8 from qgis.core import QgsFeature , QgsGeometry feat = QgsFeature () geom = QgsGeometry () feat . setGeometry ( geom ) feat . setFields ( layer . fields ()) iface . openFeatureForm ( layer , feat , False ) \u6dfb\u52a0\u65e0\u8868\u5355\u8981\u7d20 1 2 3 4 5 6 from qgis.core import QgsPointXY pr = layer . dataProvider () feat = QgsFeature () feat . setGeometry ( QgsGeometry . fromPointXY ( QgsPointXY ( 10 , 10 ))) pr . addFeatures ([ feat ]) \u83b7\u5f97\u8981\u7d20 1 2 for f in layer . getFeatures (): print ( f ) \u83b7\u5f97\u5df2\u9009\u8981\u7d20 1 2 for f in layer . selectedFeatures (): print ( f ) \u83b7\u5f97\u8981\u7d20id 1 2 selected_ids = layer . selectedFeatureIds () print ( selected_ids ) \u4ece\u5df2\u9009\u8981\u7d20id\u521b\u5efa\u5185\u5b58\u56fe\u5c42 1 2 3 4 from qgis.core import QgsFeatureRequest memory_layer = layer . materialize ( QgsFeatureRequest () . setFilterFids ( layer . selectedFeatureIds ())) QgsProject . instance () . addMapLayer ( memory_layer ) \u83b7\u5f97\u51e0\u4f55 1 2 3 4 # \u70b9\u56fe\u5c42 for f in layer . getFeatures (): geom = f . geometry () print ( ' %f , %f ' % ( geom . asPoint () . y (), geom . asPoint () . x ())) \u79fb\u52a8\u51e0\u4f55 1 2 3 4 5 6 from qgis.core import QgsFeature , QgsGeometry poly = QgsFeature () geom = QgsGeometry . fromWkt ( \"POINT(7 45)\" ) geom . translate ( 1 , 1 ) poly . setGeometry ( geom ) print ( poly . geometry ()) \u8bbe\u7f6e\u5750\u6807\u53c2\u8003\u7cfb\u7edf 1 2 3 4 from qgis.core import QgsProject , QgsCoordinateReferenceSystem for layer in QgsProject . instance () . mapLayers () . values (): layer . setCrs ( QgsCoordinateReferenceSystem ( 4326 , QgsCoordinateReferenceSystem . EpsgCrsId )) \u67e5\u770b\u5750\u6807\u53c2\u8003\u7cfb\u7edf 1 2 3 4 5 from qgis.core import QgsProject for layer in QgsProject . instance () . mapLayers () . values (): crs = layer . crs () . authid () layer . setName ( ' {} ( {} )' . format ( layer . name (), crs )) \u9690\u85cf\u5b57\u6bb5 1 2 3 4 5 6 7 8 9 10 from qgis.core import QgsEditorWidgetSetup def fieldVisibility ( layer , fname ): setup = QgsEditorWidgetSetup ( 'Hidden' , {}) for i , column in enumerate ( layer . fields ()): if column . name () == fname : layer . setEditorWidgetSetup ( idx , setup ) break else : continue \u56fe\u5c42\u6dfb\u52a0WKT\u8981\u7d20 1 2 3 4 5 6 7 8 9 10 from qgis.core import QgsVectorLayer , QgsFeature , QgsGeometry , QgsProject layer = QgsVectorLayer ( 'Polygon?crs=epsg:4326' , 'Mississippi' , 'memory' ) pr = layer . dataProvider () poly = QgsFeature () geom = QgsGeometry . fromWkt ( \"POLYGON ((-88.82 34.99,-88.0934.89,-88.39 30.34,-89.57 30.18,-89.73 31,-91.63 30.99,-90.8732.37,-91.23 33.44,-90.93 34.23,-90.30 34.99,-88.82 34.99))\" ) poly . setGeometry ( geom ) pr . addFeatures ([ poly ]) layer . updateExtents () QgsProject . instance () . addMapLayers ([ layer ]) \u4eceGeoPackage\u52a0\u8f7d\u6240\u6709\u56fe\u5c42 1 2 3 4 5 6 7 8 9 10 11 12 13 from qgis.core import QgsVectorLayer , QgsProject fileName = \"/path/to/gpkg/file.gpkg\" layer = QgsVectorLayer ( fileName , \"test\" , \"ogr\" ) subLayers = layer . dataProvider () . subLayers () for subLayer in subLayers : name = subLayer . split ( '!!::!!' )[ 1 ] uri = \" %s |layername= %s \" % ( fileName , name ,) # \u521b\u5efa\u56fe\u5c42 sub_vlayer = QgsVectorLayer ( uri , name , 'ogr' ) # Add layer to map QgsProject . instance () . addMapLayer ( sub_vlayer ) \u52a0\u8f7d\u74e6\u7247\u56fe\u5c42\uff08xyz\uff09 1 2 3 4 5 6 7 8 from qgis.core import QgsRasterLayer , QgsProject def loadXYZ ( url , name ): rasterLyr = QgsRasterLayer ( \"type=xyz&url=\" + url , name , \"wms\" ) QgsProject . instance () . addMapLayer ( rasterLyr ) urlWithParams = 'type=xyz&url=https://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&zmax=19&zmin=0&crs=EPSG3857' loadXYZ ( urlWithParams , 'OpenStreetMap' ) \u79fb\u9664\u6240\u6709\u56fe\u5c42 1 QgsProject . instance () . removeAllMapLayers () \u79fb\u9664\u5168\u90e8 1 QgsProject . instance () . clear ()","title":"21.6 \u56fe\u5c42"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#217","text":"\u8bbf\u95ee\u9009\u4e2d\u7684\u56fe\u5c42 1 2 3 from qgis.utils import iface iface . mapCanvas () . layers () \u79fb\u9664\u4e0a\u4e0b\u6587\u83dc\u5355 1 2 3 4 5 ltv = iface . layerTreeView () mp = ltv . menuProvider () ltv . setMenuProvider ( None ) # \u6062\u590d ltv . setMenuProvider ( mp )","title":"21.7 \u76ee\u5f55"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#218","text":"\u6839\u8282\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 from qgis.core import QgsVectorLayer , QgsProject , QgsLayerTreeLayer root = QgsProject . instance () . layerTreeRoot () node_group = root . addGroup ( \"My Group\" ) layer = QgsVectorLayer ( \"Point?crs=EPSG:4326\" , \"layer name you like\" , \"memory\" ) QgsProject . instance () . addMapLayer ( layer , False ) node_group . addLayer ( layer ) print ( root ) print ( root . children ()) \u8bbf\u95ee\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9 1 2 3 4 5 6 7 from qgis.core import QgsLayerTreeGroup , QgsLayerTreeLayer , QgsLayerTree child0 = root . children ()[ 0 ] print ( child0 . name ()) print ( type ( child0 )) print ( isinstance ( child0 , QgsLayerTreeLayer )) print ( isinstance ( child0 . parent (), QgsLayerTree )) \u67e5\u627e\u56fe\u5c42\u7ec4\u548c\u6240\u6709\u8282\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from qgis.core import QgsLayerTreeGroup , QgsLayerTreeLayer def get_group_layers ( group ): print ( '- group: ' + group . name ()) for child in group . children (): if isinstance ( child , QgsLayerTreeGroup ): # \u904d\u5386\u5d4c\u5957\u56fe\u5c42\u7ec4 get_group_layers ( child ) else : print ( ' - layer: ' + child . name ()) root = QgsProject . instance () . layerTreeRoot () for child in root . children (): if isinstance ( child , QgsLayerTreeGroup ): get_group_layers ( child ) elif isinstance ( child , QgsLayerTreeLayer ): print ( '- layer: ' + child . name ()) \u901a\u8fc7\u540d\u79f0\u67e5\u627e\u56fe\u5c42\u7ec4 1 print ( root . findGroup ( \"My Group\" )) \u901a\u8fc7id\u67e5\u627e\u56fe\u5c42\u7ec4 1 print ( root . findLayer ( layer . layerId ())) \u6dfb\u52a0\u56fe\u5c42 1 2 3 4 5 from qgis.core import QgsVectorLayer , QgsProject layer1 = QgsVectorLayer ( \"Point?crs=EPSG:4326\" , \"layer name you like\" , \"memory\" ) QgsProject . instance () . addMapLayer ( layer1 , False ) node_layer1 = root . addLayer ( layer1 ) \u6dfb\u52a0\u56fe\u5c42\u7ec4 1 2 3 4 from qgis.core import QgsLayerTreeGroup node_group2 = QgsLayerTreeGroup ( \"Group 2\" ) root . addChildNode ( node_group2 ) \u79fb\u9664\u52a0\u8f7d\u7684\u56fe\u5c42 1 2 3 4 5 6 7 8 9 10 11 12 layer = QgsProject . instance () . mapLayersByName ( \"layer name you like\" )[ 0 ] root = QgsProject . instance () . layerTreeRoot () myLayer = root . findLayer ( layer . id ()) myClone = myLayer . clone () parent = myLayer . parent () myGroup = root . findGroup ( \"My Group\" ) # \u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e myGroup . insertChildNode ( 0 , myClone ) parent . removeChildNode ( myLayer ) \u79fb\u9664\u6307\u5b9a\u56fe\u5c42\u7ec4 1 2 3 4 5 6 7 8 QgsProject . instance () . addMapLayer ( layer , False ) root = QgsProject . instance () . layerTreeRoot () myGroup = root . findGroup ( \"My Group\" ) myOriginalLayer = root . findLayer ( layer . id ()) myLayer = myOriginalLayer . clone () myGroup . insertChildNode ( 0 , myLayer ) parent . removeChildNode ( myOriginalLayer ) \u6539\u53d8\u53ef\u89c1\u6027 1 2 myGroup . setItemVisibilityChecked ( False ) myLayer . setItemVisibilityChecked ( False ) \u56fe\u5c42\u7ec4\u662f\u5426\u88ab\u9009\u62e9 1 2 3 4 5 def isMyGroupSelected ( groupName ): myGroup = QgsProject . instance () . layerTreeRoot () . findGroup ( groupName ) return myGroup in iface . layerTreeView () . selectedNodes () print ( isMyGroupSelected ( 'my group name' )) \u79fb\u52a8\u8282\u70b9 1 2 3 cloned_group1 = node_group . clone () root . insertChildNode ( 0 , cloned_group1 ) root . removeChildNode ( node_group ) \u5c55\u5f00\u8282\u70b9 1 2 print ( myGroup . isExpanded ()) myGroup . setExpanded ( False ) \u9690\u85cf\u8282\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 from qgis.core import QgsProject model = iface . layerTreeView () . layerTreeModel () ltv = iface . layerTreeView () root = QgsProject . instance () . layerTreeRoot () layer = QgsProject . instance () . mapLayersByName ( 'layer name you like' )[ 0 ] node = root . findLayer ( layer . id ()) index = model . node2index ( node ) ltv . setRowHidden ( index . row (), index . parent (), True ) node . setCustomProperty ( 'nodeHidden' , 'true' ) ltv . setCurrentIndex ( model . node2index ( root )) \u8282\u70b9\u4fe1\u53f7 1 2 3 4 5 6 7 8 def onWillAddChildren ( node , indexFrom , indexTo ): print ( \"WILL ADD\" , node , indexFrom , indexTo ) def onAddedChildren ( node , indexFrom , indexTo ): print ( \"ADDED\" , node , indexFrom , indexTo ) root . willAddChildren . connect ( onWillAddChildren ) root . addedChildren . connect ( onAddedChildren ) \u79fb\u9664\u56fe\u5c42 1 root . removeLayer ( layer ) \u79fb\u9664\u56fe\u5c42\u7ec4 1 root . removeChildNode ( node_group2 ) \u521b\u5efa\u65b0\u7684\u76ee\u5f55\u6811 1 2 3 4 5 root = QgsProject . instance () . layerTreeRoot () model = QgsLayerTreeModel ( root ) view = QgsLayerTreeView () view . setModel ( model ) view . show ( \u79fb\u52a8\u8282\u70b9 1 2 3 cloned_group1 = node_group . clone () root . insertChildNode ( 0 , cloned_group1 ) root . removeChildNode ( node_group ) \u91cd\u547d\u540d\u8282\u70b9 1 2 cloned_group1 . setName ( \"Group X\" ) node_layer1 . setName ( \"Layer X\" )","title":"21.8 \u9ad8\u7ea7\u76ee\u5f55"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#219","text":"\u83b7\u5f97\u7b97\u6cd5\u5217\u8868 1 2 3 4 5 from qgis.core import QgsApplication for alg in QgsApplication . processingRegistry () . algorithms (): if 'buffer' == alg . name (): print ( \" {} : {} --> {} \" . format ( alg . provider () . name (), alg . name (), alg . displayName ())) \u83b7\u5f97\u7b97\u6cd5\u5e2e\u52a9 1 2 3 from qgis import processing processing . algorithmHelp ( \"qgis:randomselection\" ) \u8fd0\u884c\u7b97\u6cd5 \u672c\u793a\u4f8b\uff0c\u7ed3\u679c\u5b58\u50a8\u5728\u6dfb\u52a0\u5230\u9879\u76ee\u7684\u4e34\u65f6\u5185\u5b58\u5c42\u4e2d\u3002 1 2 3 from qgis import processing result = processing . run ( \"native:buffer\" , { 'INPUT' : layer , 'OUTPUT' : 'memory:' }) QgsProject . instance () . addMapLayer ( result [ 'OUTPUT' ]) \u7b97\u6cd5\u7edf\u8ba1 1 2 3 from qgis.core import QgsApplication len ( QgsApplication . processingRegistry () . algorithms ()) \u6570\u636e\u63d0\u4f9b\u8005\u7edf\u8ba1 1 2 3 from qgis.core import QgsApplication len ( QgsApplication . processingRegistry () . providers ()) \u8868\u8fbe\u5f0f\u7edf\u8ba1 1 2 3 from qgis.core import QgsExpression len ( QgsExpression . Functions ())","title":"21.9 \u5904\u7406\u7b97\u6cd5"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#2110","text":"\u7248\u6743 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 from qgis.PyQt.Qt import QTextDocument from qgis.PyQt.QtGui import QFont mQFont = \"Sans Serif\" mQFontsize = 9 mLabelQString = \"\u00a9 QGIS 2019\" mMarginHorizontal = 0 mMarginVertical = 0 mLabelQColor = \"#FF0000\" INCHES_TO_MM = 0.0393700787402 # 1 \u6beb\u7c73 = 0.0393700787402 \u82f1\u5bf8 case = 2 def add_copyright ( p , text , xOffset , yOffset ): p . translate ( xOffset , yOffset ) text . drawContents ( p ) p . setWorldTransform ( p . worldTransform () ) def _on_render_complete ( p ): deviceHeight = p . device () . height () # \u83b7\u53d6\u7ed8\u5236\u8bbe\u5907\u9ad8\u5ea6 deviceWidth = p . device () . width () # \u83b7\u53d6\u7ed8\u5236\u8bbe\u5907\u5bbd\u5ea6 # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bcc\u6587\u672c\u5bb9\u5668 text = QTextDocument () font = QFont () font . setFamily ( mQFont ) font . setPointSize ( int ( mQFontsize )) text . setDefaultFont ( font ) style = \"<style type= \\\" text/css \\\" > p {color: \" + mLabelQColor + \"}</style>\" text . setHtml ( style + \"<p>\" + mLabelQString + \"</p>\" ) # \u6587\u672c\u5927\u5c0f size = text . size () # \u6e32\u67d3 pixelsInchX = p . device () . logicalDpiX () pixelsInchY = p . device () . logicalDpiY () xOffset = pixelsInchX * INCHES_TO_MM * int ( mMarginHorizontal ) yOffset = pixelsInchY * INCHES_TO_MM * int ( mMarginVertical ) # \u8ba1\u7b97\u70b9\u4f4d if case == 0 : # \u5de6\u4e0a add_copyright ( p , text , xOffset , yOffset ) elif case == 1 : # \u5de6\u4e0b yOffset = deviceHeight - yOffset - size . height () add_copyright ( p , text , xOffset , yOffset ) elif case == 2 : # \u53f3\u4e0a xOffset = deviceWidth - xOffset - size . width () add_copyright ( p , text , xOffset , yOffset ) elif case == 3 : # \u53f3\u4e0b yOffset = deviceHeight - yOffset - size . height () xOffset = deviceWidth - xOffset - size . width () add_copyright ( p , text , xOffset , yOffset ) elif case == 4 : # \u4e0a\u4e2d\u5fc3\u70b9 xOffset = deviceWidth / 2 add_copyright ( p , text , xOffset , yOffset ) else : # \u4e0b\u4e2d\u5fc3\u70b9 yOffset = deviceHeight - yOffset - size . height () xOffset = deviceWidth / 2 add_copyright ( p , text , xOffset , yOffset ) # \u5f53\u753b\u5e03\u6e32\u67d3\u5b8c\u6210\u540e\u53d1\u9001\u4fe1\u53f7 iface . mapCanvas () . renderComplete . connect ( _on_render_complete ) # \u91cd\u7ed8\u753b\u5e03 iface . mapCanvas () . refresh ()","title":"21.10 \u88c5\u9970\u5668"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#2111","text":"\u6309\u540d\u79f0\u83b7\u53d6\u6253\u5370\u5e03\u5c40 1 2 3 4 5 composerTitle = 'MyComposer' # \u521b\u4f5c\u8005\u540d\u79f0 project = QgsProject . instance () projectLayoutManager = project . layoutManager () layout = projectLayoutManager . layoutByName ( composerTitle )","title":"21.11 \u521b\u4f5c\u8005"},{"location":"21-PyQGIS%E9%80%9F%E6%9F%A5%E8%A1%A8/#2112","text":"QGIS Python (PyQGIS) API QGIS C++ API StackOverFlow QGIS questions Script by Klas Karlsson","title":"21.12 \u6765\u6e90"},{"location":"3-%E5%8A%A0%E8%BD%BD%E5%9B%BE%E5%B1%82/","text":"3 \u52a0\u8f7d\u56fe\u5c42 \u2693\ufe0e \u6b64\u9875\u9762\u4e0a\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 import os # pyqgis\u63a7\u5236\u53f0\u540c\u6837\u9700\u8981 from qgis.core import ( QgsVectorLayer ) \u8ba9\u6211\u4eec\u4f7f\u7528\u6570\u636e\u6253\u5f00\u4e00\u4e9b\u56fe\u5c42\u3002QGIS\u53ef\u8bc6\u522b\u77e2\u91cf\u548c\u6805\u683c\u56fe\u5c42\u3002\u6b64\u5916\uff0c\u81ea\u5b9a\u4e49\u56fe\u5c42\u7c7b\u578b\u4e5f\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u6211\u4eec\u4e0d\u6253\u7b97\u5728\u6b64\u8ba8\u8bba\u3002 3.1 \u77e2\u91cf\u56fe\u5c42 \u2693\ufe0e \u521b\u5efa\u4e00\u4e2a\u77e2\u91cf\u56fe\u5c42\u5b9e\u4f8b\uff0c\u6307\u5b9a\u56fe\u5c42\u7684\u6570\u636e\u6e90\u6807\u8bc6\u3001\u56fe\u5c42\u540d\u79f0\u548c\u63d0\u4f9b\u8005\u540d\u79f0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 # \u83b7\u53d6shapefile\u7684\u8def\u5f84\uff0c\u4f8b\u5982\uff1a/home/project/data/ports.shp path_to_airports_layer = \"testdata/airports.shp\" # \u683c\u5f0f\u4e3a\uff1a # vlayer = QgsVectorLayer(data_source, layer_name, provider_name) vlayer = QgsVectorLayer ( path_to_ports_layer , \"Airports layer\" , \"ogr\" ) if not vlayer . isValid (): print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) else : QgsProject . instance () . addMapLayer ( vlayer ) \u6570\u636e\u6e90\u6807\u8bc6\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u7279\u5b9a\u4e8e\u6bcf\u4e2a\u77e2\u91cf\u6570\u636e\u63d0\u4f9b\u8005\u3002\u56fe\u5c42\u540d\u79f0\u7528\u4e8e\u56fe\u5c42\u5217\u8868\u90e8\u4ef6\u3002\u68c0\u67e5\u56fe\u5c42\u662f\u5426\u5df2\u6210\u529f\u52a0\u8f7d\u975e\u5e38\u91cd\u8981\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8fd4\u56de\u65e0\u6548\u7684\u56fe\u5c42\u5b9e\u4f8b\u3002 geopackage \u77e2\u91cf\u56fe\u5c42\uff1a 1 2 3 4 5 6 7 8 9 10 # \u83b7\u53d6geopackage\u7684\u8def\u5f84\uff0c\u4f8b\u5982\uff1a/home/project/data/data.gpkg path_to_gpkg = os . path . join ( QgsProject . instance () . homePath (), \"data\" , \"data.gpkg\" ) # \u8ffd\u52a0\u56fe\u5c42\u540d\u79f0 gpkg_places_layer = path_to_gpkg + \"|layername=places\" # \u4f8b\u5982\uff1agpkg_places_layer = \"/home/project/data/data.gpkg|layername=places\" vlayer = QgsVectorLayer ( gpkg_places_layer , \"Places layer\" , \"ogr\" ) if not vlayer . isValid (): print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) else : QgsProject . instance () . addMapLayer ( vlayer ) \u5728QGIS\u4e2d\u6253\u5f00\u5e76\u663e\u793a\u77e2\u91cf\u56fe\u5c42\u7684\u6700\u5feb\u65b9\u5f0f\u662f\u4f7f\u7528 QgisInterface \u7c7b\u7684 addVectorLayer() \u65b9\u6cd5\uff1a 1 2 3 vlayer = iface . addVectorLayer ( path_to_ports_layer , \"Ports layer\" , \"ogr\" ) if not vlayer : print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u56fe\u5c42\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u5f53\u524dQGIS\u9879\u76ee\u4e2d\uff08\u4f7f\u5176\u663e\u793a\u5728\u56fe\u5c42\u5217\u8868\u4e2d\uff09\u3002\u8be5\u51fd\u6570\u8fd4\u56de\u56fe\u5c42\u5b9e\u4f8b\uff0c\u5982\u679c\u65e0\u6cd5\u52a0\u8f7d\u56fe\u5c42\u5219\u8fd4\u56de None \u3002 \u4ee5\u4e0b\u5217\u8868\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u77e2\u91cf\u6570\u636e\u63d0\u4f9b\u8005\u8bbf\u95ee\u5404\u79cd\u6570\u636e\u6e90\uff1a OGR\u5e93\uff08Shapefile\u548c\u8bb8\u591a\u5176\u4ed6\u6587\u4ef6\u683c\u5f0f\uff09\u2014\u2014\u6570\u636e\u6e90\u662f\u6587\u4ef6\u7684\u8def\u5f84\uff1a Shapefile\uff1a 1 2 vlayer = QgsVectorLayer ( \"/path/to/shapefile/file.shp\" , \"layer_name_you_like\" , \"ogr\" ) QgsProject . instance () . addMapLayer ( vlayer ) dxf\uff08\u6ce8\u610f\u6570\u636e\u6e90uri\u4e2d\u7684\u5185\u90e8\u9009\u9879\uff09\uff1a 1 2 3 uri = \"/path/to/dxffile/file.dxf|layername=entities|geometrytype=Point\" vlayer = QgsVectorLayer ( uri , \"layer_name_you_like\" , \"ogr\" ) QgsProject . instance () . addMapLayer ( vlayer ) PostGIS\u6570\u636e\u5e93\u2014\u2014\u6570\u636e\u6e90\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u4e0ePostgreSQL\u6570\u636e\u5e93\u521b\u5efa\u8fde\u63a5\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\u3002 QgsDataSourceUri \u7c7b\u53ef\u4ee5\u4e3a\u4f60\u751f\u6210\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002\u8bf7\u6ce8\u610f\uff0c\u5fc5\u987b\u5728\u7f16\u8bd1QGIS\u65f6\u652f\u6301Postgres\uff0c\u5426\u5219\u6b64\u63d0\u4f9b\u8005\u4e0d\u53ef\u7528\uff1a 1 2 3 4 5 6 uri = QgsDataSourceUri () # \u8bbe\u7f6e\u4e3b\u673a\uff0c\u7aef\u53e3\uff0c\u6570\u636e\u5e93\u540d\u79f0\uff0c\u7528\u6237\u540d\u548c\u5bc6\u7801 uri . setConnection ( \"localhost\" , \"5432\" , \"dbname\" , \"johny\" , \"xxx\" ) # \u8bbe\u7f6e\u6570\u636e\u5e93\u67b6\u6784\uff0c\u8868\u540d\uff0c\u51e0\u4f55\u5217\u548c\u53ef\u9009\u9879\uff08WHERE \u8bed\u53e5\uff09 uri . setDataSource ( \"public\" , \"roads\" , \"the_geom\" , \"cityid = 2643\" , \"primary_key_field\" ) vlayer = QgsVectorLayer ( uri . uri ( False ), \"layer name you like\" , \"postgres\" ) \u63d0\u793a uri.uri(False) \u4e2d\u7684 False \u53c2\u6570\u53ef\u4ee5\u9632\u6b62\u6269\u5c55\u8ba4\u8bc1\u914d\u7f6e\u53c2\u6570\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u8eab\u4efd\u9a8c\u8bc1\u914d\u7f6e\uff0c\u5219\u6b64\u53c2\u6570\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u5dee\u5f02\u3002 CSV\u6216\u5176\u4ed6\u5206\u9694\u7684\u6587\u672c\u6587\u4ef6\u2014\u2014\u6253\u5f00\u4e00\u4e2a\u7528\u5206\u53f7\u4f5c\u4e3a\u5206\u9694\u7b26\u7684\u6587\u4ef6\uff0cX\u5750\u6807\u4f7f\u7528\u5b57\u6bb5\u201cx\u201d\uff0cY\u5750\u6807\u4f7f\u7528\u5b57\u6bb5\u201cy\u201d\uff1a 1 2 3 uri = \"file:// {} /testdata/delimited_xy.csv?delimiter= {} &xField= {} &yField= {} \" . format ( os . getcwd (), \";\" , \"x\" , \"y\" ) vlayer = QgsVectorLayer ( uri , \"layer name you like\" , \"delimitedtext\" ) QgsProject . instance () . addMapLayer ( vlayer ) \u63d0\u793a \u63d0\u4f9b\u8005\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3a\u4e00\u4e2aURL\uff0c\u56e0\u6b64\u8def\u5f84\u5fc5\u987b\u4ee5file://\u4e3a\u524d\u7f00\u3002\u5b83\u8fd8\u5141\u8bb8WKT\uff08(well known text\uff09\u683c\u5f0f\u7684\u51e0\u4f55\u4f5c\u4e3a x \u548c y \u7684\u66ff\u4ee3\u5b57\u6bb5\uff0c\u5e76\u5141\u8bb8\u6307\u5b9a\u5750\u6807\u53c2\u8003\u7cfb\u7edf\u3002\u4f8b\u5982\uff1a 1 uri = \"file:///some/path/file.csv?delimiter= {} &crs=epsg:4723&wktField= {} \" . format ( \";\" , \"shape\" ) GPX\u6587\u4ef6\u2014\u2014\u201cgpx\u201d\u6570\u636e\u63d0\u4f9b\u8005\u4ecegpx\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8f68\u8ff9\uff0c\u8def\u7ebf\u548c\u8def\u70b9\u3002\u8981\u6253\u5f00\u6587\u4ef6\uff0c\u9700\u8981\u5728url\u4e2d\u6307\u5b9a\u7c7b\u578b\uff08track / route / waypoint\uff09\uff1a 1 2 3 uri = \"path/to/gpx/file.gpx?type=track\" vlayer = QgsVectorLayer ( uri , \"layer name you like\" , \"gpx\" ) QgsProject . instance () . addMapLayer ( vlayer ) SpatiaLite\u6570\u636e\u5e93\u2014\u2014\u4e0ePostGIS\u6570\u636e\u5e93\u7c7b\u4f3c\uff0c QgsDataSourceUri \u53ef\u7528\u4e8e\u751f\u6210\u6570\u636e\u6e90\u6807\u8bc6\uff1a 1 2 3 4 5 6 7 8 9 uri = QgsDataSourceUri () uri . setDatabase ( '/home/martin/test-2.3.sqlite' ) schema = '' table = 'Towns' geom_column = 'Geometry' uri . setDataSource ( schema , table , geom_column ) display_name = 'Towns' vlayer = QgsVectorLayer ( uri . uri (), display_name , 'spatialite' ) QgsProject . instance () . addMapLayer ( vlayer ) \u57fa\u4e8eMySQL WKB\u7684\u51e0\u4f55\uff0c\u901a\u8fc7OGR\u2014\u2014\u6570\u636e\u6e90\u662f\u8fde\u63a5\u8868\u7684\u5b57\u7b26\u4e32\uff1a 1 2 3 uri = \"MySQL:dbname,host=localhost,port=3306,user=root,password=xxx|layername=my_table\" vlayer = QgsVectorLayer ( uri , \"my table\" , \"ogr\" ) QgsProject . instance () . addMapLayer ( vlayer ) WFS\u8fde\u63a5\uff1a\u8fde\u63a5\u4f7f\u7528URI\u5b9a\u4e49\u5e76\u4f7f\u7528 WFS \u63d0\u4f9b\u8005\uff1a 1 2 uri = \"https://demo.geo-solutions.it/geoserver/ows?service=WFS&version=1.1.0&request=GetFeature&typename=geosolutions:regioni\" vlayer = QgsVectorLayer ( uri , \"my wfs layer\" , \"WFS\" ) \u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u5e93 urllib \u521b\u5efauri\uff1a 1 2 3 4 5 6 7 8 9 10 import urllib params = { 'service' : 'WFS' , 'version' : '1.1.0' , 'request' : 'GetFeature' , 'typename' : 'geosolutions:regioni' , 'srsname' : \"EPSG:4326\" } uri2 = 'https://demo.geo-solutions.it/geoserver/ows?' + urllib . parse . unquote ( urllib . parse . urlencode ( params )) \u63d0\u793a \u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 QgsVectorLayer \u7684 setDataSource() \u65b9\u6cd5\u66f4\u6539\u73b0\u6709\u56fe\u5c42\u7684\u6570\u636e\u6e90\uff0c\u5982\u4e0b\u9762\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 uri = \"https://demo.geo-solutions.it/geoserver/ows?service=WFS&version=1.1.0&request=GetFeature&typename=geosolutions:regioni\" provider_options = QgsDataProvider . ProviderOptions () # \u4f7f\u7528\u9879\u76ee\u7684\u8f6c\u6362\u4e0a\u4e0b\u6587 provider_options . transformContext = QgsProject . instance () . transformContext () vlayer . setDataSource ( uri , \"layer name you like\" , \"WFS\" , provider_options ) del ( vlayer ) 3.2 \u6805\u683c\u56fe\u5c42 \u2693\ufe0e \u8bbf\u95ee\u6805\u683c\u6587\u4ef6\uff0c\u7528\u5230\u4e86GDAL\u5e93\u3002\u5b83\u652f\u6301\u591a\u79cd\u6587\u4ef6\u683c\u5f0f\u3002\u5982\u679c\u4f60\u5728\u6253\u5f00\u67d0\u4e9b\u6587\u4ef6\u65f6\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u68c0\u67e5\u4f60\u7684GDAL\u662f\u5426\u652f\u6301\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5e76\u975e\u6240\u6709\u683c\u5f0f\u90fd\u53ef\u7528\uff09\u3002\u4ece\u6587\u4ef6\u52a0\u8f7d\u6805\u683c\uff0c\u9700\u8981\u6307\u5b9a\u5176\u6587\u4ef6\u540d\u548c\u663e\u793a\u540d\u79f0\uff1a 1 2 3 4 5 # \u83b7\u53d6tif\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u4f8b\u5982\uff1a/home/project/data/srtm.tif path_to_tif = \"qgis-projects/python_cookbook/data/srtm.tif\" rlayer = QgsRasterLayer ( path_to_tif , \"SRTM layer name\" ) if not rlayer . isValid (): print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) \u4ece geopackage \u4e2d\u52a0\u8f7d\u6805\u683c\uff1a 1 2 3 4 5 6 7 # \u83b7\u53d6geopackage\u7684\u8def\u5f84\uff0c\u4f8b\u5982\uff1a/home/project/data/data.gpkg path_to_gpkg = os . path . join ( os . getcwd (), \"testdata\" , \"sublayers.gpkg\" ) # gpkg_raster_layer = \"GPKG:/home/project/data/data.gpkg:srtm\" gpkg_raster_layer = \"GPKG:\" + path_to_gpkg + \":srtm\" rlayer = QgsRasterLayer ( gpkg_raster_layer , \"layer name you like\" , \"gdal\" ) if not rlayer . isValid (): print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) \u4e0e\u77e2\u91cf\u56fe\u5c42\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u4f7f\u7528 QgisInterface \u5bf9\u8c61\u7684 addRasterLayer \u51fd\u6570\u52a0\u8f7d\u6805\u683c\u56fe\u5c42\uff1a 1 iface . addRasterLayer ( \"/path/to/raster/file.tif\" , \"layer name you like\" ) \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u56fe\u5c42\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u5f53\u524d\u9879\u76ee\u4e2d\uff08\u4f7f\u5176\u663e\u793a\u5728\u56fe\u5c42\u5217\u8868\u4e2d\uff09\u3002 3.2.1 \u52a0\u8f7dPostGIS\u6805\u683c\u56fe\u5c42 \u2693\ufe0e PostGIS\u6805\u683c\u56fe\u5c42\uff0c\u7c7b\u4f3c\u4e8ePostGIS\u77e2\u91cf\u56fe\u5c42\uff0c\u53ef\u4ee5\u4f7f\u7528URI\u5b57\u7b26\u4e32\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\u3002\u4e3a\u6570\u636e\u5e93\u8fde\u63a5\u53c2\u6570\u4fdd\u7559\u53ef\u590d\u7528\u5b57\u5178\u662f\u6709\u6548\u7684\u3002\u8fd9\u6837\u53ef\u4ee5\u8f7b\u677e\u7f16\u8f91\u9002\u7528\u8fde\u63a5\u7684\u5b57\u5178\u3002\u4f7f\u7528 postgresraster \u63d0\u4f9b\u8005\u7684\u5143\u6570\u636e\u5bf9\u8c61\u5c06\u5b57\u5178\u7f16\u7801\u4e3aURI\u3002\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u6805\u683c\u56fe\u5c42\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 uri_config = { # \u6570\u636e\u5e93\u53c2\u6570 'dbname' : 'gis_db' , # \u6570\u636e\u5e93\u540d\u79f0 'host' : 'localhost' , # IP\u5730\u5740\u6216\u8005localhost 'port' : '5432' , # \u7aef\u53e3 'sslmode' : QgsDataSourceUri . SslDisable , # SslAllow, SslPrefer, SslRequire, SslVerifyCa, SslVerifyFull # \u5982\u679c\u5b58\u50a8\u5728authcfg\u6216\u670d\u52a1\u4e2d\uff0c\u5219\u4e0d\u9700\u8981\u7528\u6237\u540d\u548c\u5bc6\u7801 'authcfg' : 'QconfigId' , # QGIS\u8ba4\u8bc1\u6570\u636e\u5e93ID\u5305\u542b\u8fde\u63a5\u4fe1\u606f 'service' : None , # \u8fde\u63a5\u6570\u636e\u5e93\u7684\u670d\u52a1 'username' : None , # \u7528\u6237\u540d 'password' : None , # \u5bc6\u7801 # \u6570\u636e\u5e93\u8868\u548c\u6805\u683c\u5b57\u6bb5\u4fe1\u606f 'schema' : 'public' , # \u6570\u636e\u5e93\u67b6\u6784 'table' : 'my_rasters' , # \u6570\u636e\u5e93\u8868\u540d\u79f0 'geometrycolumn' : 'rast' , # \u6805\u683c\u5b57\u6bb5\u540d\u79f0 'sql' : None , # WHERE\u67e5\u8be2\u8bed\u53e5\uff0c\u5e94\u8be5\u653e\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\u3002 'key' : None , # \u6570\u636e\u5e93\u8868\u4e3b\u952e 'srid' : None , # \u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u5750\u6807\u53c2\u8003\u7cfb 'estimatedmetadata' : 'False' , # A boolean value telling if the metadata is estimated. 'type' : None , # WKT\u5b57\u7b26\u4e32\uff0c\u6307\u5b9aWKB\u7c7b\u578b 'selectatid' : None , # \u8bbe\u7f6e\u4e3aTrue\u53ef\u7981\u7528\u6309\u8981\u7d20ID\u8fdb\u884c\u7684\u9009\u62e9\u3002 'options' : None , # \u4e0d\u5728\u6b64\u5217\u8868\u4e2d\u7684\u5176\u4ed6PostgreSQL\u8fde\u63a5\u9009\u9879\u3002 'enableTime' : None , 'temporalDefaultTime' : None , 'temporalFieldIndex' : None , 'mode' : '2' , # GDAL\u53c2\u6570, 2 unions raster tiles, 1 adds tiles separately (may require user input) } # \u5220\u9664\u7a7a\u53c2\u6570 uri_config = { key : val for key , val in uri_config . items () if val is not None } # \u83b7\u53d6\u6570\u636e\u63d0\u4f9b\u8005\u548c\u914d\u7f6e\u7684\u5143\u6570\u636e md = QgsProviderRegistry . instance () . providerMetadata ( 'postgresraster' ) uri = QgsDataSourceUri ( md . encodeUri ( uri_config )) # \u52a0\u8f7d\u6805\u683c\u56fe\u5c42\u5230\u9879\u76ee rlayer = iface . addRasterLayer ( uri . uri ( False ), \"raster layer name\" , \"postgresraster\" ) 3.2.2 \u52a0\u8f7dWCS\u670d\u52a1\u6805\u683c\u56fe\u5c42\uff1a \u2693\ufe0e 1 2 3 layer_name = 'nurc:mosaic' uri = \"https://demo.geo-solutions.it/geoserver/ows?identifier= {} \" . format ( layer_name ) rlayer = QgsRasterLayer ( uri , 'my wcs layer' , 'wcs' ) \u4ee5\u4e0b\u662fWCS URI\u53ef\u4ee5\u5305\u542b\u7684\u53c2\u6570\u8bf4\u660e\uff1a WCS URI\u7531**\u952e=\u503c**\u5bf9\u7ec4\u6210\uff0c\u5206\u9694\u7b26\uff1a & \u3002\u5b83\u4e0eURL\u4e2d\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u683c\u5f0f\u76f8\u540c\uff0c\u7f16\u7801\u65b9\u5f0f\u76f8\u540c\u3002 QgsDataSourceUri \u53ef\u4ee5\u7528\u4e8e\u6784\u9020URI\u4ee5\u786e\u4fdd\u6b63\u786e\u7f16\u7801\u7279\u6b8a\u5b57\u7b26\u3002 url \uff08\u5fc5\u586b\uff09\uff1aWCS\u670d\u52a1\u5668URL\u3002\u4e0d\u8981\u5728URL\u4e2d\u4f7f\u7528VERSION\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7248\u672c\u7684WCS\u5bf9**GetCapabilities** \u7248\u672c\u4f7f\u7528\u4e0d\u540c\u7684\u53c2\u6570\u540d\u79f0\uff0c\u8bf7\u53c2\u9605param\u7248\u672c\u3002 identifier \uff08\u5fc5\u586b\uff09\uff1a\u8986\u76d6\u8303\u56f4\u540d\u79f0 time \uff08\u53ef\u9009\uff09\uff1a\u65f6\u95f4\u4f4d\u7f6e\u6216\u65f6\u95f4\u6bb5\uff08beginPosition / endPosition / timeResolution\uff09 format \uff08\u53ef\u9009\uff09\uff1a\u652f\u6301\u7684\u683c\u5f0f\u540d\u79f0\u3002\u9ed8\u8ba4\u662f\u7b2c\u4e00\u4e2a\u652f\u6301\u7684\u683c\u5f0f\uff0c\u5176\u540d\u79f0\u4e3atif\u6216\u7b2c\u4e00\u4e2a\u652f\u6301\u7684\u683c\u5f0f\u3002 crs \uff08\u53ef\u9009\uff09\uff1aCRS\u683c\u5f0f\u4e3aAUTHORITY:ID\uff0c\u4f8b\u5982\uff0cEPSG:4326\u3002\u9ed8\u8ba4\u4e3aEPSG:4326\uff08\u5982\u679c\u652f\u6301\uff09\u6216\u7b2c\u4e00\u4e2a\u652f\u6301\u7684CRS\u3002 username \uff08\u53ef\u9009\uff09\uff1a\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u540d\u3002 password \uff08\u53ef\u9009\uff09\uff1a\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\u7684\u5bc6\u7801\u3002 IgnoreGetMapUrl \uff08\u53ef\u9009\uff0chack\uff09\uff1a\u5982\u679c\u6307\u5b9a\uff08\u8bbe\u7f6e\u4e3a1\uff09\uff0c\u5219\u5ffd\u7565GetCapabilities\u516c\u5e03\u7684GetCoverage URL\u3002\u5982\u679c\u672a\u6b63\u786e\u914d\u7f6e\u670d\u52a1\u5668\uff0c\u5219\u53ef\u80fd\u9700\u8981\u3002 InvertAxisOrientation \uff08\u53ef\u9009\uff0chack\uff09\uff1a\u5982\u679c\u6307\u5b9a\uff08\u8bbe\u7f6e\u4e3a1\uff09\uff0c\u5219\u5728GetCoverage\u8bf7\u6c42\u4e2d\u5207\u6362\u8f74\u3002\u5982\u679c\u670d\u52a1\u5668\u4f7f\u7528\u9519\u8bef\u7684\u8f74\u987a\u5e8f\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5730\u7406CRS\u3002 IgnoreAxisOrientation \uff08\u53ef\u9009\uff0chack\uff09\uff1a\u5982\u679c\u6307\u5b9a\uff08\u8bbe\u7f6e\u4e3a1\uff09\uff0c\u5219\u4e0d\u8981\u6839\u636e\u5730\u7406CRS\u7684WCS\u6807\u51c6\u53cd\u8f6c\u8f74\u65b9\u5411\u3002 cache \uff08\u53ef\u9009\uff09\uff1a\u7f13\u5b58\u52a0\u8f7d\u63a7\u5236\uff0c\u5982QNetworkRequest :: CacheLoadControl\u4e2d\u6240\u8ff0\uff0c\u4f46\u5982\u679c\u4f7f\u7528AlwaysCache\u5931\u8d25\uff0c\u8bf7\u6c42\u5c06\u91cd\u65b0\u53d1\u9001\u4e3aPreferCache\u3002\u5141\u8bb8\u7684\u503c\uff1aAlwaysCache\uff0cPreferCache\uff0cPreferNetwork\uff0cAlwaysNetwork\u3002\u9ed8\u8ba4\u4e3aAlwaysCache\u3002 \u53e6\u5916\uff0c\u4f60\u53ef\u4ee5\u4eceWMS\u670d\u52a1\u5668\u52a0\u8f7d\u6805\u683c\u56fe\u5c42\u3002\u4f46\u662f\u76ee\u524d\u65e0\u6cd5\u4eceAPI\u8bbf\u95eeGetCapabilities\u54cd\u5e94\u2014\u2014\u4f60\u5fc5\u987b\u77e5\u9053\u6240\u9700\u7684\u56fe\u5c42\uff1a 1 2 3 4 urlWithParams = 'url=http://irs.gis-lab.info/?layers=landsat&styles=&format=image/jpeg&crs=EPSG:4326' rlayer = QgsRasterLayer ( urlWithParams , 'some layer name' , 'wms' ) if not rlayer . isValid (): print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) 3.3 QgsProject \u5b9e\u4f8b \u2693\ufe0e \u5982\u679c\u4f60\u60f3\u4f7f\u7528\u6253\u5f00\u7684\u56fe\u5c42\u8fdb\u884c\u6e32\u67d3\uff0c\u8bf7\u4e0d\u8981\u5fd8\u8bb0\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230 QgsProject \u5b9e\u4f8b\u4e2d\u3002 QgsProject \u5b9e\u4f8b\u62e5\u6709\u56fe\u5c42\u7684\u6240\u6709\u6743\uff0c\u53ef\u4ee5\u901a\u8fc7\u5176\u552f\u4e00ID\u4ece\u5e94\u7528\u7a0b\u5e8f\u7684\u4efb\u4f55\u90e8\u5206\u8bbf\u95ee\u5b83\u4eec\u3002\u4ece\u9879\u76ee\u4e2d\u5220\u9664\u56fe\u5c42\u65f6\uff0c\u5b83\u4e5f\u4f1a\u88ab\u5220\u9664\u3002\u7528\u6237\u53ef\u4ee5\u5728QGIS\u63a5\u53e3\u4e2d\u5220\u9664\u56fe\u5c42\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7Python\u4f7f\u7528 removeMapLayer() \u65b9\u6cd5\u5220\u9664\u56fe\u5c42\u3002 \u4f7f\u7528 addMapLayer() \u65b9\u6cd5\u5c06\u56fe\u5c42\u6dfb\u52a0\u5230\u5f53\u524d\u9879\u76ee\uff1a 1 QgsProject . instance () . addMapLayer ( rlayer ) \u5728\u7edd\u5bf9\u4f4d\u7f6e\u6dfb\u52a0\u56fe\u5c42\uff1a 1 2 3 4 5 6 # \u9996\u5148\u6dfb\u52a0\u56fe\u5c42\u4f46\u4e0d\u663e\u793a QgsProject . instance () . addMapLayer ( rlayer , False ) # \u5728\u9879\u76ee\u4e2d\u83b7\u53d6\u56fe\u5c42\u6811\u7684\u6839\u56fe\u5c42\u7ec4 layerTree = iface . layerTreeCanvasBridge () . rootGroup () # \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u4ece0\u5f00\u59cb\u7684\u6570\u5b57\uff0c-1\u8868\u793a\u7ed3\u675f layerTree . insertChildNode ( - 1 , QgsLayerTreeLayer ( rlayer )) \u5982\u679c\u8981\u5220\u9664\u56fe\u5c42\uff0c\u4f7f\u7528 removeMapLayer() \u65b9\u6cd5\uff1a 1 QgsProject . instance () . removeMapLayer ( rlayer . id ()) \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u4f20\u9012\u4e86\u56fe\u5c42ID\uff08\u4f60\u53ef\u4ee5\u8c03\u7528\u56fe\u5c42\u7684 id() \u65b9\u6cd5\uff09\uff0c\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u56fe\u5c42\u5bf9\u8c61\u672c\u8eab\u3002 \u83b7\u53d6\u5df2\u52a0\u8f7d\u56fe\u5c42\u548c\u56fe\u5c42ID\u7684\u5217\u8868\uff0c\u4f7f\u7528 mapLayers() \u65b9\u6cd5\uff1a 1 QgsProject . instance () . mapLayers ()","title":"3-\u52a0\u8f7d\u56fe\u5c42"},{"location":"3-%E5%8A%A0%E8%BD%BD%E5%9B%BE%E5%B1%82/#3","text":"\u6b64\u9875\u9762\u4e0a\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 import os # pyqgis\u63a7\u5236\u53f0\u540c\u6837\u9700\u8981 from qgis.core import ( QgsVectorLayer ) \u8ba9\u6211\u4eec\u4f7f\u7528\u6570\u636e\u6253\u5f00\u4e00\u4e9b\u56fe\u5c42\u3002QGIS\u53ef\u8bc6\u522b\u77e2\u91cf\u548c\u6805\u683c\u56fe\u5c42\u3002\u6b64\u5916\uff0c\u81ea\u5b9a\u4e49\u56fe\u5c42\u7c7b\u578b\u4e5f\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u6211\u4eec\u4e0d\u6253\u7b97\u5728\u6b64\u8ba8\u8bba\u3002","title":"3 \u52a0\u8f7d\u56fe\u5c42"},{"location":"3-%E5%8A%A0%E8%BD%BD%E5%9B%BE%E5%B1%82/#31","text":"\u521b\u5efa\u4e00\u4e2a\u77e2\u91cf\u56fe\u5c42\u5b9e\u4f8b\uff0c\u6307\u5b9a\u56fe\u5c42\u7684\u6570\u636e\u6e90\u6807\u8bc6\u3001\u56fe\u5c42\u540d\u79f0\u548c\u63d0\u4f9b\u8005\u540d\u79f0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 # \u83b7\u53d6shapefile\u7684\u8def\u5f84\uff0c\u4f8b\u5982\uff1a/home/project/data/ports.shp path_to_airports_layer = \"testdata/airports.shp\" # \u683c\u5f0f\u4e3a\uff1a # vlayer = QgsVectorLayer(data_source, layer_name, provider_name) vlayer = QgsVectorLayer ( path_to_ports_layer , \"Airports layer\" , \"ogr\" ) if not vlayer . isValid (): print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) else : QgsProject . instance () . addMapLayer ( vlayer ) \u6570\u636e\u6e90\u6807\u8bc6\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u7279\u5b9a\u4e8e\u6bcf\u4e2a\u77e2\u91cf\u6570\u636e\u63d0\u4f9b\u8005\u3002\u56fe\u5c42\u540d\u79f0\u7528\u4e8e\u56fe\u5c42\u5217\u8868\u90e8\u4ef6\u3002\u68c0\u67e5\u56fe\u5c42\u662f\u5426\u5df2\u6210\u529f\u52a0\u8f7d\u975e\u5e38\u91cd\u8981\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8fd4\u56de\u65e0\u6548\u7684\u56fe\u5c42\u5b9e\u4f8b\u3002 geopackage \u77e2\u91cf\u56fe\u5c42\uff1a 1 2 3 4 5 6 7 8 9 10 # \u83b7\u53d6geopackage\u7684\u8def\u5f84\uff0c\u4f8b\u5982\uff1a/home/project/data/data.gpkg path_to_gpkg = os . path . join ( QgsProject . instance () . homePath (), \"data\" , \"data.gpkg\" ) # \u8ffd\u52a0\u56fe\u5c42\u540d\u79f0 gpkg_places_layer = path_to_gpkg + \"|layername=places\" # \u4f8b\u5982\uff1agpkg_places_layer = \"/home/project/data/data.gpkg|layername=places\" vlayer = QgsVectorLayer ( gpkg_places_layer , \"Places layer\" , \"ogr\" ) if not vlayer . isValid (): print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) else : QgsProject . instance () . addMapLayer ( vlayer ) \u5728QGIS\u4e2d\u6253\u5f00\u5e76\u663e\u793a\u77e2\u91cf\u56fe\u5c42\u7684\u6700\u5feb\u65b9\u5f0f\u662f\u4f7f\u7528 QgisInterface \u7c7b\u7684 addVectorLayer() \u65b9\u6cd5\uff1a 1 2 3 vlayer = iface . addVectorLayer ( path_to_ports_layer , \"Ports layer\" , \"ogr\" ) if not vlayer : print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u56fe\u5c42\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u5f53\u524dQGIS\u9879\u76ee\u4e2d\uff08\u4f7f\u5176\u663e\u793a\u5728\u56fe\u5c42\u5217\u8868\u4e2d\uff09\u3002\u8be5\u51fd\u6570\u8fd4\u56de\u56fe\u5c42\u5b9e\u4f8b\uff0c\u5982\u679c\u65e0\u6cd5\u52a0\u8f7d\u56fe\u5c42\u5219\u8fd4\u56de None \u3002 \u4ee5\u4e0b\u5217\u8868\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u77e2\u91cf\u6570\u636e\u63d0\u4f9b\u8005\u8bbf\u95ee\u5404\u79cd\u6570\u636e\u6e90\uff1a OGR\u5e93\uff08Shapefile\u548c\u8bb8\u591a\u5176\u4ed6\u6587\u4ef6\u683c\u5f0f\uff09\u2014\u2014\u6570\u636e\u6e90\u662f\u6587\u4ef6\u7684\u8def\u5f84\uff1a Shapefile\uff1a 1 2 vlayer = QgsVectorLayer ( \"/path/to/shapefile/file.shp\" , \"layer_name_you_like\" , \"ogr\" ) QgsProject . instance () . addMapLayer ( vlayer ) dxf\uff08\u6ce8\u610f\u6570\u636e\u6e90uri\u4e2d\u7684\u5185\u90e8\u9009\u9879\uff09\uff1a 1 2 3 uri = \"/path/to/dxffile/file.dxf|layername=entities|geometrytype=Point\" vlayer = QgsVectorLayer ( uri , \"layer_name_you_like\" , \"ogr\" ) QgsProject . instance () . addMapLayer ( vlayer ) PostGIS\u6570\u636e\u5e93\u2014\u2014\u6570\u636e\u6e90\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u4e0ePostgreSQL\u6570\u636e\u5e93\u521b\u5efa\u8fde\u63a5\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\u3002 QgsDataSourceUri \u7c7b\u53ef\u4ee5\u4e3a\u4f60\u751f\u6210\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002\u8bf7\u6ce8\u610f\uff0c\u5fc5\u987b\u5728\u7f16\u8bd1QGIS\u65f6\u652f\u6301Postgres\uff0c\u5426\u5219\u6b64\u63d0\u4f9b\u8005\u4e0d\u53ef\u7528\uff1a 1 2 3 4 5 6 uri = QgsDataSourceUri () # \u8bbe\u7f6e\u4e3b\u673a\uff0c\u7aef\u53e3\uff0c\u6570\u636e\u5e93\u540d\u79f0\uff0c\u7528\u6237\u540d\u548c\u5bc6\u7801 uri . setConnection ( \"localhost\" , \"5432\" , \"dbname\" , \"johny\" , \"xxx\" ) # \u8bbe\u7f6e\u6570\u636e\u5e93\u67b6\u6784\uff0c\u8868\u540d\uff0c\u51e0\u4f55\u5217\u548c\u53ef\u9009\u9879\uff08WHERE \u8bed\u53e5\uff09 uri . setDataSource ( \"public\" , \"roads\" , \"the_geom\" , \"cityid = 2643\" , \"primary_key_field\" ) vlayer = QgsVectorLayer ( uri . uri ( False ), \"layer name you like\" , \"postgres\" ) \u63d0\u793a uri.uri(False) \u4e2d\u7684 False \u53c2\u6570\u53ef\u4ee5\u9632\u6b62\u6269\u5c55\u8ba4\u8bc1\u914d\u7f6e\u53c2\u6570\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u8eab\u4efd\u9a8c\u8bc1\u914d\u7f6e\uff0c\u5219\u6b64\u53c2\u6570\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u5dee\u5f02\u3002 CSV\u6216\u5176\u4ed6\u5206\u9694\u7684\u6587\u672c\u6587\u4ef6\u2014\u2014\u6253\u5f00\u4e00\u4e2a\u7528\u5206\u53f7\u4f5c\u4e3a\u5206\u9694\u7b26\u7684\u6587\u4ef6\uff0cX\u5750\u6807\u4f7f\u7528\u5b57\u6bb5\u201cx\u201d\uff0cY\u5750\u6807\u4f7f\u7528\u5b57\u6bb5\u201cy\u201d\uff1a 1 2 3 uri = \"file:// {} /testdata/delimited_xy.csv?delimiter= {} &xField= {} &yField= {} \" . format ( os . getcwd (), \";\" , \"x\" , \"y\" ) vlayer = QgsVectorLayer ( uri , \"layer name you like\" , \"delimitedtext\" ) QgsProject . instance () . addMapLayer ( vlayer ) \u63d0\u793a \u63d0\u4f9b\u8005\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3a\u4e00\u4e2aURL\uff0c\u56e0\u6b64\u8def\u5f84\u5fc5\u987b\u4ee5file://\u4e3a\u524d\u7f00\u3002\u5b83\u8fd8\u5141\u8bb8WKT\uff08(well known text\uff09\u683c\u5f0f\u7684\u51e0\u4f55\u4f5c\u4e3a x \u548c y \u7684\u66ff\u4ee3\u5b57\u6bb5\uff0c\u5e76\u5141\u8bb8\u6307\u5b9a\u5750\u6807\u53c2\u8003\u7cfb\u7edf\u3002\u4f8b\u5982\uff1a 1 uri = \"file:///some/path/file.csv?delimiter= {} &crs=epsg:4723&wktField= {} \" . format ( \";\" , \"shape\" ) GPX\u6587\u4ef6\u2014\u2014\u201cgpx\u201d\u6570\u636e\u63d0\u4f9b\u8005\u4ecegpx\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8f68\u8ff9\uff0c\u8def\u7ebf\u548c\u8def\u70b9\u3002\u8981\u6253\u5f00\u6587\u4ef6\uff0c\u9700\u8981\u5728url\u4e2d\u6307\u5b9a\u7c7b\u578b\uff08track / route / waypoint\uff09\uff1a 1 2 3 uri = \"path/to/gpx/file.gpx?type=track\" vlayer = QgsVectorLayer ( uri , \"layer name you like\" , \"gpx\" ) QgsProject . instance () . addMapLayer ( vlayer ) SpatiaLite\u6570\u636e\u5e93\u2014\u2014\u4e0ePostGIS\u6570\u636e\u5e93\u7c7b\u4f3c\uff0c QgsDataSourceUri \u53ef\u7528\u4e8e\u751f\u6210\u6570\u636e\u6e90\u6807\u8bc6\uff1a 1 2 3 4 5 6 7 8 9 uri = QgsDataSourceUri () uri . setDatabase ( '/home/martin/test-2.3.sqlite' ) schema = '' table = 'Towns' geom_column = 'Geometry' uri . setDataSource ( schema , table , geom_column ) display_name = 'Towns' vlayer = QgsVectorLayer ( uri . uri (), display_name , 'spatialite' ) QgsProject . instance () . addMapLayer ( vlayer ) \u57fa\u4e8eMySQL WKB\u7684\u51e0\u4f55\uff0c\u901a\u8fc7OGR\u2014\u2014\u6570\u636e\u6e90\u662f\u8fde\u63a5\u8868\u7684\u5b57\u7b26\u4e32\uff1a 1 2 3 uri = \"MySQL:dbname,host=localhost,port=3306,user=root,password=xxx|layername=my_table\" vlayer = QgsVectorLayer ( uri , \"my table\" , \"ogr\" ) QgsProject . instance () . addMapLayer ( vlayer ) WFS\u8fde\u63a5\uff1a\u8fde\u63a5\u4f7f\u7528URI\u5b9a\u4e49\u5e76\u4f7f\u7528 WFS \u63d0\u4f9b\u8005\uff1a 1 2 uri = \"https://demo.geo-solutions.it/geoserver/ows?service=WFS&version=1.1.0&request=GetFeature&typename=geosolutions:regioni\" vlayer = QgsVectorLayer ( uri , \"my wfs layer\" , \"WFS\" ) \u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u5e93 urllib \u521b\u5efauri\uff1a 1 2 3 4 5 6 7 8 9 10 import urllib params = { 'service' : 'WFS' , 'version' : '1.1.0' , 'request' : 'GetFeature' , 'typename' : 'geosolutions:regioni' , 'srsname' : \"EPSG:4326\" } uri2 = 'https://demo.geo-solutions.it/geoserver/ows?' + urllib . parse . unquote ( urllib . parse . urlencode ( params )) \u63d0\u793a \u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 QgsVectorLayer \u7684 setDataSource() \u65b9\u6cd5\u66f4\u6539\u73b0\u6709\u56fe\u5c42\u7684\u6570\u636e\u6e90\uff0c\u5982\u4e0b\u9762\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 uri = \"https://demo.geo-solutions.it/geoserver/ows?service=WFS&version=1.1.0&request=GetFeature&typename=geosolutions:regioni\" provider_options = QgsDataProvider . ProviderOptions () # \u4f7f\u7528\u9879\u76ee\u7684\u8f6c\u6362\u4e0a\u4e0b\u6587 provider_options . transformContext = QgsProject . instance () . transformContext () vlayer . setDataSource ( uri , \"layer name you like\" , \"WFS\" , provider_options ) del ( vlayer )","title":"3.1 \u77e2\u91cf\u56fe\u5c42"},{"location":"3-%E5%8A%A0%E8%BD%BD%E5%9B%BE%E5%B1%82/#32","text":"\u8bbf\u95ee\u6805\u683c\u6587\u4ef6\uff0c\u7528\u5230\u4e86GDAL\u5e93\u3002\u5b83\u652f\u6301\u591a\u79cd\u6587\u4ef6\u683c\u5f0f\u3002\u5982\u679c\u4f60\u5728\u6253\u5f00\u67d0\u4e9b\u6587\u4ef6\u65f6\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u68c0\u67e5\u4f60\u7684GDAL\u662f\u5426\u652f\u6301\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5e76\u975e\u6240\u6709\u683c\u5f0f\u90fd\u53ef\u7528\uff09\u3002\u4ece\u6587\u4ef6\u52a0\u8f7d\u6805\u683c\uff0c\u9700\u8981\u6307\u5b9a\u5176\u6587\u4ef6\u540d\u548c\u663e\u793a\u540d\u79f0\uff1a 1 2 3 4 5 # \u83b7\u53d6tif\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u4f8b\u5982\uff1a/home/project/data/srtm.tif path_to_tif = \"qgis-projects/python_cookbook/data/srtm.tif\" rlayer = QgsRasterLayer ( path_to_tif , \"SRTM layer name\" ) if not rlayer . isValid (): print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) \u4ece geopackage \u4e2d\u52a0\u8f7d\u6805\u683c\uff1a 1 2 3 4 5 6 7 # \u83b7\u53d6geopackage\u7684\u8def\u5f84\uff0c\u4f8b\u5982\uff1a/home/project/data/data.gpkg path_to_gpkg = os . path . join ( os . getcwd (), \"testdata\" , \"sublayers.gpkg\" ) # gpkg_raster_layer = \"GPKG:/home/project/data/data.gpkg:srtm\" gpkg_raster_layer = \"GPKG:\" + path_to_gpkg + \":srtm\" rlayer = QgsRasterLayer ( gpkg_raster_layer , \"layer name you like\" , \"gdal\" ) if not rlayer . isValid (): print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) \u4e0e\u77e2\u91cf\u56fe\u5c42\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u4f7f\u7528 QgisInterface \u5bf9\u8c61\u7684 addRasterLayer \u51fd\u6570\u52a0\u8f7d\u6805\u683c\u56fe\u5c42\uff1a 1 iface . addRasterLayer ( \"/path/to/raster/file.tif\" , \"layer name you like\" ) \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u56fe\u5c42\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u5f53\u524d\u9879\u76ee\u4e2d\uff08\u4f7f\u5176\u663e\u793a\u5728\u56fe\u5c42\u5217\u8868\u4e2d\uff09\u3002","title":"3.2 \u6805\u683c\u56fe\u5c42"},{"location":"3-%E5%8A%A0%E8%BD%BD%E5%9B%BE%E5%B1%82/#321-postgis","text":"PostGIS\u6805\u683c\u56fe\u5c42\uff0c\u7c7b\u4f3c\u4e8ePostGIS\u77e2\u91cf\u56fe\u5c42\uff0c\u53ef\u4ee5\u4f7f\u7528URI\u5b57\u7b26\u4e32\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\u3002\u4e3a\u6570\u636e\u5e93\u8fde\u63a5\u53c2\u6570\u4fdd\u7559\u53ef\u590d\u7528\u5b57\u5178\u662f\u6709\u6548\u7684\u3002\u8fd9\u6837\u53ef\u4ee5\u8f7b\u677e\u7f16\u8f91\u9002\u7528\u8fde\u63a5\u7684\u5b57\u5178\u3002\u4f7f\u7528 postgresraster \u63d0\u4f9b\u8005\u7684\u5143\u6570\u636e\u5bf9\u8c61\u5c06\u5b57\u5178\u7f16\u7801\u4e3aURI\u3002\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u6805\u683c\u56fe\u5c42\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 uri_config = { # \u6570\u636e\u5e93\u53c2\u6570 'dbname' : 'gis_db' , # \u6570\u636e\u5e93\u540d\u79f0 'host' : 'localhost' , # IP\u5730\u5740\u6216\u8005localhost 'port' : '5432' , # \u7aef\u53e3 'sslmode' : QgsDataSourceUri . SslDisable , # SslAllow, SslPrefer, SslRequire, SslVerifyCa, SslVerifyFull # \u5982\u679c\u5b58\u50a8\u5728authcfg\u6216\u670d\u52a1\u4e2d\uff0c\u5219\u4e0d\u9700\u8981\u7528\u6237\u540d\u548c\u5bc6\u7801 'authcfg' : 'QconfigId' , # QGIS\u8ba4\u8bc1\u6570\u636e\u5e93ID\u5305\u542b\u8fde\u63a5\u4fe1\u606f 'service' : None , # \u8fde\u63a5\u6570\u636e\u5e93\u7684\u670d\u52a1 'username' : None , # \u7528\u6237\u540d 'password' : None , # \u5bc6\u7801 # \u6570\u636e\u5e93\u8868\u548c\u6805\u683c\u5b57\u6bb5\u4fe1\u606f 'schema' : 'public' , # \u6570\u636e\u5e93\u67b6\u6784 'table' : 'my_rasters' , # \u6570\u636e\u5e93\u8868\u540d\u79f0 'geometrycolumn' : 'rast' , # \u6805\u683c\u5b57\u6bb5\u540d\u79f0 'sql' : None , # WHERE\u67e5\u8be2\u8bed\u53e5\uff0c\u5e94\u8be5\u653e\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\u3002 'key' : None , # \u6570\u636e\u5e93\u8868\u4e3b\u952e 'srid' : None , # \u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u5750\u6807\u53c2\u8003\u7cfb 'estimatedmetadata' : 'False' , # A boolean value telling if the metadata is estimated. 'type' : None , # WKT\u5b57\u7b26\u4e32\uff0c\u6307\u5b9aWKB\u7c7b\u578b 'selectatid' : None , # \u8bbe\u7f6e\u4e3aTrue\u53ef\u7981\u7528\u6309\u8981\u7d20ID\u8fdb\u884c\u7684\u9009\u62e9\u3002 'options' : None , # \u4e0d\u5728\u6b64\u5217\u8868\u4e2d\u7684\u5176\u4ed6PostgreSQL\u8fde\u63a5\u9009\u9879\u3002 'enableTime' : None , 'temporalDefaultTime' : None , 'temporalFieldIndex' : None , 'mode' : '2' , # GDAL\u53c2\u6570, 2 unions raster tiles, 1 adds tiles separately (may require user input) } # \u5220\u9664\u7a7a\u53c2\u6570 uri_config = { key : val for key , val in uri_config . items () if val is not None } # \u83b7\u53d6\u6570\u636e\u63d0\u4f9b\u8005\u548c\u914d\u7f6e\u7684\u5143\u6570\u636e md = QgsProviderRegistry . instance () . providerMetadata ( 'postgresraster' ) uri = QgsDataSourceUri ( md . encodeUri ( uri_config )) # \u52a0\u8f7d\u6805\u683c\u56fe\u5c42\u5230\u9879\u76ee rlayer = iface . addRasterLayer ( uri . uri ( False ), \"raster layer name\" , \"postgresraster\" )","title":"3.2.1 \u52a0\u8f7dPostGIS\u6805\u683c\u56fe\u5c42"},{"location":"3-%E5%8A%A0%E8%BD%BD%E5%9B%BE%E5%B1%82/#322-wcs","text":"1 2 3 layer_name = 'nurc:mosaic' uri = \"https://demo.geo-solutions.it/geoserver/ows?identifier= {} \" . format ( layer_name ) rlayer = QgsRasterLayer ( uri , 'my wcs layer' , 'wcs' ) \u4ee5\u4e0b\u662fWCS URI\u53ef\u4ee5\u5305\u542b\u7684\u53c2\u6570\u8bf4\u660e\uff1a WCS URI\u7531**\u952e=\u503c**\u5bf9\u7ec4\u6210\uff0c\u5206\u9694\u7b26\uff1a & \u3002\u5b83\u4e0eURL\u4e2d\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u683c\u5f0f\u76f8\u540c\uff0c\u7f16\u7801\u65b9\u5f0f\u76f8\u540c\u3002 QgsDataSourceUri \u53ef\u4ee5\u7528\u4e8e\u6784\u9020URI\u4ee5\u786e\u4fdd\u6b63\u786e\u7f16\u7801\u7279\u6b8a\u5b57\u7b26\u3002 url \uff08\u5fc5\u586b\uff09\uff1aWCS\u670d\u52a1\u5668URL\u3002\u4e0d\u8981\u5728URL\u4e2d\u4f7f\u7528VERSION\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7248\u672c\u7684WCS\u5bf9**GetCapabilities** \u7248\u672c\u4f7f\u7528\u4e0d\u540c\u7684\u53c2\u6570\u540d\u79f0\uff0c\u8bf7\u53c2\u9605param\u7248\u672c\u3002 identifier \uff08\u5fc5\u586b\uff09\uff1a\u8986\u76d6\u8303\u56f4\u540d\u79f0 time \uff08\u53ef\u9009\uff09\uff1a\u65f6\u95f4\u4f4d\u7f6e\u6216\u65f6\u95f4\u6bb5\uff08beginPosition / endPosition / timeResolution\uff09 format \uff08\u53ef\u9009\uff09\uff1a\u652f\u6301\u7684\u683c\u5f0f\u540d\u79f0\u3002\u9ed8\u8ba4\u662f\u7b2c\u4e00\u4e2a\u652f\u6301\u7684\u683c\u5f0f\uff0c\u5176\u540d\u79f0\u4e3atif\u6216\u7b2c\u4e00\u4e2a\u652f\u6301\u7684\u683c\u5f0f\u3002 crs \uff08\u53ef\u9009\uff09\uff1aCRS\u683c\u5f0f\u4e3aAUTHORITY:ID\uff0c\u4f8b\u5982\uff0cEPSG:4326\u3002\u9ed8\u8ba4\u4e3aEPSG:4326\uff08\u5982\u679c\u652f\u6301\uff09\u6216\u7b2c\u4e00\u4e2a\u652f\u6301\u7684CRS\u3002 username \uff08\u53ef\u9009\uff09\uff1a\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u540d\u3002 password \uff08\u53ef\u9009\uff09\uff1a\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\u7684\u5bc6\u7801\u3002 IgnoreGetMapUrl \uff08\u53ef\u9009\uff0chack\uff09\uff1a\u5982\u679c\u6307\u5b9a\uff08\u8bbe\u7f6e\u4e3a1\uff09\uff0c\u5219\u5ffd\u7565GetCapabilities\u516c\u5e03\u7684GetCoverage URL\u3002\u5982\u679c\u672a\u6b63\u786e\u914d\u7f6e\u670d\u52a1\u5668\uff0c\u5219\u53ef\u80fd\u9700\u8981\u3002 InvertAxisOrientation \uff08\u53ef\u9009\uff0chack\uff09\uff1a\u5982\u679c\u6307\u5b9a\uff08\u8bbe\u7f6e\u4e3a1\uff09\uff0c\u5219\u5728GetCoverage\u8bf7\u6c42\u4e2d\u5207\u6362\u8f74\u3002\u5982\u679c\u670d\u52a1\u5668\u4f7f\u7528\u9519\u8bef\u7684\u8f74\u987a\u5e8f\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5730\u7406CRS\u3002 IgnoreAxisOrientation \uff08\u53ef\u9009\uff0chack\uff09\uff1a\u5982\u679c\u6307\u5b9a\uff08\u8bbe\u7f6e\u4e3a1\uff09\uff0c\u5219\u4e0d\u8981\u6839\u636e\u5730\u7406CRS\u7684WCS\u6807\u51c6\u53cd\u8f6c\u8f74\u65b9\u5411\u3002 cache \uff08\u53ef\u9009\uff09\uff1a\u7f13\u5b58\u52a0\u8f7d\u63a7\u5236\uff0c\u5982QNetworkRequest :: CacheLoadControl\u4e2d\u6240\u8ff0\uff0c\u4f46\u5982\u679c\u4f7f\u7528AlwaysCache\u5931\u8d25\uff0c\u8bf7\u6c42\u5c06\u91cd\u65b0\u53d1\u9001\u4e3aPreferCache\u3002\u5141\u8bb8\u7684\u503c\uff1aAlwaysCache\uff0cPreferCache\uff0cPreferNetwork\uff0cAlwaysNetwork\u3002\u9ed8\u8ba4\u4e3aAlwaysCache\u3002 \u53e6\u5916\uff0c\u4f60\u53ef\u4ee5\u4eceWMS\u670d\u52a1\u5668\u52a0\u8f7d\u6805\u683c\u56fe\u5c42\u3002\u4f46\u662f\u76ee\u524d\u65e0\u6cd5\u4eceAPI\u8bbf\u95eeGetCapabilities\u54cd\u5e94\u2014\u2014\u4f60\u5fc5\u987b\u77e5\u9053\u6240\u9700\u7684\u56fe\u5c42\uff1a 1 2 3 4 urlWithParams = 'url=http://irs.gis-lab.info/?layers=landsat&styles=&format=image/jpeg&crs=EPSG:4326' rlayer = QgsRasterLayer ( urlWithParams , 'some layer name' , 'wms' ) if not rlayer . isValid (): print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" )","title":"3.2.2 \u52a0\u8f7dWCS\u670d\u52a1\u6805\u683c\u56fe\u5c42\uff1a"},{"location":"3-%E5%8A%A0%E8%BD%BD%E5%9B%BE%E5%B1%82/#33-qgsproject","text":"\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u6253\u5f00\u7684\u56fe\u5c42\u8fdb\u884c\u6e32\u67d3\uff0c\u8bf7\u4e0d\u8981\u5fd8\u8bb0\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230 QgsProject \u5b9e\u4f8b\u4e2d\u3002 QgsProject \u5b9e\u4f8b\u62e5\u6709\u56fe\u5c42\u7684\u6240\u6709\u6743\uff0c\u53ef\u4ee5\u901a\u8fc7\u5176\u552f\u4e00ID\u4ece\u5e94\u7528\u7a0b\u5e8f\u7684\u4efb\u4f55\u90e8\u5206\u8bbf\u95ee\u5b83\u4eec\u3002\u4ece\u9879\u76ee\u4e2d\u5220\u9664\u56fe\u5c42\u65f6\uff0c\u5b83\u4e5f\u4f1a\u88ab\u5220\u9664\u3002\u7528\u6237\u53ef\u4ee5\u5728QGIS\u63a5\u53e3\u4e2d\u5220\u9664\u56fe\u5c42\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7Python\u4f7f\u7528 removeMapLayer() \u65b9\u6cd5\u5220\u9664\u56fe\u5c42\u3002 \u4f7f\u7528 addMapLayer() \u65b9\u6cd5\u5c06\u56fe\u5c42\u6dfb\u52a0\u5230\u5f53\u524d\u9879\u76ee\uff1a 1 QgsProject . instance () . addMapLayer ( rlayer ) \u5728\u7edd\u5bf9\u4f4d\u7f6e\u6dfb\u52a0\u56fe\u5c42\uff1a 1 2 3 4 5 6 # \u9996\u5148\u6dfb\u52a0\u56fe\u5c42\u4f46\u4e0d\u663e\u793a QgsProject . instance () . addMapLayer ( rlayer , False ) # \u5728\u9879\u76ee\u4e2d\u83b7\u53d6\u56fe\u5c42\u6811\u7684\u6839\u56fe\u5c42\u7ec4 layerTree = iface . layerTreeCanvasBridge () . rootGroup () # \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u4ece0\u5f00\u59cb\u7684\u6570\u5b57\uff0c-1\u8868\u793a\u7ed3\u675f layerTree . insertChildNode ( - 1 , QgsLayerTreeLayer ( rlayer )) \u5982\u679c\u8981\u5220\u9664\u56fe\u5c42\uff0c\u4f7f\u7528 removeMapLayer() \u65b9\u6cd5\uff1a 1 QgsProject . instance () . removeMapLayer ( rlayer . id ()) \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u4f20\u9012\u4e86\u56fe\u5c42ID\uff08\u4f60\u53ef\u4ee5\u8c03\u7528\u56fe\u5c42\u7684 id() \u65b9\u6cd5\uff09\uff0c\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u56fe\u5c42\u5bf9\u8c61\u672c\u8eab\u3002 \u83b7\u53d6\u5df2\u52a0\u8f7d\u56fe\u5c42\u548c\u56fe\u5c42ID\u7684\u5217\u8868\uff0c\u4f7f\u7528 mapLayers() \u65b9\u6cd5\uff1a 1 QgsProject . instance () . mapLayers ()","title":"3.3 QgsProject \u5b9e\u4f8b"},{"location":"4-%E8%AE%BF%E9%97%AE%E5%9B%BE%E5%B1%82%E7%9B%AE%E5%BD%95%E6%A0%91/","text":"4 \u8bbf\u95ee\u56fe\u5c42\u76ee\u5f55\u6811 \u2693\ufe0e \u6b64\u9875\u9762\u4e0a\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 from qgis.core import ( QgsProject , QgsVectorLayer , ) 4.1 QgsProject\u7c7b \u2693\ufe0e \u53ef\u4ee5\u4f7f\u7528 QgsProject \u68c0\u7d22\u6709\u5173\u76ee\u5f55\u548c\u6240\u6709\u5df2\u52a0\u8f7d\u56fe\u5c42\u7684\u4fe1\u606f\u3002 \u5fc5\u987b\u521b\u5efa QgsProject \u7684\u5b9e\u4f8b instance \uff0c\u5e76\u4f7f\u7528\u5176\u65b9\u6cd5\uff08\u51fd\u6570\uff09\u6765\u83b7\u53d6\u5df2\u52a0\u8f7d\u7684\u56fe\u5c42\u3002 mapLayers \u65b9\u6cd5\u8fd4\u56de\u5df2\u52a0\u8f7d\u56fe\u5c42\u7684\u5b57\u5178\uff1a 1 2 3 4 layers = QgsProject . instance () . mapLayers () print ( layers ) # {'countries_89ae1b0f_f41b_4f42_bca4_caf55ddbe4b6': <QgsMapLayer: 'countries' (ogr)>} \u5b57\u5178\u7684 keys \u662f\u56fe\u5c42\u7684\u552f\u4e00id\uff0c\u800c values \u662f\u56fe\u5c42\u7684\u5bf9\u8c61\u3002 \u73b0\u5728\u76f4\u63a5\u53bb\u83b7\u5f97\u6709\u5173\u56fe\u5c42\u7684\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 8 9 10 # \u4f7f\u7528\u5217\u8868\u8868\u8fbe\u5f0f\u83b7\u5f97\u56fe\u5c42\u540d\u79f0 l = [ layer . name () for layer in QgsProject . instance () . mapLayers () . values ()] # \u952e\u503c\u5bf9\u5b58\u50a8\u56fe\u5c42\u540d\u79f0\u548c\u56fe\u5c42\u5bf9\u8c61 layers_list = {} for l in QgsProject . instance () . mapLayers () . values (): layers_list [ l . name ()] = l print ( layers_list ) # {'countries': <QgsMapLayer: 'countries' (ogr)>} \u8fd8\u53ef\u4ee5\u4f7f\u7528\u56fe\u5c42\u540d\u79f0\u67e5\u8be2\u76ee\u5f55\uff1a 1 country_layer = QgsProject . instance () . mapLayersByName ( \"countries\" )[ 0 ] \u63d0\u793a \u8fd4\u56de\u6240\u6709\u5339\u914d\u56fe\u5c42\u7684\u5217\u8868\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u7d22\u5f15[0]\u83b7\u53d6\u7b2c\u4e00\u4e2a\u56fe\u5c42\u3002 4.2 QgsLayerTreeGroup\u7c7b \u2693\ufe0e \u56fe\u5c42\u6811\u662f\u7531\u8282\u70b9\u6784\u5efa\u7684\u7ecf\u5178\u6811\u7ed3\u6784\u3002\u5f53\u524d\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u8282\u70b9\uff1a\u56fe\u5c42\u7ec4\u8282\u70b9\uff08 QgsLayerTreeGroup \uff09\u548c\u56fe\u5c42\u8282\u70b9\uff08 QgsLayerTreeLayer \uff09\u3002 \u63d0\u793a \u66f4\u591a\u4fe1\u606f\u8bf7\u8bbf\u95eeMartin Dobias\u7684 \u535a\u5ba2 \u3002 \u53ef\u4ee5\u4f7f\u7528 QgsProject \u7c7b\u7684 layerLayerRoot() \u65b9\u6cd5\u8f7b\u677e\u8bbf\u95ee\u9879\u76ee\u56fe\u5c42\u6811\uff1a 1 root = QgsProject . instance () . layerTreeRoot () root \u662f\u4e00\u4e2a\u56fe\u5c42\u7ec4\u8282\u70b9\uff0c\u5177\u6709\u5b50\u8282\u70b9\uff1a 1 root . children () \u8fd4\u56de\u76f4\u63a5\u5b50\u8282\u70b9\u5217\u8868\u3002\u5b50\u7ec4\u8282\u70b9\u53ef\u4ee5\u4ece\u4ed6\u4eec\u81ea\u5df1\u7684\u76f4\u63a5\u7236\u7ea7\u8bbf\u95ee\u3002 \u6211\u4eec\u53ef\u4ee5\u68c0\u7d22\u5176\u4e2d\u4e00\u4e2a\u5b50\u8282\u70b9\uff1a 1 2 3 4 child0 = root . children ()[ 0 ] print ( child0 ) # <qgis._core.QgsLayerTreeLayer object at 0x7f1e1ea54168> \u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u7684\u552f\u4e00 id \u6765\u68c0\u7d22\uff1a 1 2 3 ids = root . findLayerIds () # \u8bbf\u95ee\u7b2c\u4e00\u4e2a\u56fe\u5c42 root . findLayer ( ids [ 0 ]) \u53ef\u4ee5\u4f7f\u7528\u56fe\u5c42\u7ec4\u540d\u79f0\u68c0\u7d22\uff1a 1 root . findGroup ( 'Group Name' ) QgsLayerTreeGroup \u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u6709\u7528\u7684\u65b9\u6cd5\uff0c\u53ef\u7528\u4e8e\u83b7\u53d6\u6709\u5173\u76ee\u5f55\u6811\u7684\u66f4\u591a\u4fe1\u606f\uff1a 1 2 3 4 5 # \u83b7\u5f97\u6240\u6709\u5df2\u9009\u56fe\u5c42 checked_layers = root . checkedLayers () print ( checked_layers ) # [<QgsMapLayer: 'countries' (ogr)>] \u73b0\u5728\uff0c\u6211\u4eec\u628a\u4e00\u4e9b\u56fe\u5c42\u6dfb\u52a0\u5230\u9879\u76ee\u7684\u56fe\u5c42\u6811\u4e2d\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\uff1a **\u663e\u5f0f\u6dfb\u52a0\uff1a**\u4f7f\u7528 addLayer() \u6216\u8005 insertLayer() \u65b9\u6cd5\uff1a 1 2 3 4 5 6 # \u521b\u5efa\u4e34\u65f6\u56fe\u5c42 layer1 = QgsVectorLayer ( \"path_to_layer\" , \"Layer 1\" , \"memory\" ) # \u6dfb\u52a0\u56fe\u5c42\u5230\u56fe\u5c42\u6811\u672b\u5c3e root . addLayer ( layer1 ) # \u63d2\u5165\u56fe\u5c42\u5230\u6307\u5b9a\u4f4d\u7f6e root . insertLayer ( 5 , layer1 ) **\u9690\u5f0f\u6dfb\u52a0\uff1a**\u7531\u4e8e\u9879\u76ee\u7684\u56fe\u5c42\u6811\u5df2\u8fde\u63a5\u5230\u56fe\u5c42\u6ce8\u518c\u8868\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u56fe\u5c42\u6ce8\u518c\u8868\u4e2d\u6dfb\u52a0\u56fe\u5c42\uff1a 1 QgsProject . instance () . addMapLayer ( layer1 ) \u4f60\u53ef\u4ee5\u8f7b\u677e\u5730\u5728 QgsVectorLayer \u548c QgsLayerTreeLayer \u4e4b\u95f4\u5207\u6362\uff1a 1 2 3 4 5 6 node_layer = root . findLayer ( country_layer . id ()) print ( \"Layer node:\" , node_layer ) print ( \"Map layer:\" , node_layer . layer ()) # Layer node: <qgis._core.QgsLayerTreeLayer object at 0x7fecceb46ca8> # Map layer: <QgsMapLayer: 'countries' (ogr)> \u53ef\u4ee5\u4f7f\u7528 addGroup() \u65b9\u6cd5\u6dfb\u52a0\u7ec4\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u524d\u8005\u5c06\u5728\u76ee\u5f55\u6811\u7684\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u7ec4\uff0c\u800c\u540e\u8005\u5219\u53ef\u4ee5\u5728\u73b0\u6709\u7684\u7ec4\u4e2d\u6dfb\u52a0\u53e6\u4e00\u4e2a\u7ec4\uff1a 1 2 3 node_group1 = root . addGroup ( 'Simple Group' ) # \u5728\u56fe\u5c42\u7ec4\u4e2d\u6dfb\u52a0\u5b50\u7ec4 node_subgroup1 = node_group1 . addGroup ( \"I'm a sub group\" ) \u79fb\u52a8\u8282\u70b9\u548c\u7ec4\u6709\u8bb8\u591a\u6709\u7528\u7684\u65b9\u6cd5\u3002 \u79fb\u52a8\u73b0\u6709\u8282\u70b9\u5206\u4e09\u4e2a\u6b65\u9aa4\uff1a \u514b\u9686\u5df2\u5b58\u5728\u7684\u8282\u70b9 \u79fb\u52a8\u514b\u9686\u7684\u8282\u70b9\u5230\u60f3\u8981\u7684\u4f4d\u7f6e \u5220\u9664\u539f\u59cb\u8282\u70b9 1 2 3 4 5 6 # \u514b\u9686\u56fe\u5c42\u7ec4 cloned_group1 = node_group1 . clone () # \u79fb\u52a8\u56fe\u5c42\u7ec4\uff08\u5305\u62ec\u5b50\u7ec4\u548c\u56fe\u5c42\uff09\u5230\u9876\u5c42 root . insertChildNode ( 0 , cloned_group1 ) # \u5220\u9664\u539f\u59cb\u56fe\u5c42\u7ec4\u8282\u70b9 root . removeChildNode ( node_group1 ) \u79fb\u52a8\u4e00\u4e2a\u56fe\u5c42\u8981\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 # \u83b7\u5f97\u4e00\u4e2a\u56fe\u5c42 vl = QgsProject . instance () . mapLayersByName ( \"countries\" )[ 0 ] # \u4ece\u56fe\u5c42\u6811\u4e2d\u83b7\u53d6 myvl = root . findLayer ( vl . id ()) # \u514b\u9686 myvlclone = myvl . clone () # \u83b7\u53d6\u7236\u7ea7\uff0c\u5982\u679c\u56fe\u5c42\u4e0d\u5728\u56fe\u5c42\u7ec4\u4e2d\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 parent = myvl . parent () # \u79fb\u52a8\u56fe\u5c42\u8282\u70b9\u5230\u9876\u5c42 parent . insertChildNode ( 0 , myvlclone ) # \u5220\u9664\u539f\u6709\u8282\u70b9 root . removeChildNode ( myvl ) \u6216\u8005\u79fb\u52a8\u5230\u5df2\u5b58\u5728\u7684\u56fe\u5c42\u7ec4\u4e2d\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # \u83b7\u5f97\u4e00\u4e2a\u56fe\u5c42 vl = QgsProject . instance () . mapLayersByName ( \"countries\" )[ 0 ] # \u4ece\u56fe\u5c42\u6811\u4e2d\u83b7\u53d6 myvl = root . findLayer ( vl . id ()) # \u514b\u9686 myvlclone = myvl . clone () # \u521b\u5efa\u4e00\u4e2a\u65b0\u7ec4 group1 = root . addGroup ( \"Group1\" ) # \u83b7\u53d6\u7236\u7ea7\uff0c\u5982\u679c\u56fe\u5c42\u4e0d\u5728\u56fe\u5c42\u7ec4\u4e2d\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 parent = myvl . parent () # \u79fb\u52a8\u56fe\u5c42\u8282\u70b9\u5230\u9876\u5c42 group1 . insertChildNode ( 0 , myvlclone ) # \u4ece\u539f\u6709\u7ec4\u4e2d\u5220\u9664 parent . removeChildNode ( myvl ) \u53ef\u7528\u4e8e\u4fee\u6539\u7ec4\u548c\u56fe\u5c42\u7684\u5176\u4ed6\u4e00\u4e9b\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 node_group1 = root . findGroup ( \"Group1\" ) # \u4fee\u6539\u56fe\u5c42\u7ec4\u540d\u79f0 node_group1 . setName ( \"Group X\" ) node_layer2 = root . findLayer ( country_layer . id ()) # \u4fee\u6539\u56fe\u5c42\u540d\u79f0 node_layer2 . setName ( \"Layer X\" ) # \u6539\u53d8\u56fe\u5c42\u53ef\u89c1\u72b6\u6001 node_group1 . setItemVisibilityChecked ( True ) node_layer2 . setItemVisibilityChecked ( False ) # \u6298\u53e0/\u5c55\u5f00\u56fe\u5c42\u7ec4 node_group1 . setExpanded ( True ) node_group1 . setExpanded ( False )","title":"4-\u8bbf\u95ee\u56fe\u5c42\u76ee\u5f55\u6811"},{"location":"4-%E8%AE%BF%E9%97%AE%E5%9B%BE%E5%B1%82%E7%9B%AE%E5%BD%95%E6%A0%91/#4","text":"\u6b64\u9875\u9762\u4e0a\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 from qgis.core import ( QgsProject , QgsVectorLayer , )","title":"4 \u8bbf\u95ee\u56fe\u5c42\u76ee\u5f55\u6811"},{"location":"4-%E8%AE%BF%E9%97%AE%E5%9B%BE%E5%B1%82%E7%9B%AE%E5%BD%95%E6%A0%91/#41-qgsproject","text":"\u53ef\u4ee5\u4f7f\u7528 QgsProject \u68c0\u7d22\u6709\u5173\u76ee\u5f55\u548c\u6240\u6709\u5df2\u52a0\u8f7d\u56fe\u5c42\u7684\u4fe1\u606f\u3002 \u5fc5\u987b\u521b\u5efa QgsProject \u7684\u5b9e\u4f8b instance \uff0c\u5e76\u4f7f\u7528\u5176\u65b9\u6cd5\uff08\u51fd\u6570\uff09\u6765\u83b7\u53d6\u5df2\u52a0\u8f7d\u7684\u56fe\u5c42\u3002 mapLayers \u65b9\u6cd5\u8fd4\u56de\u5df2\u52a0\u8f7d\u56fe\u5c42\u7684\u5b57\u5178\uff1a 1 2 3 4 layers = QgsProject . instance () . mapLayers () print ( layers ) # {'countries_89ae1b0f_f41b_4f42_bca4_caf55ddbe4b6': <QgsMapLayer: 'countries' (ogr)>} \u5b57\u5178\u7684 keys \u662f\u56fe\u5c42\u7684\u552f\u4e00id\uff0c\u800c values \u662f\u56fe\u5c42\u7684\u5bf9\u8c61\u3002 \u73b0\u5728\u76f4\u63a5\u53bb\u83b7\u5f97\u6709\u5173\u56fe\u5c42\u7684\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 8 9 10 # \u4f7f\u7528\u5217\u8868\u8868\u8fbe\u5f0f\u83b7\u5f97\u56fe\u5c42\u540d\u79f0 l = [ layer . name () for layer in QgsProject . instance () . mapLayers () . values ()] # \u952e\u503c\u5bf9\u5b58\u50a8\u56fe\u5c42\u540d\u79f0\u548c\u56fe\u5c42\u5bf9\u8c61 layers_list = {} for l in QgsProject . instance () . mapLayers () . values (): layers_list [ l . name ()] = l print ( layers_list ) # {'countries': <QgsMapLayer: 'countries' (ogr)>} \u8fd8\u53ef\u4ee5\u4f7f\u7528\u56fe\u5c42\u540d\u79f0\u67e5\u8be2\u76ee\u5f55\uff1a 1 country_layer = QgsProject . instance () . mapLayersByName ( \"countries\" )[ 0 ] \u63d0\u793a \u8fd4\u56de\u6240\u6709\u5339\u914d\u56fe\u5c42\u7684\u5217\u8868\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u7d22\u5f15[0]\u83b7\u53d6\u7b2c\u4e00\u4e2a\u56fe\u5c42\u3002","title":"4.1 QgsProject\u7c7b"},{"location":"4-%E8%AE%BF%E9%97%AE%E5%9B%BE%E5%B1%82%E7%9B%AE%E5%BD%95%E6%A0%91/#42-qgslayertreegroup","text":"\u56fe\u5c42\u6811\u662f\u7531\u8282\u70b9\u6784\u5efa\u7684\u7ecf\u5178\u6811\u7ed3\u6784\u3002\u5f53\u524d\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u8282\u70b9\uff1a\u56fe\u5c42\u7ec4\u8282\u70b9\uff08 QgsLayerTreeGroup \uff09\u548c\u56fe\u5c42\u8282\u70b9\uff08 QgsLayerTreeLayer \uff09\u3002 \u63d0\u793a \u66f4\u591a\u4fe1\u606f\u8bf7\u8bbf\u95eeMartin Dobias\u7684 \u535a\u5ba2 \u3002 \u53ef\u4ee5\u4f7f\u7528 QgsProject \u7c7b\u7684 layerLayerRoot() \u65b9\u6cd5\u8f7b\u677e\u8bbf\u95ee\u9879\u76ee\u56fe\u5c42\u6811\uff1a 1 root = QgsProject . instance () . layerTreeRoot () root \u662f\u4e00\u4e2a\u56fe\u5c42\u7ec4\u8282\u70b9\uff0c\u5177\u6709\u5b50\u8282\u70b9\uff1a 1 root . children () \u8fd4\u56de\u76f4\u63a5\u5b50\u8282\u70b9\u5217\u8868\u3002\u5b50\u7ec4\u8282\u70b9\u53ef\u4ee5\u4ece\u4ed6\u4eec\u81ea\u5df1\u7684\u76f4\u63a5\u7236\u7ea7\u8bbf\u95ee\u3002 \u6211\u4eec\u53ef\u4ee5\u68c0\u7d22\u5176\u4e2d\u4e00\u4e2a\u5b50\u8282\u70b9\uff1a 1 2 3 4 child0 = root . children ()[ 0 ] print ( child0 ) # <qgis._core.QgsLayerTreeLayer object at 0x7f1e1ea54168> \u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u7684\u552f\u4e00 id \u6765\u68c0\u7d22\uff1a 1 2 3 ids = root . findLayerIds () # \u8bbf\u95ee\u7b2c\u4e00\u4e2a\u56fe\u5c42 root . findLayer ( ids [ 0 ]) \u53ef\u4ee5\u4f7f\u7528\u56fe\u5c42\u7ec4\u540d\u79f0\u68c0\u7d22\uff1a 1 root . findGroup ( 'Group Name' ) QgsLayerTreeGroup \u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u6709\u7528\u7684\u65b9\u6cd5\uff0c\u53ef\u7528\u4e8e\u83b7\u53d6\u6709\u5173\u76ee\u5f55\u6811\u7684\u66f4\u591a\u4fe1\u606f\uff1a 1 2 3 4 5 # \u83b7\u5f97\u6240\u6709\u5df2\u9009\u56fe\u5c42 checked_layers = root . checkedLayers () print ( checked_layers ) # [<QgsMapLayer: 'countries' (ogr)>] \u73b0\u5728\uff0c\u6211\u4eec\u628a\u4e00\u4e9b\u56fe\u5c42\u6dfb\u52a0\u5230\u9879\u76ee\u7684\u56fe\u5c42\u6811\u4e2d\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\uff1a **\u663e\u5f0f\u6dfb\u52a0\uff1a**\u4f7f\u7528 addLayer() \u6216\u8005 insertLayer() \u65b9\u6cd5\uff1a 1 2 3 4 5 6 # \u521b\u5efa\u4e34\u65f6\u56fe\u5c42 layer1 = QgsVectorLayer ( \"path_to_layer\" , \"Layer 1\" , \"memory\" ) # \u6dfb\u52a0\u56fe\u5c42\u5230\u56fe\u5c42\u6811\u672b\u5c3e root . addLayer ( layer1 ) # \u63d2\u5165\u56fe\u5c42\u5230\u6307\u5b9a\u4f4d\u7f6e root . insertLayer ( 5 , layer1 ) **\u9690\u5f0f\u6dfb\u52a0\uff1a**\u7531\u4e8e\u9879\u76ee\u7684\u56fe\u5c42\u6811\u5df2\u8fde\u63a5\u5230\u56fe\u5c42\u6ce8\u518c\u8868\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u56fe\u5c42\u6ce8\u518c\u8868\u4e2d\u6dfb\u52a0\u56fe\u5c42\uff1a 1 QgsProject . instance () . addMapLayer ( layer1 ) \u4f60\u53ef\u4ee5\u8f7b\u677e\u5730\u5728 QgsVectorLayer \u548c QgsLayerTreeLayer \u4e4b\u95f4\u5207\u6362\uff1a 1 2 3 4 5 6 node_layer = root . findLayer ( country_layer . id ()) print ( \"Layer node:\" , node_layer ) print ( \"Map layer:\" , node_layer . layer ()) # Layer node: <qgis._core.QgsLayerTreeLayer object at 0x7fecceb46ca8> # Map layer: <QgsMapLayer: 'countries' (ogr)> \u53ef\u4ee5\u4f7f\u7528 addGroup() \u65b9\u6cd5\u6dfb\u52a0\u7ec4\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u524d\u8005\u5c06\u5728\u76ee\u5f55\u6811\u7684\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u7ec4\uff0c\u800c\u540e\u8005\u5219\u53ef\u4ee5\u5728\u73b0\u6709\u7684\u7ec4\u4e2d\u6dfb\u52a0\u53e6\u4e00\u4e2a\u7ec4\uff1a 1 2 3 node_group1 = root . addGroup ( 'Simple Group' ) # \u5728\u56fe\u5c42\u7ec4\u4e2d\u6dfb\u52a0\u5b50\u7ec4 node_subgroup1 = node_group1 . addGroup ( \"I'm a sub group\" ) \u79fb\u52a8\u8282\u70b9\u548c\u7ec4\u6709\u8bb8\u591a\u6709\u7528\u7684\u65b9\u6cd5\u3002 \u79fb\u52a8\u73b0\u6709\u8282\u70b9\u5206\u4e09\u4e2a\u6b65\u9aa4\uff1a \u514b\u9686\u5df2\u5b58\u5728\u7684\u8282\u70b9 \u79fb\u52a8\u514b\u9686\u7684\u8282\u70b9\u5230\u60f3\u8981\u7684\u4f4d\u7f6e \u5220\u9664\u539f\u59cb\u8282\u70b9 1 2 3 4 5 6 # \u514b\u9686\u56fe\u5c42\u7ec4 cloned_group1 = node_group1 . clone () # \u79fb\u52a8\u56fe\u5c42\u7ec4\uff08\u5305\u62ec\u5b50\u7ec4\u548c\u56fe\u5c42\uff09\u5230\u9876\u5c42 root . insertChildNode ( 0 , cloned_group1 ) # \u5220\u9664\u539f\u59cb\u56fe\u5c42\u7ec4\u8282\u70b9 root . removeChildNode ( node_group1 ) \u79fb\u52a8\u4e00\u4e2a\u56fe\u5c42\u8981\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 # \u83b7\u5f97\u4e00\u4e2a\u56fe\u5c42 vl = QgsProject . instance () . mapLayersByName ( \"countries\" )[ 0 ] # \u4ece\u56fe\u5c42\u6811\u4e2d\u83b7\u53d6 myvl = root . findLayer ( vl . id ()) # \u514b\u9686 myvlclone = myvl . clone () # \u83b7\u53d6\u7236\u7ea7\uff0c\u5982\u679c\u56fe\u5c42\u4e0d\u5728\u56fe\u5c42\u7ec4\u4e2d\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 parent = myvl . parent () # \u79fb\u52a8\u56fe\u5c42\u8282\u70b9\u5230\u9876\u5c42 parent . insertChildNode ( 0 , myvlclone ) # \u5220\u9664\u539f\u6709\u8282\u70b9 root . removeChildNode ( myvl ) \u6216\u8005\u79fb\u52a8\u5230\u5df2\u5b58\u5728\u7684\u56fe\u5c42\u7ec4\u4e2d\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # \u83b7\u5f97\u4e00\u4e2a\u56fe\u5c42 vl = QgsProject . instance () . mapLayersByName ( \"countries\" )[ 0 ] # \u4ece\u56fe\u5c42\u6811\u4e2d\u83b7\u53d6 myvl = root . findLayer ( vl . id ()) # \u514b\u9686 myvlclone = myvl . clone () # \u521b\u5efa\u4e00\u4e2a\u65b0\u7ec4 group1 = root . addGroup ( \"Group1\" ) # \u83b7\u53d6\u7236\u7ea7\uff0c\u5982\u679c\u56fe\u5c42\u4e0d\u5728\u56fe\u5c42\u7ec4\u4e2d\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 parent = myvl . parent () # \u79fb\u52a8\u56fe\u5c42\u8282\u70b9\u5230\u9876\u5c42 group1 . insertChildNode ( 0 , myvlclone ) # \u4ece\u539f\u6709\u7ec4\u4e2d\u5220\u9664 parent . removeChildNode ( myvl ) \u53ef\u7528\u4e8e\u4fee\u6539\u7ec4\u548c\u56fe\u5c42\u7684\u5176\u4ed6\u4e00\u4e9b\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 node_group1 = root . findGroup ( \"Group1\" ) # \u4fee\u6539\u56fe\u5c42\u7ec4\u540d\u79f0 node_group1 . setName ( \"Group X\" ) node_layer2 = root . findLayer ( country_layer . id ()) # \u4fee\u6539\u56fe\u5c42\u540d\u79f0 node_layer2 . setName ( \"Layer X\" ) # \u6539\u53d8\u56fe\u5c42\u53ef\u89c1\u72b6\u6001 node_group1 . setItemVisibilityChecked ( True ) node_layer2 . setItemVisibilityChecked ( False ) # \u6298\u53e0/\u5c55\u5f00\u56fe\u5c42\u7ec4 node_group1 . setExpanded ( True ) node_group1 . setExpanded ( False )","title":"4.2 QgsLayerTreeGroup\u7c7b"},{"location":"5-%E4%BD%BF%E7%94%A8%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/","text":"5 \u4f7f\u7528\u6805\u683c\u56fe\u5c42 \u2693\ufe0e \u6b64\u9875\u9762\u4e0a\u7684\u4ee3\u7801\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from qgis.core import ( QgsRasterLayer , QgsProject , QgsPointXY , QgsRaster , QgsRasterShader , QgsColorRampShader , QgsSingleBandPseudoColorRenderer , QgsSingleBandColorDataRenderer , QgsSingleBandGrayRenderer , ) from qgis.PyQt.QtGui import ( QColor , ) 5.1 \u56fe\u5c42\u7ec6\u8282 \u2693\ufe0e \u6805\u683c\u56fe\u5c42\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u6805\u683c\u6ce2\u6bb5\u7ec4\u6210\u2014\u2014\u79f0\u4e3a\u5355\u6ce2\u6bb5\u548c\u591a\u6ce2\u6bb5\u6805\u683c\u3002\u4e00\u4e2a\u6ce2\u6bb5\u4ee3\u8868\u4e00\u4e2a\u77e9\u9635\u3002\u5f69\u8272\u56fe\u50cf\uff08\u4f8b\u5982\u822a\u62cd\u7167\u7247\uff09\u662f\u7531\u7ea2\u8272\uff0c\u84dd\u8272\u548c\u7eff\u8272\u6ce2\u6bb5\u7ec4\u6210\u3002\u5355\u6ce2\u6bb5\u6805\u683c\u901a\u5e38\u8868\u793a\u8fde\u7eed\u53d8\u91cf\uff08\u4f8b\u5982\u9ad8\u7a0b\uff09\u6216\u79bb\u6563\u53d8\u91cf\uff08\u4f8b\u5982\u571f\u5730\u4f7f\u7528\uff09\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6805\u683c\u56fe\u5c42\u5e26\u6709\u8c03\u8272\u677f\uff0c\u6805\u683c\u503c\u6307\u7684\u662f\u8c03\u8272\u677f\u4e2d\u5b58\u50a8\u7684\u989c\u8272\u3002 \u4ee5\u4e0b\u4ee3\u7801\u5047\u5b9a rlayer \u662f\u4e00\u4e2a QgsRasterLayer \u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 rlayer = QgsProject . instance () . mapLayersByName ( 'srtm' )[ 0 ] # \u83b7\u53d6\u56fe\u5c42\u5206\u8fa8\u7387 rlayer . width (), rlayer . height () ( 919 , 619 ) # \u83b7\u53d6\u56fe\u5c42\u8303\u56f4\uff0c\u8fd4\u56deQgsRectangle\u5bf9\u8c61 rlayer . extent () # <QgsRectangle: 20.06856808199999875 -34.27001076999999896, 20.83945284300000012,-33.75077500700000144> # \u83b7\u53d6\u56fe\u5c42\u8303\u56f4\u5e76\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 rlayer . extent () . toString () # '20.0685680819999988,-34.2700107699999990 : 20.8394528430000001,-33.7507750070000014' # \u83b7\u53d6\u6805\u683c\u7c7b\u578b: 0 = \u7070\u5ea6\u503c\uff08\u5355\u6ce2\u6bb5\uff09, 1 = \u8c03\u8272\u677f\uff08\u5355\u6ce2\u6bb5\uff09, 2 = \u591a\u6ce2\u6bb5 rlayer . rasterType () # 0 # \u83b7\u53d6\u6ce2\u6bb5\u4e2a\u6570 rlayer . bandCount () # 1 # \u83b7\u53d6\u7b2c\u4e00\u4e2a\u6ce2\u6bb5\u540d\u79f0 print ( rlayer . bandName ( 1 )) # Band 1: Height # \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684\u5143\u6570\u636e\uff0c\u8fd4\u56deQgsLayerMetadata\u5bf9\u8c61 rlayer . metadata () # '<qgis._core.QgsLayerMetadata object at 0x13711d558>' 5.2 \u6e32\u67d3 \u2693\ufe0e \u52a0\u8f7d\u6805\u683c\u56fe\u5c42\u65f6\uff0c\u5b83\u4f1a\u6839\u636e\u5176\u7c7b\u578b\u83b7\u53d6\u9ed8\u8ba4\u6e32\u67d3\u5668\u3002\u5b83\u53ef\u4ee5\u5728\u56fe\u5c42\u5c5e\u6027\u4e2d\u66f4\u6539\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u66f4\u6539\u3002 \u67e5\u8be2\u5f53\u524d\u6e32\u67d3\u5668\uff1a 1 2 3 4 rlayer . renderer () # <qgis._core.QgsSingleBandGrayRenderer object at 0x7f471c1da8a0> rlayer . renderer () . type () # 'singlebandgray' \u8bbe\u7f6e\u6e32\u67d3\u5668\uff0c\u4f7f\u7528 QgsRasterLayer \u7684 setRenderer \u65b9\u6cd5\u3002\u4e0b\u9762\u6709\u8bb8\u591a\u6e32\u67d3\u5668\u7c7b\uff08\u6d3e\u751f\u81ea QgsRasterRenderer \uff09\uff1a QgsHillshadeRenderer QgsMultiBandColorRenderer QgsPalettedRasterRenderer QgsRasterContourRenderer QgsSingleBandColorDataRenderer QgsSingleBandGrayRenderer QgsSingleBandPseudoColorRenderer \u5355\u6ce2\u6bb5\u6805\u683c\u56fe\u5c42\u53ef\u4ee5\u4ee5\u7070\u8272\uff08\u4f4e\u503c=\u9ed1\u8272\uff0c\u9ad8\u503c=\u767d\u8272\uff09\u6216\u4f7f\u7528\u4f2a\u5f69\u8272\u7b97\u6cd5\u7ed8\u5236\uff0c\u8be5\u7b97\u6cd5\u4e3a\u503c\u6307\u5b9a\u989c\u8272\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8c03\u8272\u677f\u7ed8\u5236\u5e26\u8c03\u8272\u677f\u7684\u5355\u6ce2\u6bb5\u6805\u683c\u3002\u591a\u6ce2\u6bb5\u56fe\u5c42\u901a\u5e38\u901a\u8fc7\u5c06\u6ce2\u6bb5\u6620\u5c04\u5230RGB\u6765\u7ed8\u5236\u989c\u8272\u3002\u53e6\u4e00\u79cd\u53ef\u80fd\u662f\u4ec5\u4f7f\u7528\u4e00\u4e2a\u6ce2\u6bb5\u6765\u7ed8\u56fe\u3002 5.2.1 \u5355\u6ce2\u6bb5\u6805\u683c \u2693\ufe0e \u5047\u8bbe\u6211\u4eec\u60f3\u8981\u6e32\u67d3\u4e00\u4e2a\u5355\u6ce2\u6bb5\u6805\u683c\u56fe\u5c42\uff0c\u989c\u8272\u8303\u56f4\u4ece\u7eff\u8272\u5230\u9ec4\u8272\uff08\u5bf9\u5e94\u4e8e0\u5230255\u4e4b\u95f4\u7684\u50cf\u7d20\u503c\uff09\u3002\u5728\u7b2c\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u51c6\u5907\u4e00\u4e2a\uff1a QgsRasterShader \u5bf9\u8c61\u5e76\u914d\u7f6e\u5176\u7740\u8272\u5668\u51fd\u6570\uff1a 1 2 3 4 5 6 fcn = QgsColorRampShader () fcn . setColorRampType ( QgsColorRampShader . Interpolated ) lst = [ QgsColorRampShader . ColorRampItem ( 0 , QColor ( 0 , 255 , 0 )), QgsColorRampShader . ColorRampItem ( 255 , QColor ( 255 , 255 , 0 )) ] fcn . setColorRampItemList ( lst ) shader = QgsRasterShader () shader . setRasterShaderFunction ( fcn ) \u7740\u8272\u5668\u6309\u5176\u989c\u8272\u6620\u5c04\u6307\u5b9a\u7684\u989c\u8272\u3002\u5f69\u8272\u5730\u56fe\u88ab\u63d0\u4f9b\u4e3a\u5177\u6709\u76f8\u5173\u989c\u8272\u7684\u50cf\u7d20\u503c\u5217\u8868\u3002\u63d2\u503c\u6709\u4e09\u79cd\u6a21\u5f0f\uff1a \u7ebf\u6027\uff08 Interpolated \uff09\uff1a\u4ece\u50cf\u7d20\u503c\u4e0a\u65b9\u548c\u4e0b\u65b9\u7684\u989c\u8272\u8868\u6761\u5e26\u4e2d\u7ebf\u6027\u63d2\u503c\u989c\u8272 \u79bb\u6563\uff08 Discrete \uff09\uff1a\u989c\u8272\u53d6\u81ea\u5177\u6709\u76f8\u540c\u6216\u66f4\u9ad8\u503c\u7684\u6700\u63a5\u8fd1\u7684\u989c\u8272\u8868\u6761\u5e26 \u7cbe\u786e\uff08 Exact \uff09\uff1a\u4e0d\u63d2\u503c\u989c\u8272\uff0c\u53ea\u7ed8\u5236\u503c\u7b49\u4e8e\u989c\u8272\u8868\u6761\u5e26\u7684\u50cf\u7d20 \u5728\u7b2c\u4e8c\u6b65\u4e2d\uff0c\u6211\u4eec\u5c06\u6b64\u7740\u8272\u5668\u4e0e\u6805\u683c\u56fe\u5c42\u76f8\u5173\u8054\uff1a 1 2 renderer = QgsSingleBandPseudoColorRenderer ( rlayer . dataProvider (), 1 , shader ) rlayer . setRenderer ( renderer ) \u4e0a\u9762\u4ee3\u7801\u4e2d\u6570\u503c 1 \u662f\u6ce2\u6bb5\u53f7\uff08\u6805\u683c\u6ce2\u6bb5\u7684\u4e00\u4e2a\u7d22\u5f15\uff09\u3002 \u6700\u540e\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 triggerRepaint \u65b9\u6cd5\u6765\u67e5\u770b\u7ed3\u679c\uff1a 1 rlayer . triggerRepaint () 5.2.2 \u591a\u6ce2\u6bb5\u6805\u683c \u2693\ufe0e \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cQGIS\u5c06\u524d\u4e09\u4e2a\u6ce2\u6bb5\u6620\u5c04\u4e3a\u7ea2\u8272\uff0c\u7eff\u8272\u548c\u84dd\u8272\u6765\u521b\u5efa\u5f69\u8272\u56fe\u50cf\uff08\u8fd9\u662f MultiBandColor \u7ed8\u56fe\u6837\u5f0f\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u8986\u76d6\u8fd9\u4e9b\u8bbe\u7f6e\u3002\u4ee5\u4e0b\u4ee3\u7801\u4e92\u6362\u7ea2\u8272\u6ce2\u6bb5\uff081\uff09\u548c\u7eff\u8272\u6ce2\u6bb5\uff082\uff09\uff1a 1 2 3 rlayer_multi = QgsProject . instance () . mapLayersByName ( 'multiband' )[ 0 ] rlayer_multi . renderer () . setGreenBand ( 1 ) rlayer_multi . renderer () . setRedBand ( 2 ) \u5982\u679c\u53ea\u9700\u8981\u4e00\u4e2a\u6ce2\u6bb5\u6765\u5b9e\u73b0\u5149\u6805\u7684\u53ef\u89c6\u5316\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5355\u6ce2\u6bb5\u7ed8\u5236\uff0c\u7070\u5ea6\u7ea7\u6216\u4f2a\u5f69\u8272\u3002 \u6211\u4eec\u5fc5\u987b\u4f7f\u7528 triggerRepaint \u66f4\u65b0\u5730\u56fe\u5e76\u67e5\u770b\u7ed3\u679c\uff1a 1 rlayer . triggerRepaint () 5.3 \u67e5\u8be2\u503c \u2693\ufe0e \u67e5\u8be2\u6805\u683c\u503c\u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 QgsRasterDataProvider \u7684 sample() \u65b9\u6cd5\u67e5\u8be2\u3002\u4f60\u5fc5\u987b\u6307\u5b9a\u6805\u683c\u56fe\u5c42\u7684 QgsPointXY \u7684\u548c\u6ce2\u6bb5\u53f7\u3002\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2avalue\u548cresult\uff08true\u6216false\uff09\uff1a 1 val , res = rlayer . dataProvider () . sample ( QgsPointXY ( 20.50 , - 34 ), 1 ) \u67e5\u8be2\u6805\u683c\u503c\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 identify() \u65b9\u6cd5\uff0c\u8fd4\u56de QgsRasterIdentifyResult \u5bf9\u8c61 \u3002 1 2 3 4 5 ident = rlayer . dataProvider () . identify ( QgsPointXY ( 20.5 , - 34 ), QgsRaster . IdentifyFormatValue ) if ident . isValid (): print ( ident . results ()) # {1: 323.0} \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c results() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u6ce2\u6bb5\u7d22\u5f15\u4f5c\u4e3a\u5b57\u5178\u952e\uff0c\u6ce2\u6bb5\u503c\u4f5c\u4e3a\u5b57\u5178\u503c\u3002\u4f8b\u5982 {1: 323.0} \u3002","title":"5-\u4f7f\u7528\u6805\u683c\u56fe\u5c42"},{"location":"5-%E4%BD%BF%E7%94%A8%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#5","text":"\u6b64\u9875\u9762\u4e0a\u7684\u4ee3\u7801\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from qgis.core import ( QgsRasterLayer , QgsProject , QgsPointXY , QgsRaster , QgsRasterShader , QgsColorRampShader , QgsSingleBandPseudoColorRenderer , QgsSingleBandColorDataRenderer , QgsSingleBandGrayRenderer , ) from qgis.PyQt.QtGui import ( QColor , )","title":"5 \u4f7f\u7528\u6805\u683c\u56fe\u5c42"},{"location":"5-%E4%BD%BF%E7%94%A8%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#51","text":"\u6805\u683c\u56fe\u5c42\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u6805\u683c\u6ce2\u6bb5\u7ec4\u6210\u2014\u2014\u79f0\u4e3a\u5355\u6ce2\u6bb5\u548c\u591a\u6ce2\u6bb5\u6805\u683c\u3002\u4e00\u4e2a\u6ce2\u6bb5\u4ee3\u8868\u4e00\u4e2a\u77e9\u9635\u3002\u5f69\u8272\u56fe\u50cf\uff08\u4f8b\u5982\u822a\u62cd\u7167\u7247\uff09\u662f\u7531\u7ea2\u8272\uff0c\u84dd\u8272\u548c\u7eff\u8272\u6ce2\u6bb5\u7ec4\u6210\u3002\u5355\u6ce2\u6bb5\u6805\u683c\u901a\u5e38\u8868\u793a\u8fde\u7eed\u53d8\u91cf\uff08\u4f8b\u5982\u9ad8\u7a0b\uff09\u6216\u79bb\u6563\u53d8\u91cf\uff08\u4f8b\u5982\u571f\u5730\u4f7f\u7528\uff09\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6805\u683c\u56fe\u5c42\u5e26\u6709\u8c03\u8272\u677f\uff0c\u6805\u683c\u503c\u6307\u7684\u662f\u8c03\u8272\u677f\u4e2d\u5b58\u50a8\u7684\u989c\u8272\u3002 \u4ee5\u4e0b\u4ee3\u7801\u5047\u5b9a rlayer \u662f\u4e00\u4e2a QgsRasterLayer \u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 rlayer = QgsProject . instance () . mapLayersByName ( 'srtm' )[ 0 ] # \u83b7\u53d6\u56fe\u5c42\u5206\u8fa8\u7387 rlayer . width (), rlayer . height () ( 919 , 619 ) # \u83b7\u53d6\u56fe\u5c42\u8303\u56f4\uff0c\u8fd4\u56deQgsRectangle\u5bf9\u8c61 rlayer . extent () # <QgsRectangle: 20.06856808199999875 -34.27001076999999896, 20.83945284300000012,-33.75077500700000144> # \u83b7\u53d6\u56fe\u5c42\u8303\u56f4\u5e76\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 rlayer . extent () . toString () # '20.0685680819999988,-34.2700107699999990 : 20.8394528430000001,-33.7507750070000014' # \u83b7\u53d6\u6805\u683c\u7c7b\u578b: 0 = \u7070\u5ea6\u503c\uff08\u5355\u6ce2\u6bb5\uff09, 1 = \u8c03\u8272\u677f\uff08\u5355\u6ce2\u6bb5\uff09, 2 = \u591a\u6ce2\u6bb5 rlayer . rasterType () # 0 # \u83b7\u53d6\u6ce2\u6bb5\u4e2a\u6570 rlayer . bandCount () # 1 # \u83b7\u53d6\u7b2c\u4e00\u4e2a\u6ce2\u6bb5\u540d\u79f0 print ( rlayer . bandName ( 1 )) # Band 1: Height # \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684\u5143\u6570\u636e\uff0c\u8fd4\u56deQgsLayerMetadata\u5bf9\u8c61 rlayer . metadata () # '<qgis._core.QgsLayerMetadata object at 0x13711d558>'","title":"5.1 \u56fe\u5c42\u7ec6\u8282"},{"location":"5-%E4%BD%BF%E7%94%A8%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#52","text":"\u52a0\u8f7d\u6805\u683c\u56fe\u5c42\u65f6\uff0c\u5b83\u4f1a\u6839\u636e\u5176\u7c7b\u578b\u83b7\u53d6\u9ed8\u8ba4\u6e32\u67d3\u5668\u3002\u5b83\u53ef\u4ee5\u5728\u56fe\u5c42\u5c5e\u6027\u4e2d\u66f4\u6539\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u66f4\u6539\u3002 \u67e5\u8be2\u5f53\u524d\u6e32\u67d3\u5668\uff1a 1 2 3 4 rlayer . renderer () # <qgis._core.QgsSingleBandGrayRenderer object at 0x7f471c1da8a0> rlayer . renderer () . type () # 'singlebandgray' \u8bbe\u7f6e\u6e32\u67d3\u5668\uff0c\u4f7f\u7528 QgsRasterLayer \u7684 setRenderer \u65b9\u6cd5\u3002\u4e0b\u9762\u6709\u8bb8\u591a\u6e32\u67d3\u5668\u7c7b\uff08\u6d3e\u751f\u81ea QgsRasterRenderer \uff09\uff1a QgsHillshadeRenderer QgsMultiBandColorRenderer QgsPalettedRasterRenderer QgsRasterContourRenderer QgsSingleBandColorDataRenderer QgsSingleBandGrayRenderer QgsSingleBandPseudoColorRenderer \u5355\u6ce2\u6bb5\u6805\u683c\u56fe\u5c42\u53ef\u4ee5\u4ee5\u7070\u8272\uff08\u4f4e\u503c=\u9ed1\u8272\uff0c\u9ad8\u503c=\u767d\u8272\uff09\u6216\u4f7f\u7528\u4f2a\u5f69\u8272\u7b97\u6cd5\u7ed8\u5236\uff0c\u8be5\u7b97\u6cd5\u4e3a\u503c\u6307\u5b9a\u989c\u8272\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8c03\u8272\u677f\u7ed8\u5236\u5e26\u8c03\u8272\u677f\u7684\u5355\u6ce2\u6bb5\u6805\u683c\u3002\u591a\u6ce2\u6bb5\u56fe\u5c42\u901a\u5e38\u901a\u8fc7\u5c06\u6ce2\u6bb5\u6620\u5c04\u5230RGB\u6765\u7ed8\u5236\u989c\u8272\u3002\u53e6\u4e00\u79cd\u53ef\u80fd\u662f\u4ec5\u4f7f\u7528\u4e00\u4e2a\u6ce2\u6bb5\u6765\u7ed8\u56fe\u3002","title":"5.2 \u6e32\u67d3"},{"location":"5-%E4%BD%BF%E7%94%A8%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#521","text":"\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u6e32\u67d3\u4e00\u4e2a\u5355\u6ce2\u6bb5\u6805\u683c\u56fe\u5c42\uff0c\u989c\u8272\u8303\u56f4\u4ece\u7eff\u8272\u5230\u9ec4\u8272\uff08\u5bf9\u5e94\u4e8e0\u5230255\u4e4b\u95f4\u7684\u50cf\u7d20\u503c\uff09\u3002\u5728\u7b2c\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u51c6\u5907\u4e00\u4e2a\uff1a QgsRasterShader \u5bf9\u8c61\u5e76\u914d\u7f6e\u5176\u7740\u8272\u5668\u51fd\u6570\uff1a 1 2 3 4 5 6 fcn = QgsColorRampShader () fcn . setColorRampType ( QgsColorRampShader . Interpolated ) lst = [ QgsColorRampShader . ColorRampItem ( 0 , QColor ( 0 , 255 , 0 )), QgsColorRampShader . ColorRampItem ( 255 , QColor ( 255 , 255 , 0 )) ] fcn . setColorRampItemList ( lst ) shader = QgsRasterShader () shader . setRasterShaderFunction ( fcn ) \u7740\u8272\u5668\u6309\u5176\u989c\u8272\u6620\u5c04\u6307\u5b9a\u7684\u989c\u8272\u3002\u5f69\u8272\u5730\u56fe\u88ab\u63d0\u4f9b\u4e3a\u5177\u6709\u76f8\u5173\u989c\u8272\u7684\u50cf\u7d20\u503c\u5217\u8868\u3002\u63d2\u503c\u6709\u4e09\u79cd\u6a21\u5f0f\uff1a \u7ebf\u6027\uff08 Interpolated \uff09\uff1a\u4ece\u50cf\u7d20\u503c\u4e0a\u65b9\u548c\u4e0b\u65b9\u7684\u989c\u8272\u8868\u6761\u5e26\u4e2d\u7ebf\u6027\u63d2\u503c\u989c\u8272 \u79bb\u6563\uff08 Discrete \uff09\uff1a\u989c\u8272\u53d6\u81ea\u5177\u6709\u76f8\u540c\u6216\u66f4\u9ad8\u503c\u7684\u6700\u63a5\u8fd1\u7684\u989c\u8272\u8868\u6761\u5e26 \u7cbe\u786e\uff08 Exact \uff09\uff1a\u4e0d\u63d2\u503c\u989c\u8272\uff0c\u53ea\u7ed8\u5236\u503c\u7b49\u4e8e\u989c\u8272\u8868\u6761\u5e26\u7684\u50cf\u7d20 \u5728\u7b2c\u4e8c\u6b65\u4e2d\uff0c\u6211\u4eec\u5c06\u6b64\u7740\u8272\u5668\u4e0e\u6805\u683c\u56fe\u5c42\u76f8\u5173\u8054\uff1a 1 2 renderer = QgsSingleBandPseudoColorRenderer ( rlayer . dataProvider (), 1 , shader ) rlayer . setRenderer ( renderer ) \u4e0a\u9762\u4ee3\u7801\u4e2d\u6570\u503c 1 \u662f\u6ce2\u6bb5\u53f7\uff08\u6805\u683c\u6ce2\u6bb5\u7684\u4e00\u4e2a\u7d22\u5f15\uff09\u3002 \u6700\u540e\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 triggerRepaint \u65b9\u6cd5\u6765\u67e5\u770b\u7ed3\u679c\uff1a 1 rlayer . triggerRepaint ()","title":"5.2.1 \u5355\u6ce2\u6bb5\u6805\u683c"},{"location":"5-%E4%BD%BF%E7%94%A8%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#522","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cQGIS\u5c06\u524d\u4e09\u4e2a\u6ce2\u6bb5\u6620\u5c04\u4e3a\u7ea2\u8272\uff0c\u7eff\u8272\u548c\u84dd\u8272\u6765\u521b\u5efa\u5f69\u8272\u56fe\u50cf\uff08\u8fd9\u662f MultiBandColor \u7ed8\u56fe\u6837\u5f0f\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u8986\u76d6\u8fd9\u4e9b\u8bbe\u7f6e\u3002\u4ee5\u4e0b\u4ee3\u7801\u4e92\u6362\u7ea2\u8272\u6ce2\u6bb5\uff081\uff09\u548c\u7eff\u8272\u6ce2\u6bb5\uff082\uff09\uff1a 1 2 3 rlayer_multi = QgsProject . instance () . mapLayersByName ( 'multiband' )[ 0 ] rlayer_multi . renderer () . setGreenBand ( 1 ) rlayer_multi . renderer () . setRedBand ( 2 ) \u5982\u679c\u53ea\u9700\u8981\u4e00\u4e2a\u6ce2\u6bb5\u6765\u5b9e\u73b0\u5149\u6805\u7684\u53ef\u89c6\u5316\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5355\u6ce2\u6bb5\u7ed8\u5236\uff0c\u7070\u5ea6\u7ea7\u6216\u4f2a\u5f69\u8272\u3002 \u6211\u4eec\u5fc5\u987b\u4f7f\u7528 triggerRepaint \u66f4\u65b0\u5730\u56fe\u5e76\u67e5\u770b\u7ed3\u679c\uff1a 1 rlayer . triggerRepaint ()","title":"5.2.2 \u591a\u6ce2\u6bb5\u6805\u683c"},{"location":"5-%E4%BD%BF%E7%94%A8%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#53","text":"\u67e5\u8be2\u6805\u683c\u503c\u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 QgsRasterDataProvider \u7684 sample() \u65b9\u6cd5\u67e5\u8be2\u3002\u4f60\u5fc5\u987b\u6307\u5b9a\u6805\u683c\u56fe\u5c42\u7684 QgsPointXY \u7684\u548c\u6ce2\u6bb5\u53f7\u3002\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2avalue\u548cresult\uff08true\u6216false\uff09\uff1a 1 val , res = rlayer . dataProvider () . sample ( QgsPointXY ( 20.50 , - 34 ), 1 ) \u67e5\u8be2\u6805\u683c\u503c\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 identify() \u65b9\u6cd5\uff0c\u8fd4\u56de QgsRasterIdentifyResult \u5bf9\u8c61 \u3002 1 2 3 4 5 ident = rlayer . dataProvider () . identify ( QgsPointXY ( 20.5 , - 34 ), QgsRaster . IdentifyFormatValue ) if ident . isValid (): print ( ident . results ()) # {1: 323.0} \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c results() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u6ce2\u6bb5\u7d22\u5f15\u4f5c\u4e3a\u5b57\u5178\u952e\uff0c\u6ce2\u6bb5\u503c\u4f5c\u4e3a\u5b57\u5178\u503c\u3002\u4f8b\u5982 {1: 323.0} \u3002","title":"5.3 \u67e5\u8be2\u503c"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/","text":"\u672c\u8282\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 from qgis.core import ( QgsApplication , QgsDataSourceUri , QgsCategorizedSymbolRenderer , QgsClassificationRange , QgsPointXY , QgsProject , QgsExpression , QgsField , QgsFields , QgsFeature , QgsFeatureRequest , QgsFeatureRenderer , QgsGeometry , QgsGraduatedSymbolRenderer , QgsMarkerSymbol , QgsMessageLog , QgsRectangle , QgsRendererCategory , QgsRendererRange , QgsSymbol , QgsVectorDataProvider , QgsVectorLayer , QgsVectorFileWriter , QgsWkbTypes , QgsSpatialIndex , QgsVectorLayerUtils ) from qgis.core.additions.edit import edit from qgis.PyQt.QtGui import ( QColor , ) 6 \u4f7f\u7528\u77e2\u91cf\u56fe\u5c42 \u2693\ufe0e \u672c\u8282\u603b\u7ed3\u4e86\u4f7f\u7528\u77e2\u91cf\u56fe\u5c42\u6267\u884c\u5404\u79cd\u64cd\u4f5c\u3002 \u8fd9\u91cc\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u90fd\u662f\u57fa\u4e8e QgsVectorLayer \u7c7b\u7684\u65b9\u6cd5\u3002 6.1 \u68c0\u7d22\u76f8\u5173\u5c5e\u6027\u4fe1\u606f \u2693\ufe0e \u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 QgsVectorLayer \u5bf9\u8c61\u7684 fields() \u65b9\u6cd5\u68c0\u7d22\u4e00\u4e2a\u77e2\u91cf\u56fe\u5c42\u76f8\u5173\u5b57\u6bb5\u7684\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 8 9 vlayer = QgsVectorLayer ( \"testdata/airports.shp\" , \"airports\" , \"ogr\" ) for field in vlayer . fields (): print ( field . name (), field . typeName ()) # ID Integer64 # fk_region Integer64 # ELEV Real # NAME String # USE String QgsVectorLayer \u7c7b\u7684 displayField() \u548c mapTipTemplate() \u65b9\u6cd5\u63d0\u4f9b\u6709\u5173 \u663e\u793a\u5c5e\u6027 \u9009\u9879\u5361\u4e2d\u4f7f\u7528\u7684\u5b57\u6bb5\u548c\u6a21\u677f\u7684\u4fe1\u606f\u3002 \u52a0\u8f7d\u77e2\u91cf\u5c42\u65f6\uff0cQGIS\u59cb\u7ec8\u9009\u62e9\u4e00\u4e2a\u5b57\u6bb5\u4f5c\u4e3a \u663e\u793a\u540d\u79f0 \uff0c\u800c HTML\u5730\u56fe\u63d0\u793a \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a\u7a7a\u3002\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u540c\u65f6\u83b7\u5f97\uff1a 1 2 3 vlayer = QgsVectorLayer ( \"testdata/airports.shp\" , \"airports\" , \"ogr\" ) print ( vlayer . displayField ()) # NAME \u63d0\u793a \u5982\u679c\u5c06\u663e\u793a\u540d\u79f0\u4ece\u5b57\u6bb5\u66f4\u6539\u4e3a\u8868\u8fbe\u5f0f\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 displayExpression() \u800c\u4e0d\u662f displayField() \u3002 6.2 \u904d\u5386\u77e2\u91cf\u56fe\u5c42 \u2693\ufe0e \u904d\u5386\u77e2\u91cf\u56fe\u5c42\u8981\u7d20\u662f\u6700\u5e38\u89c1\u7684\u4efb\u52a1\u4e4b\u4e00\u3002\u4e0b\u9762\u662f\u6267\u884c\u6b64\u4efb\u52a1\u7684\u7b80\u5355\u57fa\u672c\u4ee3\u7801\u793a\u4f8b\uff0c\u5e76\u663e\u793a\u6709\u5173\u6bcf\u4e2a\u8981\u7d20\u7684\u4e00\u4e9b\u4fe1\u606f\u3002 layer \u53d8\u91cf\u88ab\u5047\u5b9a\u4e3a\u4e00\u4e2a QgsVectorLayer \u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 layer = iface . activeLayer () features = layer . getFeatures () for feature in features : # \u68c0\u7d22\u6bcf\u4e00\u4e2a\u8981\u7d20\u7684\u51e0\u4f55\u548c\u5c5e\u6027 print ( \"Feature ID: \" , feature . id ()) # \u83b7\u53d6\u51e0\u4f55 geom = feature . geometry () geomSingleType = QgsWkbTypes . isSingleType ( geom . wkbType ()) if geom . type () == QgsWkbTypes . PointGeometry : # \u51e0\u4f55\u7c7b\u578b\u53ef\u4ee5\u662f\u5355\u4e2a\u6216\u591a\u4e2a\u7c7b\u578b\uff0c if geomSingleType : x = geom . asPoint () print ( \"Point: \" , x ) else : x = geom . asMultiPoint () print ( \"MultiPoint: \" , x ) elif geom . type () == QgsWkbTypes . LineGeometry : if geomSingleType : x = geom . asPolyline () print ( \"Line: \" , x , \"length: \" , geom . length ()) else : x = geom . asMultiPolyline () print ( \"MultiLine: \" , x , \"length: \" , geom . length ()) elif geom . type () == QgsWkbTypes . PolygonGeometry : if geomSingleType : x = geom . asPolygon () print ( \"Polygon: \" , x , \"Area: \" , geom . area ()) else : x = geom . asMultiPolygon () print ( \"MultiPolygon: \" , x , \"Area: \" , geom . area ()) else : print ( \"Unknown or invalid geometry\" ) # \u83b7\u53d6\u5c5e\u6027 attrs = feature . attributes () # attrs\u662f\u4e00\u4e2a\u5217\u8868\u3002\u5b83\u5305\u542b\u8981\u7d20\u7684\u6240\u6709\u5c5e\u6027\u503c print ( attrs ) # \u672c\u6d4b\u8bd5\u53ea\u6253\u5370\u7b2c\u4e00\u4e2a\u8981\u7d20 break # Feature ID: 1 # Point: <QgsPointXY: POINT(7 45)> # [1, 'First feature'] 6.3 \u9009\u62e9\u8981\u7d20 \u2693\ufe0e \u5728QGIS\u684c\u9762\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0d\u540c\u65b9\u5f0f\u9009\u62e9\u8981\u7d20\uff1a\u7528\u6237\u53ef\u4ee5\u5355\u51fb\u8981\u7d20\u3001\u5728\u5730\u56fe\u753b\u5e03\u4e0a\u7ed8\u5236\u77e9\u5f62\u6216\u4f7f\u7528\u8868\u8fbe\u5f0f\u8fc7\u6ee4\u5668\u3002\u6240\u9009\u8981\u7d20\u901a\u5e38\u4ee5\u4e0d\u540c\u989c\u8272\u7a81\u51fa\u663e\u793a\uff08\u9ed8\u8ba4\u4e3a\u9ec4\u8272\uff09\uff0c\u4ee5\u5f15\u8d77\u7528\u6237\u5bf9\u5df2\u9009\u8981\u7d20\u7684\u6ce8\u610f\u3002 \u6709\u65f6\uff0c\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u9009\u62e9\u8981\u7d20\u6216\u66f4\u6539\u9ed8\u8ba4\u989c\u8272\u4f1a\u5f88\u6709\u7528\u3002 \u9009\u62e9\u6240\u6709\u8981\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528 selectAll() \u65b9\u6cd5\uff1a 1 2 3 # \u83b7\u53d6\u5f53\u524d\u56fe\u5c42\uff08\u5fc5\u987b\u662f\u77e2\u91cf\u56fe\u5c42\uff09 layer = iface . activeLayer () layer . selectAll () \u4f7f\u7528\u8868\u8fbe\u5f0f\u8fdb\u884c\u9009\u62e9\uff0c\u4f7f\u7528 selectByExpression() \u65b9\u6cd5\uff1a 1 2 3 4 # \u5047\u8bbe\u5f53\u524d\u56fe\u5c42\u662f\u6765\u81eaQGIS\u6d4b\u8bd5\u5957\u4ef6\u7684points.shp\u6587\u4ef6 #\uff08Class\uff08\u5b57\u7b26\u4e32\uff09\u548cHeading\uff08\u6570\u5b57\uff09\u662fpoints.shp\u4e2d\u7684\u5c5e\u6027\uff09 layer = iface . activeLayer () layer . selectByExpression ( '\"Class\"= \\' B52 \\' and \"Heading\" > 10 and \"Heading\" <70' , QgsVectorLayer . SetSelection ) \u66f4\u6539\u9009\u62e9\u989c\u8272\uff0c\u53ef\u4ee5\u4f7f\u7528 QgsMapCanvas \u7684 setSelectionColor() \u65b9\u6cd5 \uff1a 1 iface . mapCanvas () . setSelectionColor ( QColor ( \"red\" )) \u7ed9\u56fe\u5c42\u7684\u6240\u9009\u8981\u7d20\u5217\u8868\u6dfb\u52a0\u8981\u7d20\uff0c\u4f60\u53ef\u4ee5\u8c03\u7528 select() \u6dfb\u52a0\u5230\u8981\u7d20ID\u5217\u8868\uff1a 1 2 3 4 5 6 7 8 selected_fid = [] # \u83b7\u53d6\u56fe\u5c42\u7684\u7b2c\u4e00\u4e2a\u8981\u7d20ID for feature in layer . getFeatures (): selected_fid . append ( feature . id ()) break # \u5c06\u8fd9\u4e9b\u8981\u7d20\u6dfb\u52a0\u5230\u9009\u5b9a\u7684\u5217\u8868 layer . select ( selected_fid ) \u6e05\u9664\u9009\u62e9\uff1a 1 layer . removeSelection () 6.3.1 \u8bbf\u95ee\u5c5e\u6027 \u2693\ufe0e \u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7\u540d\u79f0\u6765\u83b7\u5f97\uff1a 1 2 3 print ( feature [ 'name' ]) # First feature \u6216\u8005\uff0c\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u5f15\u7528\u5c5e\u6027\u3002\u8fd9\u6bd4\u4f7f\u7528\u540d\u79f0\u5feb\u4e00\u70b9\u3002\u4f8b\u5982\uff0c\u83b7\u53d6\u7b2c\u4e8c\u4e2a\u5c5e\u6027\uff1a 1 2 3 print ( feature [ 1 ]) # Second feature 6.3.2 \u904d\u5386\u9009\u4e2d\u7684\u8981\u7d20 \u2693\ufe0e \u5982\u679c\u4f60\u53ea\u9700\u8981\u9009\u4e2d\u7684\u8981\u7d20\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u77e2\u91cf\u56fe\u5c42\u7684 selectedFeatures() \u65b9\u6cd5\uff1a 1 2 3 4 5 selection = layer . selectedFeatures () print ( len ( selection )) for feature in selection : # \u4f7f\u7528\u8981\u7d20\u6267\u884c\u4efb\u4f55\u64cd\u4f5c pass 6.3.3 \u904d\u5386\u4e00\u90e8\u5206\u8981\u7d20 \u2693\ufe0e \u5982\u679c\u8981\u904d\u5386\u56fe\u5c42\u4e2d\u7279\u5b9a\u7684\u8981\u7d20\u5b50\u96c6\uff08\u4f8b\u5982\u7ed9\u5b9a\u533a\u57df\u5185\u7684\u8981\u7d20\uff09\uff0c\u5219\u5fc5\u987b\u6dfb\u52a0 QgsFeatureRequest \u5bf9\u8c61\u5230 getFeatures() \u65b9\u6cd5\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 areaOfInterest = QgsRectangle ( 450290 , 400520 , 450750 , 400780 ) request = QgsFeatureRequest () . setFilterRect ( areaOfInterest ) for feature in layer . getFeatures ( request ): # \u4f7f\u7528\u8981\u7d20\u6267\u884c\u4efb\u4f55\u64cd\u4f5c pass \u4e3a\u4e86\u901f\u5ea6\uff0c\u76f8\u4ea4\u901a\u5e38\u4ec5\u4f7f\u7528\u8981\u7d20\u7684\u8303\u56f4(bbox)\u6765\u5b8c\u6210\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u6807\u5fd7 ExactIntersect \u53ef\u4ee5\u786e\u4fdd\u53ea\u8fd4\u56de\u76f8\u4ea4\u7684\u8981\u7d20\uff1a 1 request = QgsFeatureRequest () . setFilterRect ( areaOfInterest ) . setFlags ( QgsFeatureRequest . ExactIntersect ) \u4f7f\u7528 setLimit() \u4f60\u53ef\u4ee5\u9650\u5236\u8981\u7d20\u7684\u6570\u91cf\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 request = QgsFeatureRequest () request . setLimit ( 2 ) for feature in layer . getFeatures ( request ): print ( feature ) # <qgis._core.QgsFeature object at 0x7f9b78590948> \u5982\u679c\u4f60\u9700\u8981\u4e00\u4e2a\u57fa\u4e8e\u5c5e\u6027\u7684\u8fc7\u6ee4\u5668\u6765\u4ee3\u66ff\uff08\u6216\u589e\u52a0\uff09\u4e00\u4e2a\u7a7a\u95f4\u8fc7\u6ee4\u5668\uff0c\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u6240\u793a\uff0c\u4f60\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a QgsExpression \u5bf9\u8c61\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 QgsFeatureRequest \u51fd\u6570\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 # \u8868\u8fbe\u5f0f\u5c06\u8fc7\u6ee4\u5b57\u6bb5\u201clocation_name\u201d # \u5305\u542b\u5355\u8bcd\u201cLake\u201d\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09 exp = QgsExpression ( \"location_name ILIKE \\' %La ke% \\' \" ) request = QgsFeatureRequest ( exp ) \u6709\u5173\u652f\u6301\u8bed\u6cd5\uff08 QgsExpression \uff09\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 11-\u8868\u8fbe\u5f0f\uff0c\u8fc7\u6ee4\u548c\u8ba1\u7b97\u503c \u3002 \u8be5\u8bf7\u6c42\u53ef\u7528\u4e8e\u68c0\u7d22\u6bcf\u4e2a\u8981\u7d20\uff0c\u56e0\u6b64\u8fed\u4ee3\u5668\u8fd4\u56de\u6240\u6709\u8981\u7d20\uff0c\u4f46\u8fd4\u56de\u6bcf\u4e2a\u8981\u7d20\u7684\u90e8\u5206\u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # \u4ec5\u8fd4\u56de\u9009\u5b9a\u7684\u5b57\u6bb5\u4ee5\u589e\u52a0\u8bf7\u6c42\u901f\u5ea6 request . setSubsetOfAttributes ([ 0 , 2 ]) # \u66f4\u52a0\u53cb\u597d\u7684\u65b9\u5f0f request . setSubsetOfAttributes ([ 'name' , 'id' ], layer . fields ()) # \u4e0d\u8fd4\u56de\u51e0\u4f55\u5bf9\u8c61\u4ee5\u589e\u52a0\u8bf7\u6c42\u901f\u5ea6 request . setFlags ( QgsFeatureRequest . NoGeometry ) # \u4ec5\u83b7\u53d6ID\u4e3a45\u7684\u8981\u7d20 request . setFilterFid ( 45 ) # \u8fd9\u4e9b\u9009\u9879\u53ef\u4ee5\u662f\u94fe\u5f0f\u7684 request . setFilterRect ( areaOfInterest ) . setFlags ( QgsFeatureRequest . NoGeometry ) . setFilterFid ( 45 ) . setSubsetOfAttributes ([ 0 , 2 ]) 6.4 \u4fee\u6539\u77e2\u91cf\u56fe\u5c42 \u2693\ufe0e \u5927\u591a\u6570\u77e2\u91cf\u6570\u636e\u63d0\u4f9b\u8005\u90fd\u652f\u6301\u7f16\u8f91\u56fe\u5c42\u6570\u636e\u3002\u6709\u65f6\u5b83\u4eec\u4ec5\u652f\u6301\u7f16\u8f91\u5b50\u96c6\u3002\u4f7f\u7528 capabilities() \u529f\u80fd\u53ef\u4ee5\u627e\u51fa\u652f\u6301\u7684\u529f\u80fd\u96c6\u3002 1 2 3 4 caps = layer . dataProvider () . capabilities () # \u68c0\u67e5\u662f\u5426\u652f\u6301\u7279\u5b9a\u529f\u80fd\uff1a if caps & QgsVectorDataProvider . DeleteFeatures : print ( '\u56fe\u5c42\u652f\u6301\u5220\u9664\u8981\u7d20' ) \u6709\u5173\u6240\u6709\u53ef\u7528\u529f\u80fd\u7684\u5217\u8868\uff0c\u8bf7\u53c2\u9605 \uff1a QgsVectorDataProvider\u63a5\u53e3\u6587\u6863 \u6253\u5370\u56fe\u5c42\u529f\u80fd\u7684\u6587\u672c\u63cf\u8ff0\uff0c\u7ed3\u679c\u662f\u4ee5\u9017\u53f7\u5206\u9694\u7684\u5217\u8868\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 capabilitiesString() \u65b9\u6cd5\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a 1 2 3 4 5 6 caps_string = layer . dataProvider () . capabilitiesString () # Print: # 'Add Features, Delete Features, Change Attribute Values, Add Attributes, # Delete Attributes, Rename Attributes, Fast Access to Features at ID, # Presimplify Geometries, Presimplify Geometries with Validity Check, # Transactions, Curved Geometries' \u901a\u8fc7\u4f7f\u7528\u4ee5\u4e0b\u4efb\u4f55\u65b9\u6cd5\u8fdb\u884c\u77e2\u91cf\u56fe\u5c42\u7f16\u8f91\uff0c\u66f4\u6539\u5c06\u76f4\u63a5\u63d0\u4ea4\u5230\u57fa\u7840\u6570\u636e\u5b58\u50a8\uff08\u6587\u4ef6\uff0c\u6570\u636e\u5e93\u7b49\uff09\u3002\u5982\u679c\u4f60\u53ea\u60f3\u8fdb\u884c\u4e34\u65f6\u4fee\u6539\uff0c\u8bf7\u8df3\u5230\u4e0b\u4e00\u8282 6.4.4 \u4f7f\u7528\u7f16\u8f91\u7f13\u51b2\u533a\u4fee\u6539\u77e2\u91cf\u56fe\u5c42 \u3002 \u63d0\u793a \u5982\u679c\u4f60\u5728QGIS\u5185\u90e8\uff08\u4ece\u63a7\u5236\u53f0\u6216\u4ece\u63d2\u4ef6\u4e2d\uff09\uff0c\u53ef\u80fd\u9700\u8981\u5f3a\u5236\u91cd\u7ed8\u5730\u56fe\u753b\u5e03\uff0c\u4ee5\u4fbf\u67e5\u770b\u4f60\u5bf9\u51e0\u4f55\u3001\u6837\u5f0f\u6216\u5c5e\u6027\u6240\u505a\u7684\u66f4\u6539\uff1a 1 2 3 4 5 # \u5982\u679c\u542f\u7528\u4e86\u7f13\u5b58\uff0c\u7b80\u5355\u7684\u753b\u5e03\u5237\u65b0\u53ef\u80fd\u4e0d\u8db3\u4ee5\u89e6\u53d1\u91cd\u7ed8\uff0c\u5e76\u4e14\u5fc5\u987b\u6e05\u9664\u56fe\u5c42\u7684\u7f13\u5b58\u56fe\u50cf\u3002 if iface . mapCanvas () . isCachingEnabled (): layer . triggerRepaint () else : iface . mapCanvas () . refresh () 6.4.1 \u6dfb\u52a0\u8981\u7d20 \u2693\ufe0e \u521b\u5efa\u4e00\u4e9b QgsFeature \u5b9e\u4f8b\u5e76\u5c06\u5b83\u4eec\u7684\u5217\u8868\u4f20\u9012\u7ed9\u63d0\u4f9b\u8005\u7684 addFeatures() \u65b9\u6cd5\u3002\u5b83\u5c06\u8fd4\u56de\u4e24\u4e2a\u503c\uff1aresult\uff08true / false\uff09\u548c\u6dfb\u52a0\u7684\u8981\u7d20\u5217\u8868\uff08\u5b83\u4eec\u7684ID\u7531\u6570\u636e\u5b58\u50a8\u8bbe\u7f6e\uff09\u3002 \u8bbe\u7f6e\u8981\u7d20\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 QgsFields \u5bf9\u8c61\uff08\u53ef\u4ee5\u4ece fields() \u77e2\u91cf\u56fe\u5c42\u7684\u65b9\u6cd5\u83b7\u53d6 \uff09\u6216\u8c03\u7528 initAttributes() \u4f20\u9012\u8981\u6dfb\u52a0\u7684\u5b57\u6bb5\u6570\u6765\u521d\u59cb\u5316\u8981\u7d20\u3002 1 2 3 4 5 6 7 8 if caps & QgsVectorDataProvider . AddFeatures : feat = QgsFeature ( layer . fields ()) feat . setAttributes ([ 0 , 'hello' ]) # \u6216\u6309key\u6216index\u8bbe\u7f6e\u5355\u4e2a\u5c5e\u6027\uff1a feat . setAttribute ( 'name' , 'hello' ) feat . setAttribute ( 0 , 'hello' ) feat . setGeometry ( QgsGeometry . fromPointXY ( QgsPointXY ( 123 , 456 ))) ( res , outFeats ) = layer . dataProvider () . addFeatures ([ feat ]) 6.4.2 \u5220\u9664\u8981\u7d20 \u2693\ufe0e \u5220\u9664\u67d0\u4e9b\u8981\u7d20\uff0c\u53ea\u9700\u63d0\u4f9b\u5176\u8981\u7d20ID\u5217\u8868\u5373\u53ef\u3002 1 2 if caps & QgsVectorDataProvider . DeleteFeatures : res = layer . dataProvider () . deleteFeatures ([ 5 , 10 ]) 6.4.3 \u4fee\u6539\u8981\u7d20 \u2693\ufe0e \u53ef\u4ee5\u66f4\u6539\u8981\u7d20\u7684\u51e0\u4f55\u56fe\u5f62\u6216\u66f4\u6539\u67d0\u4e9b\u5c5e\u6027\u3002\u4ee5\u4e0b\u793a\u4f8b\u9996\u5148\u66f4\u6539\u7d22\u5f15\u4e3a0\u548c1\u7684\u5c5e\u6027\u503c\uff0c\u7136\u540e\u66f4\u6539\u8981\u7d20\u7684\u51e0\u4f55\u3002 1 2 3 4 5 6 7 8 9 fid = 100 # \u6211\u4eec\u5c06\u4fee\u6539\u7684\u8981\u7d20ID if caps & QgsVectorDataProvider . ChangeAttributeValues : attrs = { 0 : \"hello\" , 1 : 123 } layer . dataProvider () . changeAttributeValues ({ fid : attrs }) if caps & QgsVectorDataProvider . ChangeGeometries : geom = QgsGeometry . fromPointXY ( QgsPointXY ( 111 , 222 )) layer . dataProvider () . changeGeometryValues ({ fid : geom }) \u63d0\u793a QgsVectorLayerEditUtils\u7c7b\u8fdb\u884c\u4ec5\u51e0\u4f55\u7f16\u8f91 \u5982\u679c\u4f60\u53ea\u9700\u8981\u66f4\u6539\u51e0\u4f55\u56fe\u5f62\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 QgsVectorLayerEditUtils \uff0c\u5b83\u63d0\u4f9b\u4e00\u4e9b\u6709\u7528\u7684\u65b9\u6cd5\u6765\u7f16\u8f91\u51e0\u4f55\u56fe\u5f62\uff08\u5e73\u79fb\u3001\u63d2\u5165\u6216\u79fb\u52a8\u9876\u70b9\u7b49\uff09\u3002 6.4.4 \u4f7f\u7528\u7f16\u8f91\u7f13\u51b2\u533a\u4fee\u6539\u77e2\u91cf\u56fe\u5c42 \u2693\ufe0e \u5728QGIS\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7f16\u8f91\u77e2\u91cf\u65f6\uff0c\u5fc5\u987b\u9996\u5148\u4e3a\u7279\u5b9a\u56fe\u5c42\u8bbe\u7f6e\u5f00\u59cb\u7f16\u8f91\u6a21\u5f0f\uff0c\u7136\u540e\u8fdb\u884c\u4e00\u4e9b\u4fee\u6539\uff0c\u6700\u540e\u63d0\u4ea4\uff08\u6216\u56de\u6eda\uff09\u66f4\u6539\u3002\u4f60\u6240\u505a\u7684\u6240\u6709\u66f4\u6539\u5728\u4f60\u63d0\u4ea4\u4e4b\u524d\u90fd\u4e0d\u4f1a\u5199\u5165\u2014\u2014\u5b83\u4eec\u4fdd\u7559\u5728\u56fe\u5c42\u7684\u5185\u5b58\u7f16\u8f91\u7f13\u51b2\u533a\u4e2d\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u4f7f\u7528\u6b64\u529f\u80fd\u2014\u2014\u5b83\u4ec5\u4ec5\u662f\u662f\u77e2\u91cf\u56fe\u5c42\u7f16\u8f91\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8865\u5145\u76f4\u63a5\u4f7f\u7528\u6570\u636e\u63d0\u4f9b\u8005\u3002\u5728\u4e3a\u77e2\u91cf\u56fe\u5c42\u7f16\u8f91\u63d0\u4f9b\u4e00\u4e9bGUI\u5de5\u5177\u65f6\u4f7f\u7528\u6b64\u9009\u9879\uff0c\u56e0\u4e3a\u8fd9\u5c06\u5141\u8bb8\u7528\u6237\u51b3\u5b9a\u662f\u5426\u63d0\u4ea4/\u56de\u6eda\uff0c\u5e76\u5141\u8bb8\u4f7f\u7528\u64a4\u9500/\u91cd\u505a\u3002\u63d0\u4ea4\u66f4\u6539\u540e\uff0c\u7f16\u8f91\u7f13\u51b2\u533a\u4e2d\u7684\u6240\u6709\u66f4\u6539\u90fd\u5c06\u4fdd\u5b58\u5230\u6570\u636e\u63d0\u4f9b\u8005\u4e2d\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u6211\u4eec\u5728\u63d0\u4f9b\u8005\u4e2d\u770b\u5230\u7684\u65b9\u6cd5\uff0c\u4f46\u5b83\u4eec\u5728 QgsVectorLayer \u5bf9\u8c61\u4e0a\u8c03\u7528\u3002 \u4f7f\u8fd9\u4e9b\u65b9\u6cd5\u8d77\u4f5c\u7528\uff0c\u56fe\u5c42\u5fc5\u987b\u5904\u4e8e\u7f16\u8f91\u6a21\u5f0f\u3002\u5f00\u59cb\u7f16\u8f91\u6a21\u5f0f\uff0c\u4f7f\u7528 startEditing() \u65b9\u6cd5\u3002\u505c\u6b62\u7f16\u8f91\uff0c\u4f7f\u7528 commitChanges() \u6216 rollBack() \u65b9\u6cd5\u3002\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u5c06\u63d0\u4ea4\u5bf9\u6570\u636e\u6e90\u7684\u6240\u6709\u66f4\u6539\uff0c\u800c\u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u5c06\u4e22\u5f03\u5b83\u4eec\uff0c\u5e76\u4e14\u4e0d\u4f1a\u4fee\u6539\u6570\u636e\u6e90\u3002 \u786e\u5b9a\u56fe\u5c42\u662f\u5426\u5904\u4e8e\u7f16\u8f91\u6a21\u5f0f\uff0c\u4f7f\u7528 isEditable() \u65b9\u6cd5\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u793a\u4f8b\u6f14\u793a\uff0c\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u7f16\u8f91\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from qgis.PyQt.QtCore import QVariant feat1 = feat2 = QgsFeature ( layer . fields ()) fid = 99 feat1 . setId ( fid ) # \u6dfb\u52a0\u4e24\u4e2a\u8981\u7d20\uff08QgsFeature\u5b9e\u4f8b\uff09 layer . addFeatures ([ feat1 , feat2 ]) # \u5220\u9664\u6307\u5b9aID\u7684\u8981\u7d20 layer . deleteFeature ( fid ) # \u4e3a\u8981\u7d20\u8bbe\u7f6e\u65b0\u51e0\u4f55\uff08QgsGeometry\u5b9e\u4f8b\uff09\u3002 layer . changeGeometry ( fid , geometry ) # \u5c06\u7ed9\u5b9a\u5b57\u6bb5\u7d22\u5f15\uff08int\uff09\u7684\u5c5e\u6027\u66f4\u65b0\u4e3a\u7ed9\u5b9a\u503c fieldIndex = 1 value = 'My new name' layer . changeAttributeValue ( fid , fieldIndex , value ) # \u6dfb\u52a0\u65b0\u7684\u5b57\u6bb5 layer . addAttribute ( QgsField ( \"mytext\" , QVariant . String )) # \u5220\u9664\u5b57\u6bb5 layer . deleteAttribute ( fieldIndex ) \u4e3a\u4e86\u4f7f\u64a4\u6d88/\u91cd\u505a\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e0a\u8ff0\u8c03\u7528\u5fc5\u987b\u5305\u542b\u5728\u64a4\u6d88\u547d\u4ee4\u4e2d\u3002\uff08\u5982\u679c\u4f60\u4e0d\u5173\u5fc3\u64a4\u6d88/\u91cd\u505a\u5e76\u5e0c\u671b\u7acb\u5373\u5b58\u50a8\u66f4\u6539\uff0c\u90a3\u4e48\u901a\u8fc7 6.4 \u4fee\u6539\u77e2\u91cf\u56fe\u5c42 \uff0c\u4f60\u5c06\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u5b8c\u6210\u5de5\u4f5c \u3002\uff09 \u4ee5\u4e0b\u662f\u4f7f\u7528\u64a4\u6d88\u529f\u80fd\u7684\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 layer . beginEditCommand ( \"Feature triangulation\" ) # ...\u8c03\u7528\u56fe\u5c42\u7684\u7f16\u8f91\u65b9\u6cd5...... if problem_occurred : layer . destroyEditCommand () return # ...\u66f4\u591a\u7f16\u8f91... layer . endEditCommand () beginEditCommand() \u65b9\u6cd5\u5c06\u521b\u5efa\u4e00\u4e2a\u5185\u90e8\u201c\u6d3b\u52a8\u201d\u547d\u4ee4\uff0c\u5e76\u8bb0\u5f55\u77e2\u91cf\u56fe\u5c42\u4e2d\u7684\u540e\u7eed\u66f4\u6539\u3002\u968f\u7740\u5bf9 endEditCommand() \u547d\u4ee4\u7684\u8c03\u7528\u88ab\u63a8\u9001\u5230\u64a4\u9500\u6808\uff0c\u7528\u6237\u5c06\u80fd\u591f\u4eceGUI\u64a4\u6d88/\u91cd\u505a\u5b83\u3002\u5982\u679c\u5728\u6267\u884c\u66f4\u6539\u65f6\u51fa\u73b0\u95ee\u9898\uff0c destroyEditCommand() \u65b9\u6cd5\u5c06\u5220\u9664\u8be5\u547d\u4ee4\u5e76\u56de\u6eda\u6b64\u547d\u4ee4\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u65f6\u6240\u505a\u7684\u6240\u6709\u66f4\u6539\u3002 \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 with edit(layer) \u2014\u2014\u5c06\u63d0\u4ea4\u548c\u56de\u6eda\u5305\u88c5\u5728\u66f4\u5177\u8bed\u4e49\u7684\u4ee3\u7801\u5757\u4e2d\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a 1 2 3 4 with edit ( layer ): feat = next ( layer . getFeatures ()) feat [ 0 ] = 5 layer . updateFeature ( feat ) \u7ed3\u675f\u540e\u5c06\u81ea\u52a8\u8c03\u7528 commitChanges() \u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u5f02\u5e38\uff0c\u5b83\u5c06\u8fdb\u884c rollBack() \u6240\u6709\u66f4\u6539\u3002\u5982\u679c commitChanges() \uff08\u5f53\u8be5\u65b9\u6cd5\u8fd4\u56deFalse\u65f6\uff09\u9047\u5230\u95ee\u9898\u5c06\u5f15\u53d1 QgsEditError \u5f02\u5e38\u3002 6.4.5 \u6dfb\u52a0\u548c\u5220\u9664\u5b57\u6bb5 \u2693\ufe0e \u6dfb\u52a0\u5b57\u6bb5\uff08\u5c5e\u6027\uff09\uff0c\u4f60\u9700\u8981\u6307\u5b9a\u5b57\u6bb5\u5b9a\u4e49\u5217\u8868\u3002\u5220\u9664\u5b57\u6bb5\uff0c\u53ea\u9700\u63d0\u4f9b\u5b57\u6bb5\u7d22\u5f15\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 from qgis.PyQt.QtCore import QVariant if caps & QgsVectorDataProvider . AddAttributes : res = layer . dataProvider () . addAttributes ( [ QgsField ( \"mytext\" , QVariant . String ), QgsField ( \"myint\" , QVariant . Int )]) if caps & QgsVectorDataProvider . DeleteAttributes : res = layer . dataProvider () . deleteAttributes ([ 0 ]) 1 2 3 4 5 6 7 8 9 10 11 12 # \u5220\u9664\u5b57\u6bb5\u7684\u5907\u7528\u65b9\u6cd5 # \u9996\u5148\u521b\u5efa\u8981\u5220\u9664\u7684\u4e34\u65f6\u5b57\u6bb5 (f1-3) layer . dataProvider () . addAttributes ([ QgsField ( \"f1\" , QVariant . Int ), QgsField ( \"f2\" , QVariant . Int ), QgsField ( \"f3\" , QVariant . Int )]) layer . updateFields () count = layer . fields () . count () # \u56fe\u5c42\u5b57\u6bb5\u4e2a\u6570 ind_list = list (( count - 3 , count - 2 )) # \u521b\u5efa\u5217\u8868 # \u4f7f\u7528\u7d22\u5f15\u5220\u9664\u5b57\u6bb5 layer . dataProvider () . deleteAttributes ([ count - 1 ]) # \u4f7f\u7528\u7d22\u5f15\u5217\u8868\u5220\u9664\u591a\u4e2a\u5b57\u6bb5 layer . dataProvider () . deleteAttributes ( ind_list ) \u5728\u6570\u636e\u63d0\u4f9b\u7a0b\u8005\u4e2d\u6dfb\u52a0\u6216\u5220\u9664\u5b57\u6bb5\u540e\uff0c\u9700\u8981\u66f4\u65b0\u56fe\u5c42\u7684\u5b57\u6bb5\uff0c\u56e0\u4e3a\u66f4\u6539\u4e0d\u4f1a\u81ea\u52a8\u4f20\u64ad\u3002 1 layer . updateFields () \u63d0\u793a \u4f7f\u7528 with \u8bed\u53e5\u76f4\u63a5\u4fdd\u5b58\u66f4\u6539 \u4f7f\u7528 with edit(layer): \u66f4\u6539\u5c06\u5728\u7ed3\u675f\u540e\u8c03\u7528 commitChanges() \u81ea\u52a8\u63d0\u4ea4\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u5f02\u5e38\uff0c\u5b83\u5c06 rollBack() \u6240\u6709\u66f4\u6539\u3002\u8bf7\u53c2\u89c1 6.4.4 \u4f7f\u7528\u7f16\u8f91\u7f13\u51b2\u533a\u4fee\u6539\u77e2\u91cf\u56fe\u5c42 6.5 \u4f7f\u7528\u7a7a\u95f4\u7d22\u5f15 \u2693\ufe0e \u5982\u679c\u9700\u8981\u5bf9\u77e2\u91cf\u56fe\u5c42\u8fdb\u884c\u9891\u7e41\u67e5\u8be2\uff0c\u7a7a\u95f4\u7d22\u5f15\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u4ee3\u7801\u7684\u6027\u80fd\u3002\u4f8b\u5982\uff0c\u60f3\u8c61\u4e00\u4e0b\uff0c\u4f60\u6b63\u5728\u7f16\u5199\u63d2\u503c\u7b97\u6cd5\uff0c\u5e76\u4e14\u5bf9\u4e8e\u7ed9\u5b9a\u4f4d\u7f6e\u4f60\u9700\u8981\u77e5\u9053\u70b9\u56fe\u5c42\u4e2d\u6700\u8fd1\u768410\u4e2a\u70b9\uff0c\u4ee5\u4fbf\u4f7f\u7528\u8fd9\u4e9b\u70b9\u6765\u8ba1\u7b97\u63d2\u503c\u3002\u5982\u679c\u6ca1\u6709\u7a7a\u95f4\u7d22\u5f15\uff0cQGIS\u627e\u5230\u8fd910\u4e2a\u70b9\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u8ba1\u7b97\u4ece\u6bcf\u4e2a\u70b9\u5230\u6307\u5b9a\u4f4d\u7f6e\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u6bd4\u8f83\u8fd9\u4e9b\u8ddd\u79bb\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u9879\u975e\u5e38\u8017\u65f6\u7684\u4efb\u52a1\uff0c\u7279\u522b\u662f\u5982\u679c\u9700\u8981\u5728\u591a\u4e2a\u4f4d\u7f6e\u91cd\u590d\u8fd9\u9879\u4efb\u52a1\u3002\u5982\u679c\u56fe\u5c42\u5b58\u5728\u7a7a\u95f4\u7d22\u5f15\uff0c\u5219\u64cd\u4f5c\u66f4\u6709\u6548\u3002 \u53ef\u4ee5\u5c06\u6ca1\u6709\u7a7a\u95f4\u7d22\u5f15\u7684\u56fe\u5c42\u89c6\u4e3a\u7535\u8bdd\u7c3f\uff0c\u5176\u4e2d\u4e0d\u5bf9\u7535\u8bdd\u53f7\u7801\u8fdb\u884c\u6392\u5e8f\u6216\u7d22\u5f15\u3002\u627e\u5230\u7ed9\u5b9a\u4eba\u5458\u7684\u7535\u8bdd\u53f7\u7801\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u4ece\u5934\u5f00\u59cb\u9605\u8bfb\uff0c\u76f4\u5230\u627e\u5230\u5b83\u4e3a\u6b62\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cQGIS\u77e2\u91cf\u56fe\u5c42\u4e0d\u4f1a\u521b\u5efa\u7a7a\u95f4\u7d22\u5f15\uff0c\u4f46\u4f60\u53ef\u4ee5\u8f7b\u677e\u521b\u5efa\u5b83\u4eec\u3002\u8fd9\u662f\u4f60\u8981\u505a\u7684\uff1a \u4f7f\u7528 QgsSpatialIndex \u7c7b\u521b\u5efa\u7a7a\u95f4\u7d22\u5f15\uff1a 1 index = QgsSpatialIndex () \u5411\u7d22\u5f15\u6dfb\u52a0\u8981\u7d20\u2014\u2014\u7d22\u5f15\u83b7\u53d6 QgsFeature \u5bf9\u8c61\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u5185\u90e8\u6570\u636e\u7ed3\u6784\u3002\u4f60\u53ef\u4ee5\u624b\u52a8\u521b\u5efa\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5148\u524d\u63d0\u4f9b\u8005\u7684 getFeatures() \u65b9\u6cd5\u3002 1 index . insertFeature ( feat ) \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u6279\u91cf\u52a0\u8f7d\u56fe\u5c42\u7684\u6240\u6709\u8981\u7d20 1 index = QgsSpatialIndex ( layer . getFeatures ()) \u4e00\u65e6\u7a7a\u95f4\u7d22\u5f15\u586b\u5145\u4e86\u4e00\u4e9b\u503c\uff0c\u4f60\u5c31\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u67e5\u8be2 1 2 3 4 5 # \u4ee5\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de\u4e94\u4e2a\u6700\u8fd1\u8981\u7d20\u7684ID nearest = index . nearestNeighbor ( QgsPointXY ( 25.4 , 12.7 ), 5 ) # \u4ee5\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de\u4e0e\u77e9\u5f62\u76f8\u4ea4\u7684\u8981\u7d20 intersect = index . intersects ( QgsRectangle ( 22.5 , 15.3 , 23.1 , 17.2 )) \u4f60\u53ef\u4ee5\u4f7f\u7528 QgsSpatialIndexKDBush \u7a7a\u95f4\u7d22\u5f15\u3002\u8fd9\u4e2a\u7a7a\u95f4\u7d22\u5f15\u4e0e\u6807\u51c6\u7a7a\u95f4\u5e93 QgsSpatialIndex \u76f8\u4f3c\uff0c\u4f46\u662f\u6709\u4ee5\u4e0b\u7279\u6027\uff1a **\u4ec5**\u652f\u6301\u652f\u6301\u5355\u70b9\u8981\u7d20 \u9759\u6001 \uff08\u6784\u9020\u540e\u65e0\u6cd5\u5c06\u5176\u4ed6\u8981\u7d20\u6dfb\u52a0\u5230\u7d22\u5f15\uff09 \u66f4\u5feb \u5141\u8bb8\u76f4\u63a5\u68c0\u7d22\u539f\u59cb\u8981\u7d20\u7684\u70b9\uff0c\u800c\u65e0\u9700\u5176\u4ed6\u8981\u7d20\u8bf7\u6c42 \u652f\u6301\u57fa\u4e8e\u771f\u5b9e\u8ddd\u79bb\u7684\u641c\u7d22\uff0c\u5373\u8fd4\u56de\u641c\u7d22\u534a\u5f84\u8303\u56f4\u5185\u7684\u6240\u6709\u70b9 6.6 QgsVectorLayerUtils\u7c7b \u2693\ufe0e QgsVectorLayerUtils \u7c7b\u5305\u542b\u4e00\u4e9b\u975e\u5e38\u6709\u7528\u7684\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u5728\u77e2\u91cf\u56fe\u5c42\u4e2d\u4f7f\u7528\u3002 \u4f8b\u5982\uff0c createFeature() \u65b9\u6cd5\u51c6\u5907\u5c06 QgsFeature \u6dfb\u52a0\u5230\u77e2\u91cf\u5c42\uff0c\u5e76\u4fdd\u7559\u6bcf\u4e2a\u5b57\u6bb5\u7684\u6240\u6709\u6700\u7ec8\u7ea6\u675f\u548c\u9ed8\u8ba4\u503c 1 2 vlayer = QgsVectorLayer ( \"testdata/airports.shp\" , \"airports\" , \"ogr\" ) feat = QgsVectorLayerUtils . createFeature ( vlayer ) \u4f7f\u7528 getValues() \u65b9\u6cd5\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u5b57\u6bb5\u6216\u8868\u8fbe\u5f0f\u7684\u503c\uff1a 1 2 3 4 5 6 7 vlayer = QgsVectorLayer ( \"testdata/airports.shp\" , \"airports\" , \"ogr\" ) # \u53ea\u9009\u62e9\u7b2c\u4e00\u4e2a\u8981\u7d20 vlayer . selectByIds ([ 1 ]) val = QgsVectorLayerUtils . getValues ( vlayer , \"NAME\" , selectedOnly = True ) print ( val ) # (['AMBLER'], True) 6.7 \u521b\u5efa\u77e2\u91cf\u56fe\u5c42 \u2693\ufe0e \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u751f\u6210\u77e2\u91cf\u56fe\u5c42\u6570\u636e\u96c6\uff1a QgsVectorFileWriter \u7c7b\uff1a\u7528\u4e8e\u5c06\u77e2\u91cf\u6587\u4ef6\u5199\u5165\u786c\u76d8\uff0c\u901a\u8fc7\u9759\u6001\u8c03\u7528 writeAsVectorFormat() \u4fdd\u5b58\u6574\u4e2a\u77e2\u91cf\u56fe\u5c42\uff0c\u6216\u521b\u5efa\u8be5\u7c7b\u7684\u5b9e\u4f8b\u5e76\u8c03\u7528 addFeature() \u65b9\u6cd5\u3002\u8be5\u7c7b\u652f\u6301OGR\u652f\u6301\u7684\u6240\u6709\u77e2\u91cf\u683c\u5f0f\uff08GeoPackage\uff0cShapefile\uff0cGeoJSON\uff0cKML\u7b49\uff09\u3002 QgsVectorLayer \u7c7b\uff1a\u5b9e\u4f8b\u5316\u4e00\u4e2a\u6570\u636e\u63d0\u4f9b\u8005\uff0c\u63d0\u4f9b\u7684\u6570\u636e\u6e90\u8def\u5f84\uff08url\uff09\u4ee5\u8fde\u63a5\u548c\u8bbf\u95ee\u6570\u636e\u3002\u5b83\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u4e34\u65f6\u7684\u3001\u57fa\u4e8e\u5185\u5b58\u5b58\u50a8\u7684\u56fe\u5c42\uff08 memory \uff09\uff0c\u8fd8\u53ef\u4ee5\u8fde\u63a5\u5230OGR\u6570\u636e\u96c6\uff08 ogr \uff09\uff0c\u6570\u636e\u5e93\uff08 postgres \uff0c spatialite \uff0c mysql \uff0c mssql \uff09\uff0c\u66f4\u591a\uff08 wfs \uff0c gpx \uff0c delimitedtext ...\uff09\u3002 6.7.1 \u4ece QgsVectorFileWriter \u5b9e\u4f8b\u521b\u5efa \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 # SaveVectorOptions\u5305\u542b\u5f88\u591a\u8bbe\u7f6e\u9879 save_options = QgsVectorFileWriter . SaveVectorOptions () transform_context = QgsProject . instance () . transformContext () # \u5199\u5165GeoPackage (\u9ed8\u8ba4) error = QgsVectorFileWriter . writeAsVectorFormatV2 ( layer , \"testdata/my_new_file.gpkg\" , transform_context , save_options ) if error [ 0 ] == QgsVectorFileWriter . NoError : print ( \"success!\" ) else : print ( error ) 1 2 3 4 5 6 7 8 9 10 11 12 13 # \u4f7f\u7528utf-8\u7f16\u7801\u5199\u5165ESRI Shapefile save_options = QgsVectorFileWriter . SaveVectorOptions () save_options . driverName = \"ESRI Shapefile\" save_options . fileEncoding = \"UTF-8\" transform_context = QgsProject . instance () . transformContext () error = QgsVectorFileWriter . writeAsVectorFormatV2 ( layer , \"testdata/my_new_shapefile\" , transform_context , save_options ) if error [ 0 ] == QgsVectorFileWriter . NoError : print ( \"success again!\" ) else : print ( error ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # \u5199\u5165ESRI GDB\u6587\u4ef6 save_options = QgsVectorFileWriter . SaveVectorOptions () save_options . driverName = \"FileGDB\" # \u8bd1\u8005\u6ce8\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6ca1\u6709FileGDB\u9a71\u52a8 # \u5982\u679c\u6ca1\u6709\u51e0\u4f55 save_options . overrideGeometryType = QgsWkbTypes . Unknown save_options . actionOnExistingFile = QgsVectorFileWriter . CreateOrOverwriteLayer save_options . layerName = 'my_new_layer_name' transform_context = QgsProject . instance () . transformContext () gdb_path = \"testdata/my_example.gdb\" error = QgsVectorFileWriter . writeAsVectorFormatV2 ( layer , gdb_path , transform_context , save_options ) if error [ 0 ] == QgsVectorFileWriter . NoError : print ( \"success!\" ) else : print ( error ) \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 FieldValueConverter \u8f6c\u6362\u5b57\u6bb5\u4f7f\u5176\u4e0e\u4e0d\u540c\u683c\u5f0f\u517c\u5bb9\u3002\u4f8b\u5982\uff0c\u8981\u5c06\u6570\u7ec4\u53d8\u91cf\u7c7b\u578b\uff08\u4f8b\u5982\u5728Postgres\u4e2d\uff09\u8f6c\u6362\u4e3a\u6587\u672c\u7c7b\u578b\uff0c\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 LIST_FIELD_NAME = 'xxxx' class ESRIValueConverter ( QgsVectorFileWriter . FieldValueConverter ): def __init__ ( self , layer , list_field ): QgsVectorFileWriter . FieldValueConverter . __init__ ( self ) self . layer = layer self . list_field_idx = self . layer . fields () . indexFromName ( list_field ) def convert ( self , fieldIdxInLayer , value ): if fieldIdxInLayer == self . list_field_idx : return QgsListFieldFormatter () . representValue ( layer = vlayer , fieldIndex = self . list_field_idx , config = {}, cache = None , value = value ) else : return value def fieldDefinition ( self , field ): idx = self . layer . fields () . indexFromName ( field . name ()) if idx == self . list_field_idx : return QgsField ( LIST_FIELD_NAME , QVariant . String ) else : return self . layer . fields ()[ idx ] converter = ESRIValueConverter ( vlayer , LIST_FIELD_NAME ) opts = QgsVectorFileWriter . SaveVectorOptions () opts . fieldValueConverter = converter \u8fd8\u53ef\u4ee5\u6307\u5b9a\u76ee\u6807CRS\u2014\u2014\u5982\u679c\u5c06\u4e00\u4e2a\u6709\u6548\u7684 QgsCoordinateReferenceSystem \u5b9e\u4f8b\u4f5c\u4e3a\u7b2c\u56db\u4e2a\u53c2\u6570\uff0c\u5219\u5c06\u8be5\u56fe\u5c42\u8f6c\u6362\u4e3a\u8fd9\u4e2aCRS\u3002 \u6709\u5173\u6709\u6548\u7684\u9a71\u52a8\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u8bf7\u8c03\u7528 supportedFiltersAndFormats \u65b9\u6cd5\u6216\u67e5\u9605 OGR\u652f\u6301\u7684\u683c\u5f0f \u2014\u2014\u4f60\u5e94\u8be5\u5c06\u201cCode\u201d\u5217\u4e2d\u7684\u503c\u4f5c\u4e3a\u9a71\u52a8\u7a0b\u5e8f\u540d\u79f0\u4f20\u9012\u3002 \uff08\u53ef\u9009\uff09\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u662f\u4ec5\u5bfc\u51fa\u9009\u4e2d\u7684\u8981\u7d20\uff0c\u4f20\u9012\u66f4\u591a\u9a71\u52a8\u7a0b\u5e8f\u7279\u5b9a\u7684\u9009\u9879\u8fdb\u884c\u521b\u5efa\uff0c\u6216\u8005\u544a\u8bc9\u6570\u636e\u5199\u5165\u7c7b\u4e0d\u8981\u521b\u5efa\u5c5e\u6027...\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\uff08\u53ef\u9009\uff09\u53c2\u6570; \u8bf7\u53c2\u9605 QgsVectorFileWriter \u7684\u8be6\u7ec6\u4fe1\u606f 6.7.2 \u76f4\u63a5\u4ece\u8981\u7d20\u521b\u5efa \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 from qgis.PyQt.QtCore import QVariant # \u4e3a\u8981\u7d20\u5c5e\u6027\u5b9a\u4e49\u5b57\u6bb5\u3002\u9700\u8981QgsFields\u5bf9\u8c61 fields = QgsFields () fields . append ( QgsField ( \"first\" , QVariant . Int )) fields . append ( QgsField ( \"second\" , QVariant . String )) \"\"\" \u521b\u5efa\u4e00\u4e2a\u77e2\u91cf\u6587\u4ef6\u7f16\u5199\u5668\u7684\u5b9e\u4f8b\uff0c\u5b83\u5c06\u521b\u5efa\u77e2\u91cf\u6587\u4ef6 \u53c2\u6570\uff1a 1. \u65b0\u6587\u4ef6\u7684\u8def\u5f84\uff08\u5982\u679c\u5df2\u5b58\u5728\u5219\u5931\u8d25\uff09 2. \u5b57\u6bb5\u6620\u5c04 3. \u51e0\u4f55\u7c7b\u578b - WKBTYPE\u679a\u4e3e 4. \u56fe\u5c42\u7684\u7a7a\u95f4\u53c2\u8003\uff08QgsCoordinateReferenceSystem\u7684\u5b9e\u4f8b\uff09 5. \u5750\u6807\u8f6c\u6362\u4e0a\u4e0b\u6587 6. \u8f93\u51fa\u9009\u9879\uff08\u9a71\u52a8\u540d\u79f0\uff0c\u7f16\u7801\u7b49\uff09 \"\"\" crs = QgsProject . instance () . crs () transform_context = QgsProject . instance () . transformContext () save_options = QgsVectorFileWriter . SaveVectorOptions () save_options . driverName = \"ESRI Shapefile\" save_options . fileEncoding = \"UTF-8\" writer = QgsVectorFileWriter . create ( \"testdata/my_new_shapefile.shp\" , fields , QgsWkbTypes . Point , crs , transform_context , save_options ) if writer . hasError () != QgsVectorFileWriter . NoError : print ( \"Error when creating shapefile: \" , writer . errorMessage ()) # \u6dfb\u52a0\u4e00\u4e2a\u8981\u7d20 fet = QgsFeature () fet . setGeometry ( QgsGeometry . fromPointXY ( QgsPointXY ( 10 , 10 ))) fet . setAttributes ([ 1 , \"text\" ]) writer . addFeature ( fet ) # \u5220\u9664writer\u5199\u5165\u5230\u78c1\u76d8 del writer 6.7.3 \u4ece QgsVectorLayer \u5b9e\u4f8b\u521b\u5efa \u2693\ufe0e \u5728 QgsVectorLayer \u7c7b\u652f\u6301\u7684\u6240\u6709\u6570\u636e\u63d0\u4f9b\u8005\u4e2d\uff0c\u8ba9\u6211\u4eec\u5173\u6ce8\u57fa\u4e8e\u5185\u5b58\u7684\u56fe\u5c42\u3002\u5185\u5b58\u63d0\u4f9b\u8005\u4e3b\u8981\u4f9b\u63d2\u4ef6\u6216\u7b2c\u4e09\u65b9\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u3002\u5b83\u4e0d\u4f1a\u5c06\u6570\u636e\u5b58\u50a8\u5728\u78c1\u76d8\u4e2d\uff0c\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u5feb\u901f\u5728\u540e\u53f0\u4f7f\u7528\u4e34\u65f6\u56fe\u5c42\u3002 \u63d0\u4f9b\u8005\u652f\u6301string\uff0cint\u548cdouble\u5b57\u6bb5\u3002 \u5185\u5b58\u63d0\u4f9b\u8005\u8fd8\u652f\u6301\u7a7a\u95f4\u7d22\u5f15\uff0c\u901a\u8fc7\u8c03\u7528\u63d0\u4f9b\u8005\u7684 createSpatialIndex() \u65b9\u6cd5\u6765\u542f\u7528\u3002\u521b\u5efa\u7a7a\u95f4\u7d22\u5f15\u540e\uff0c\u4f60\u5c06\u80fd\u591f\u66f4\u5feb\u5730\u8fed\u4ee3\u8f83\u5c0f\u533a\u57df\u5185\u7684\u8981\u7d20\uff08\u56e0\u4e3a\u6ca1\u6709\u5fc5\u8981\u904d\u5386\u6240\u6709\u8981\u7d20\uff0c\u53ea\u904d\u5386\u6307\u5b9a\u77e9\u5f62\u5185\u7684\u8981\u7d20\uff09\u3002 \u901a\u8fc7\u5c06 \"memory\" \u4f5c\u4e3a QgsVectorLayer \u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u6765\u521b\u5efa\u5185\u5b58\u63d0\u4f9b\u8005\u3002 \u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u4e5f\u9700\u8981\u5b9a\u4e49\u56fe\u5c42\u51e0\u4f55\u7c7b\u578b\u7684URI\uff0c\u5305\u62ec\uff1a \"Point\" \uff0c \"LineString\" \uff0c \"Polygon\" \uff0c \"MultiPoint\" \uff0c \"MultiLineString\" \uff0c \"MultiPolygon\" or \"None\" \u3002 URI\u8fd8\u53ef\u4ee5\u6307\u5b9a\u5750\u6807\u53c2\u8003\u7cfb\u7edf\u3001\u5b57\u6bb5\u548c\u7d22\u5f15\u3002\u8bed\u6cd5\u662f\uff1a crs=definition \u6307\u5b9a\u5750\u6807\u53c2\u8003\u7cfb\u7edf\uff0c\u5176\u4e2d\u5b9a\u4e49\u53ef\u4ee5\u662f\u63a5\u53d7\u7684\u4efb\u4f55\u5f62\u5f0f QgsCoordinateReferenceSystem.createFromString() index=yes \u6307\u5b9a\u63d0\u4f9b\u8005\u5c06\u4f7f\u7528\u7a7a\u95f4\u7d22\u5f15 field=name:type(length,precision) \u6307\u5b9a\u56fe\u5c42\u7684\u5c5e\u6027\u3002\u8be5\u5c5e\u6027\u5177\u6709\u540d\u79f0\uff0c\u53ef\u9009\u7684\u7c7b\u578b\uff08integer, double, or string\uff09\uff0c\u957f\u5ea6\u548c\u7cbe\u5ea6\u3002\u53ef\u80fd\u6709\u591a\u4e2a\u5b57\u6bb5\u5b9a\u4e49\u3002 \u4ee5\u4e0bURI\u793a\u4f8b\u5305\u542b\u6240\u6709\u8fd9\u4e9b\u9009\u9879 1 \"Point?crs=epsg:4326&field=id:integer&field=name:string(20)&index=yes\" \u4ee5\u4e0b\u793a\u4f8b\u4ee3\u7801\u8bf4\u660e\u4e86\u5982\u4f55\u521b\u5efa\u548c\u586b\u5145\u5185\u5b58\u63d0\u4f9b\u8005 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from qgis.PyQt.QtCore import QVariant # \u521b\u5efa\u56fe\u5c42 vl = QgsVectorLayer ( \"Point\" , \"temporary_points\" , \"memory\" ) pr = vl . dataProvider () # \u6dfb\u52a0\u5b57\u6bb5 pr . addAttributes ([ QgsField ( \"name\" , QVariant . String ), QgsField ( \"age\" , QVariant . Int ), QgsField ( \"size\" , QVariant . Double )]) vl . updateFields () # \u544a\u8bc9\u77e2\u91cf\u56fe\u5c42\u4ece\u63d0\u4f9b\u8005\u83b7\u53d6\u66f4\u6539 # \u6dfb\u52a0\u4e00\u4e2a\u8981\u7d20 fet = QgsFeature () fet . setGeometry ( QgsGeometry . fromPointXY ( QgsPointXY ( 10 , 10 ))) fet . setAttributes ([ \"Johny\" , 2 , 0.3 ]) pr . addFeatures ([ fet ]) # \u5728\u6dfb\u52a0\u65b0\u8981\u7d20\u65f6\u66f4\u65b0\u56fe\u5c42\u7684\u8303\u56f4\uff0c\u56e0\u4e3a\u63d0\u4f9b\u8005\u4e2d\u7684\u8303\u56f4\u66f4\u6539\u4e0d\u4f1a\u4f20\u64ad\u5230\u56fe\u5c42 vl . updateExtents () \u6700\u540e\uff0c\u8ba9\u6211\u4eec\u68c0\u67e5\u4e00\u5207\u662f\u5426\u987a\u5229 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # \u663e\u793a\u4e00\u4e9b\u7edf\u8ba1 print ( \"fields:\" , len ( pr . fields ())) print ( \"features:\" , pr . featureCount ()) e = vl . extent () print ( \"extent:\" , e . xMinimum (), e . yMinimum (), e . xMaximum (), e . yMaximum ()) # \u904d\u5386\u8981\u7d20 features = vl . getFeatures () for fet in features : print ( \"F:\" , fet . id (), fet . attributes (), fet . geometry () . asPoint ()) # fields: 3 # features: 1 # extent: 10.0 10.0 10.0 10.0 # F: 1 ['Johny', 2, 0.3] <QgsPointXY: POINT(10 10)> 6.8 \u77e2\u91cf\u56fe\u5c42\u7684\u5916\u89c2\uff08\u7b26\u53f7\u7cfb\u7edf\uff09 \u2693\ufe0e \u6e32\u67d3\u77e2\u91cf\u56fe\u5c42\u65f6\uff0c\u6570\u636e\u7684\u5916\u89c2\u7531**\u6e32\u67d3\u5668**\u548c\u4e0e\u56fe\u5c42\u76f8\u5173\u8054\u7684**\u7b26\u53f7**\u63d0\u4f9b \u3002\u7b26\u53f7\u662f\u4e00\u4e2a\u7c7b\u2014\u2014\u8d1f\u8d23\u7ed8\u5236\u8981\u7d20\u7684\u53ef\u89c6\u5316\uff0c\u800c\u6e32\u67d3\u5668\u786e\u5b9a\u7528\u4e8e\u7279\u5b9a\u8981\u7d20\u7684\u7b26\u53f7\u3002 \u83b7\u5f97\u56fe\u5c42\u7684\u6e32\u67d3\u5668\uff0c\u5982\u4e0b\u6240\u793a\uff1a 1 renderer = layer . renderer () \u6709\u4e86\u8fd9\u4e2a\u53c2\u8003\uff0c\u8ba9\u6211\u4eec\u6765\u63a2\u8ba8\u4e00\u4e0b 1 2 print ( \"Type:\" , renderer . type ()) # Type: singleSymbol QGIS\u6838\u5fc3\u5e93\u4e2d\u6709\u51e0\u79cd\u5df2\u77e5\u7684\u6e32\u67d3\u5668\u7c7b\u578b\uff1a \u7c7b\u578b \u7c7b \u63cf\u8ff0 singleSymbol QgsSingleSymbolRenderer \u4f7f\u7528\u76f8\u540c\u7684\u7b26\u53f7\u5448\u73b0\u6240\u6709\u8981\u7d20 categorizedSymbol QgsCategorizedSymbolRenderer \u4f7f\u7528\u6bcf\u4e2a\u7c7b\u522b\u7684\u4e0d\u540c\u7b26\u53f7\u5448\u73b0\u8981\u7d20 graduatedSymbol QgsGraduatedSymbolRenderer \u4e3a\u6bcf\u4e2a\u503c\u8303\u56f4\u4f7f\u7528\u4e0d\u540c\u7684\u7b26\u53f7\u5448\u73b0\u8981\u7d20 \u53ef\u80fd\u8fd8\u6709\u4e00\u4e9b\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\u7c7b\u578b\uff0c\u6240\u4ee5\u6c38\u8fdc\u4e0d\u8981\u5047\u8bbe\u53ea\u6709\u8fd9\u4e9b\u7c7b\u578b\u3002\u4f60\u53ef\u4ee5\u67e5\u8be2 QgsApplication \u7684 QgsRendererRegistry \u65b9\u6cd5\u67e5\u627e\u5f53\u524d\u53ef\u7528\u7684\u6e32\u67d3\u5668\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 print ( QgsApplication . rendererRegistry () . renderersList ()) # Print: [ 'nullSymbol' , 'singleSymbol' , 'categorizedSymbol' , 'graduatedSymbol' , 'RuleRenderer' , 'pointDisplacement' , 'pointCluster' , 'invertedPolygonRenderer' , 'heatmapRenderer' , '25dRenderer' ] \u53ef\u4ee5\u4ee5\u6587\u672c\u5f62\u5f0f\u83b7\u53d6\u6e32\u67d3\u5668\u7684\u5185\u5bb9\u2014\u2014\u53ef\u7528\u4e8e\u8c03\u8bd5 1 2 print ( renderer . dump ()) # SINGLE: MARKER SYMBOL (1 layers) color 190,207,80,255 6.8.1 \u5355\u4e00\u7b26\u53f7\u6e32\u67d3\u5668 \u2693\ufe0e \u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 symbol() \u65b9\u6cd5\u83b7\u53d6\u7528\u4e8e\u6e32\u67d3\u7684\u7b26\u53f7\uff0c\u4f7f\u7528 setSymbol() \u65b9\u6cd5\u66f4\u6539\u5b83\uff08C ++\u5f00\u53d1\u4eba\u5458\u6ce8\u610f\uff1a\u6e32\u67d3\u5668\u5c06\u83b7\u53d6\u7b26\u53f7\u7684\u6240\u6709\u6743\u3002\uff09 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 setSymbol() \u5e76\u4f20\u9012\u9002\u5f53\u7684\u7b26\u53f7\u5b9e\u4f8b\u6765\u66f4\u6539\u77e2\u91cf\u56fe\u5c42\u7684\u7b26\u53f7\u3002 \u70b9 \uff0c*\u7ebf*\u548c*\u591a\u8fb9\u5f62*\u56fe\u5c42\u7684\u7b26\u53f7\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u76f8\u5e94\u7684\u7c7b QgsMarkerSymbol \uff0c QgsLineSymbol \u548c QgsFillSymbol \u7684 createSimple() \u65b9\u6cd5\u6765\u521b\u5efa\u3002 \u7ed9\u4f20\u9012 createSimple() \u7684\u5b57\u5178\u53c2\u6570\u6765\u8bbe\u7f6e\u7b26\u53f7\u7684\u6837\u5f0f\u5c5e\u6027\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 setSymbol() \u5e76\u4f20\u9012 QgsMarkerSymbol \u5b9e\u4f8b, \u6765\u66ff\u6362\u7279\u5b9a**\u70b9**\u56fe\u5c42\u7684\u7b26\u53f7\uff0c\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u6240\u793a\uff1a 1 2 3 4 symbol = QgsMarkerSymbol . createSimple ({ 'name' : 'square' , 'color' : 'red' }) layer . renderer () . setSymbol ( symbol ) # \u663e\u793a\u66f4\u6539 layer . triggerRepaint () name \u8868\u793a\u7b26\u53f7\u7684\u5f62\u72b6\uff0c\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4efb\u4f55\u4e00\u79cd\uff1a circle square cross rectangle diamond pentagon triangle equilateral_triangle star regular_star arrow filled_arrowhead x \u83b7\u53d6\u7b26\u53f7\u5b9e\u4f8b\u7684\u7b2c\u4e00\u4e2a\u7b26\u53f7\u56fe\u5c42\u7684\u5b8c\u6574\u5c5e\u6027\u5217\u8868\uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u793a\u4f8b\u4ee3\u7801\u8fdb\u884c\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 print ( layer . renderer () . symbol () . symbolLayers ()[ 0 ] . properties ()) # Prints { 'angle' : '0' , 'color' : '0,128,0,255' , 'horizontal_anchor_point' : '1' , 'joinstyle' : 'bevel' , 'name' : 'circle' , 'offset' : '0,0' , 'offset_map_unit_scale' : '0,0' , 'offset_unit' : 'MM' , 'outline_color' : '0,0,0,255' , 'outline_style' : 'solid' , 'outline_width' : '0' , 'outline_width_map_unit_scale' : '0,0' , 'outline_width_unit' : 'MM' , 'scale_method' : 'area' , 'size' : '2' , 'size_map_unit_scale' : '0,0' , 'size_unit' : 'MM' , 'vertical_anchor_point' : '1' } \u5982\u679c\u8981\u66f4\u6539\u67d0\u4e9b\u5c5e\u6027\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 # \u4f60\u53ef\u4ee5\u66f4\u6539\u5355\u4e2a\u5c5e\u6027... layer . renderer () . symbol () . symbolLayer ( 0 ) . setSize ( 3 ) # ...\u4f46\u5e76\u975e\u6240\u6709\u5c5e\u6027\u90fd\u53ef\u4ee5\u4ece\u65b9\u6cd5\u8bbf\u95ee\uff0c # \u4f60\u4e5f\u53ef\u4ee5\u5b8c\u5168\u66ff\u6362\u7b26\u53f7\uff1a props = layer . renderer () . symbol () . symbolLayer ( 0 ) . properties () props [ 'color' ] = 'yellow' props [ 'name' ] = 'square' layer . renderer () . setSymbol ( QgsMarkerSymbol . createSimple ( props )) # \u663e\u793a\u66f4\u6539 layer . triggerRepaint () 6.8.2 \u5206\u7c7b\u7b26\u53f7\u6e32\u67d3\u5668 \u2693\ufe0e \u4f7f\u7528\u5206\u7c7b\u6e32\u67d3\u5668\u65f6\uff0c\u53ef\u4ee5\u67e5\u8be2\u548c\u8bbe\u7f6e\u7528\u4e8e\u5206\u7c7b\u7684\u5c5e\u6027\uff1a\u4f7f\u7528 classAttribute() \u548c setClassAttribute() \u65b9\u6cd5\u3002 \u83b7\u53d6\u7c7b\u522b\u5217\u8868\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 categorized_renderer = QgsCategorizedSymbolRenderer () # \u6dfb\u52a0\u4e00\u4e9b\u7c7b\u522b cat1 = QgsRendererCategory ( '1' , QgsMarkerSymbol (), 'category 1' ) cat2 = QgsRendererCategory ( '2' , QgsMarkerSymbol (), 'category 2' ) categorized_renderer . addCategory ( cat1 ) categorized_renderer . addCategory ( cat2 ) for cat in categorized_renderer . categories (): print ( \" {} : {} :: {} \" . format ( cat . value (), cat . label (), cat . symbol ())) # 1: category 1 :: <qgis._core.QgsMarkerSymbol object at 0x7f378ffcd9d8> # 2: category 2 :: <qgis._core.QgsMarkerSymbol object at 0x7f378ffcd9d8> \u5176\u4e2d value() \u662f\u7c7b\u522b\u4e4b\u95f4\u7528\u4e8e\u533a\u522b\u7684\u503c\uff0c label() \u662f\u7528\u4e8e\u7c7b\u522b\u63cf\u8ff0\u7684\u6587\u672c\uff0c symbol() \u65b9\u6cd5\u8fd4\u56de\u6240\u5206\u914d\u7684\u7b26\u53f7\u3002 \u6e32\u67d3\u5668\u901a\u5e38\u8fd8\u5b58\u50a8\u7528\u4e8e\u5206\u7c7b\u7684\u539f\u59cb\u7b26\u53f7\u548c\u8272\u5e26\uff1a sourceColorRamp() \u548c sourceSymbol() \u65b9\u6cd5\u3002 6.8.3 \u6e10\u53d8\u7b26\u53f7\u6e32\u67d3\u5668 \u2693\ufe0e \u6b64\u6e32\u67d3\u5668\u4e0e\u4e0a\u9762\u63cf\u8ff0\u7684\u5206\u7c7b\u7b26\u53f7\u6e32\u67d3\u5668\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u5b83\u4e0d\u662f\u6bcf\u4e2a\u7c7b\u7684\u4e00\u4e2a\u5c5e\u6027\u503c\uff0c\u800c\u662f\u4f7f\u7528\u503c\u8303\u56f4\uff0c\u56e0\u6b64\u53ea\u80fd\u7528\u4e8e\u6570\u5b57\u5c5e\u6027\u3002 \u4e86\u89e3\u6709\u5173\u6e32\u67d3\u5668\u4e2d\u4f7f\u7528\u8303\u56f4\u7684\u66f4\u591a\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 graduated_renderer = QgsGraduatedSymbolRenderer () # \u6dfb\u52a0\u4e00\u4e9b\u7c7b\u522b graduated_renderer . addClassRange ( QgsRendererRange ( QgsClassificationRange ( 'class 0-100' , 0 , 100 ), QgsMarkerSymbol ())) graduated_renderer . addClassRange ( QgsRendererRange ( QgsClassificationRange ( 'class 101-200' , 101 , 200 ), QgsMarkerSymbol ())) for ran in renderer . ranges (): print ( \" {} - {} : {} {} \" . format ( ran . lowerValue (), ran . upperValue (), ran . label (), ran . symbol () )) # 0.0 - 100.0: class 0-100 <qgis._core.QgsMarkerSymbol object at 0x7f8bad281b88> # 101.0 - 200.0: class 101-200 <qgis._core.QgsMarkerSymbol object at 0x7f8bad281b88> \u4f60\u53ef\u4ee5\u518d\u6b21\u4f7f\u7528 classAttribute() \uff08\u67e5\u627e\u5206\u7c7b\u5c5e\u6027\u540d\u79f0\uff09 sourceSymbol() \u548c sourceColorRamp() \u65b9\u6cd5\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cd mode() \u65b9\u6cd5\u53ef\u4ee5\u786e\u5b9a\u8303\u56f4\u7684\u521b\u5efa\u65b9\u5f0f\uff1a\u4f7f\u7528\u7b49\u95f4\u9694\uff0c\u5206\u4f4d\u6570\u6216\u5176\u4ed6\u65b9\u6cd5\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u521b\u5efa\u81ea\u5df1\u7684\u6e10\u53d8\u7b26\u53f7\u6e32\u67d3\u5668\uff0c\u5219\u53ef\u4ee5\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5982\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u6bb5\u6240\u793a\uff08\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u4e24\u4e2a\u7c7b\u522b\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from qgis.PyQt import QtGui myVectorLayer = QgsVectorLayer ( myVectorPath , myName , 'ogr' ) myTargetField = 'target_field' myRangeList = [] myOpacity = 1 # \u521b\u5efa\u6211\u4eec\u7684\u7b2c\u4e00\u7b26\u53f7\u548c\u8303\u56f4... myMin = 0.0 myMax = 50.0 myLabel = 'Group 1' myColour = QtGui . QColor ( '#ffee00' ) mySymbol1 = QgsSymbol . defaultSymbol ( myVectorLayer . geometryType ()) mySymbol1 . setColor ( myColour ) mySymbol1 . setOpacity ( myOpacity ) myRange1 = QgsRendererRange ( myMin , myMax , mySymbol1 , myLabel ) myRangeList . append ( myRange1 ) # \u73b0\u5728\u521b\u5efa\u53e6\u4e00\u4e2a\u7b26\u53f7\u548c\u8303\u56f4... myMin = 50.1 myMax = 100 myLabel = 'Group 2' myColour = QtGui . QColor ( '#00eeff' ) mySymbol2 = QgsSymbol . defaultSymbol ( myVectorLayer . geometryType ()) mySymbol2 . setColor ( myColour ) mySymbol2 . setOpacity ( myOpacity ) myRange2 = QgsRendererRange ( myMin , myMax , mySymbol2 , myLabel ) myRangeList . append ( myRange2 ) myRenderer = QgsGraduatedSymbolRenderer ( '' , myRangeList ) myRenderer . setMode ( QgsGraduatedSymbolRenderer . EqualInterval ) myRenderer . setClassAttribute ( myTargetField ) myVectorLayer . setRenderer ( myRenderer ) QgsProject . instance () . addMapLayer ( myVectorLayer ) 6.8.4 \u4f7f\u7528\u7b26\u53f7 \u2693\ufe0e \u5bf9\u4e8e\u7b26\u53f7\u7684\u8868\u793a\uff0c QgsSymbol \u57fa\u7c7b\u6709\u4e09\u4e2a\u6d3e\u751f\u7c7b\uff1a QgsMarkerSymbol \u2014\u2014\u7528\u4e8e\u70b9\u8981\u7d20 QgsLineSymbol \u2014\u2014\u7528\u4e8e\u7ebf\u8981\u7d20 QgsFillSymbol \u2014\u2014\u7528\u4e8e\u9762\u8981\u7d20 \u6bcf\u4e2a\u7b26\u53f7\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u7b26\u53f7\u56fe\u5c42 \uff08\u4ece QgsSymbolLayer \u6d3e\u751f\u7684\u7c7b\uff09\u3002\u7b26\u53f7\u56fe\u5c42\u6267\u884c\u5b9e\u9645\u6e32\u67d3\uff0c\u7b26\u53f7\u7c7b\u672c\u8eab\u4ec5\u7528\u4f5c\u7b26\u53f7\u56fe\u5c42\u7684\u5bb9\u5668\u3002 \u62e5\u6709\u4e00\u4e2a\u7b26\u53f7\u5b9e\u4f8b\uff08\u4f8b\u5982\u6765\u81ea\u6e32\u67d3\u5668\uff09\uff0c\u53ef\u4ee5\u63a2\u7d22\u5b83\uff1a type() \u65b9\u6cd5\u8bf4\u660e\u5b83\u662f\u6807\u8bb0\u3001\u7ebf\u8fd8\u662f\u586b\u5145\u7b26\u53f7\u3002 dump() \u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u7b26\u53f7\u7684\u7b80\u77ed\u63cf\u8ff0\u3002\u83b7\u53d6\u7b26\u53f7\u56fe\u5c42\u5217\u8868\uff1a 1 2 3 4 5 6 marker_symbol = QgsMarkerSymbol () for i in range ( marker_symbol . symbolLayerCount ()): lyr = marker_symbol . symbolLayer ( i ) print ( \" {} : {} \" . format ( i , lyr . layerType ())) # 0: SimpleMarker \u627e\u51fa\u7b26\u53f7\u7684\u989c\u8272\u4f7f\u7528 color() \u65b9\u6cd5\uff0c setColor() \u6539\u53d8\u5176\u989c\u8272\u3002\u4f7f\u7528\u6807\u8bb0\u7b26\u53f7\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 size() \u548c angle() \u65b9\u6cd5\u67e5\u8be2\u7b26\u53f7\u5927\u5c0f\u548c\u65cb\u8f6c\u3002\u5bf9\u4e8e\u7ebf\u7b26\u53f7\uff0c width() \u65b9\u6cd5\u8fd4\u56de\u7ebf\u5bbd\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5927\u5c0f\u548c\u5bbd\u5ea6\u4ee5\u6beb\u7c73\u4e3a\u5355\u4f4d\uff0c\u89d2\u5ea6\u4ee5\u5ea6\u4e3a\u5355\u4f4d\u3002 6.8.4.1 \u4f7f\u7528\u7b26\u53f7\u56fe\u5c42 \u2693\ufe0e \u5982\u524d\u6240\u8ff0\uff0c\u7b26\u53f7\u5c42\uff08 QgsSymbolLayer \u7684\u5b50\u7c7b\uff09\u51b3\u5b9a\u8981\u7d20\u7684\u5916\u89c2\u3002\u6709\u4e00\u4e9b\u57fa\u672c\u7684\u7b26\u53f7\u56fe\u5c42\u7c7b\u7528\u4e8e\u4e00\u822c\u7528\u9014\u3002\u53ef\u4ee5\u5b9e\u73b0\u65b0\u7684\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\uff0c\u4efb\u610f\u5b9a\u5236\u8981\u7d20\u7684\u5448\u73b0\u65b9\u5f0f\u3002 layerType() \u65b9\u6cd5\u552f\u4e00\u6807\u8bc6\u7b26\u53f7\u56fe\u5c42\u7c7b\u2014\u2014\u57fa\u672c\u7c7b\u548c\u9ed8\u8ba4\u7c7b SimpleMarker \uff0c SimpleLine \u4ee5\u53ca SimpleFill \u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u83b7\u53d6\u53ef\u4ee5\u4e3a\u7b26\u53f7\u56fe\u5c42\u521b\u5efa\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\u7684\u5b8c\u6574\u5217\u8868\uff1a 1 2 3 4 5 from qgis.core import QgsSymbolLayerRegistry myRegistry = QgsApplication . symbolLayerRegistry () myMetadata = myRegistry . symbolLayerMetadata ( \"SimpleFill\" ) for item in myRegistry . symbolLayersForType ( QgsSymbol . Marker ): print ( item ) \u8f93\u51fa\uff1a 1 2 3 4 5 6 7 EllipseMarker FilledMarker FontMarker GeometryGenerator SimpleMarker SvgMarker VectorField QgsSymbolLayerRegistry \u7c7b\u7ba1\u7406\u4e00\u4e2a\u6240\u6709\u53ef\u7528\u7b26\u53f7\u5c42\u7c7b\u578b\u7684\u6570\u636e\u5e93\u3002 \u8bbf\u95ee\u7b26\u53f7\u56fe\u5c42\u6570\u636e\uff0c\u4f7f\u7528 properties() \u65b9\u6cd5\u8fd4\u56de\u5c5e\u6027\u7684\u952e\u503c\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u51b3\u5b9a\u5916\u89c2\u3002\u6bcf\u4e2a\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\u90fd\u6709\u4e00\u7ec4\u7279\u5b9a\u7684\u5c5e\u6027\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u901a\u7528\u7684\u65b9\u6cd5 color() \uff0c size() \uff0c angle() \u548c width() \u3002\u5f53\u7136\uff0c\u5c3a\u5bf8\u548c\u89d2\u5ea6\u4ec5\u9002\u7528\u4e8e\u6807\u8bb0\u7b26\u53f7\u56fe\u5c42\uff0c\u5bbd\u5ea6\u9002\u7528\u4e8e\u7ebf\u7b26\u53f7\u56fe\u5c42\u3002 6.8.4.2 \u521b\u5efa\u81ea\u5b9a\u4e49\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b \u2693\ufe0e \u60f3\u8c61\u4e00\u4e0b\uff0c\u4f60\u60f3\u8981\u81ea\u5b9a\u4e49\u6570\u636e\u7684\u5448\u73b0\u65b9\u5f0f\u3002\u4f60\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u7b26\u53f7\u56fe\u5c42\u7c7b\uff0c\u5b8c\u5168\u6309\u7167\u4f60\u7684\u610f\u613f\u7ed8\u5236\u8981\u7d20\u3002\u4ee5\u4e0b\u662f\u7ed8\u5236\u5177\u6709\u6307\u5b9a\u534a\u5f84\u7684\u7ea2\u8272\u5706\u5708\u7684\u6807\u8bb0\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 from qgis.core import QgsMarkerSymbolLayer from qgis.PyQt.QtGui import QColor class FooSymbolLayer ( QgsMarkerSymbolLayer ): def __init__ ( self , radius = 4.0 ): QgsMarkerSymbolLayer . __init__ ( self ) self . radius = radius self . color = QColor ( 255 , 0 , 0 ) def layerType ( self ): return \"FooMarker\" def properties ( self ): return { \"radius\" : str ( self . radius ) } def startRender ( self , context ): pass def stopRender ( self , context ): pass def renderPoint ( self , point , context ): # \u6e32\u67d3\u53d6\u51b3\u4e8e\u662f\u5426\u9009\u62e9\u4e86\u7b26\u53f7 (QGIS >= 1.5) color = context . selectionColor () if context . selected () else self . color p = context . renderContext () . painter () p . setPen ( color ) p . drawEllipse ( point , self . radius , self . radius ) def clone ( self ): return FooSymbolLayer ( self . radius ) layerType() \u65b9\u6cd5\u786e\u5b9a\u7b26\u53f7\u56fe\u5c42\u7684\u540d\u79f0\uff0c\u5b83\u5fc5\u987b\u5728\u6240\u6709\u7b26\u53f7\u5c42\u4e2d\u662f\u552f\u4e00\u7684\u3002 properties() \u65b9\u6cd5\u7528\u4e8e\u5c5e\u6027\u7684\u6301\u4e45\u5316\u3002 clone() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u7b26\u53f7\u56fe\u5c42\u7684\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u5c5e\u6027\u5b8c\u5168\u76f8\u540c\u3002\u6700\u540e\uff0c\u6e32\u67d3\u65b9\u6cd5\uff1a startRender() \u5728\u6e32\u67d3\u7b2c\u4e00\u4e2a\u8981\u7d20\u4e4b\u524d\u88ab\u8c03\u7528\uff0c stopRender() \u6e32\u67d3\u5b8c\u6210\u65f6\u88ab\u8c03\u7528\uff0c renderPoint() \u6e32\u67d3\u65f6\u88ab\u8c03\u7528\u3002\u70b9\u7684\u5750\u6807\u5df2\u7ecf\u8f6c\u6362\u4e3a\u8f93\u51fa\u5750\u6807\u3002 \u5bf9\u4e8e\u7ebf\u548c\u591a\u8fb9\u5f62\uff0c\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u6e32\u67d3\u65b9\u6cd5\uff1a\u4f60\u5c06\u4f7f\u7528 renderPolyline() \u63a5\u6536\u7ebf\u5217\u8868\uff0c renderPolygon() \u63a5\u6536\u5916\u73af\u4e0a\u7684\u70b9\u5217\u8868\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u548c\u5185\u73af\u5217\u8868\uff08\u6216None\uff09\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002 \u901a\u5e38\u53ef\u4ee5\u4fbf\u5229\u5730\u6dfb\u52a0\u7528\u4e8e\u8bbe\u7f6e\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\u5c5e\u6027\u7684GUI\uff0c\u4ee5\u5141\u8bb8\u7528\u6237\u81ea\u5b9a\u4e49\u5916\u89c2\uff1a\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u7528\u6237\u8bbe\u7f6e\u5706\u534a\u5f84\u3002\u4ee5\u4e0b\u4ee3\u7801\u5b9e\u73b0\u4e86\u8fd9\u6837\u7684\u63a7\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 from qgis.gui import QgsSymbolLayerWidget class FooSymbolLayerWidget ( QgsSymbolLayerWidget ): def __init__ ( self , parent = None ): QgsSymbolLayerWidget . __init__ ( self , parent ) self . layer = None # \u8bbe\u7f6e\u7b80\u5355\u7684UI self . label = QLabel ( \"Radius:\" ) self . spinRadius = QDoubleSpinBox () self . hbox = QHBoxLayout () self . hbox . addWidget ( self . label ) self . hbox . addWidget ( self . spinRadius ) self . setLayout ( self . hbox ) self . connect ( self . spinRadius , SIGNAL ( \"valueChanged(double)\" ), \\ self . radiusChanged ) def setSymbolLayer ( self , layer ): if layer . layerType () != \"FooMarker\" : return self . layer = layer self . spinRadius . setValue ( layer . radius ) def symbolLayer ( self ): return self . layer def radiusChanged ( self , value ): self . layer . radius = value self . emit ( SIGNAL ( \"changed()\" )) \u6b64\u7a97\u53e3\u63a7\u4ef6\u53ef\u4ee5\u5d4c\u5165\u5230\u7b26\u53f7\u5c5e\u6027\u5bf9\u8bdd\u6846\u4e2d\u3002\u5728\u7b26\u53f7\u5c5e\u6027\u5bf9\u8bdd\u6846\u4e2d\u9009\u62e9\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\u65f6\uff0c\u5b83\u4f1a\u521b\u5efa\u7b26\u53f7\u56fe\u5c42\u7684\u5b9e\u4f8b\u548c\u7b26\u53f7\u56fe\u7a97\u53e3\u63a7\u4ef6\u7684\u5b9e\u4f8b\u3002\u7136\u540e\u5b83\u8c03\u7528 setSymbolLayer() \u65b9\u6cd5\u5c06\u7b26\u53f7\u56fe\u5c42\u5206\u914d\u7ed9\u7a97\u53e3\u63a7\u4ef6\u3002\u5728\u8be5\u65b9\u6cd5\u4e2d\uff0c\u63a7\u4ef6\u5e94\u8be5\u66f4\u65b0UI\u4ee5\u53cd\u6620\u7b26\u53f7\u5c42\u7684\u5c5e\u6027\u3002 symbolLayer() \u65b9\u6cd5\u7528\u4e8e\u901a\u8fc7\u5c5e\u6027\u5bf9\u8bdd\u6846\u518d\u6b21\u68c0\u7d22\u7b26\u53f7\u56fe\u5c42\uff0c\u5c06\u5176\u7528\u4e8e\u7b26\u53f7\u3002 \u5728\u6bcf\u6b21\u66f4\u6539\u5c5e\u6027\u65f6\uff0c\u7a97\u53e3\u63a7\u4ef6\u90fd\u5e94\u53d1\u51fa changed() \u4fe1\u53f7\uff0c\u8ba9\u5c5e\u6027\u5bf9\u8bdd\u6846\u66f4\u65b0\u7b26\u53f7\u9884\u89c8\u3002 \u73b0\u5728\u6211\u4eec\u53ea\u7f3a\u5c11\u6700\u540e\u7684\u7c98\u5408\u5242\uff1a\u8ba9QGIS\u4e86\u89e3\u8fd9\u4e9b\u65b0\u7c7b\u3002\u8fd9\u662f\u901a\u8fc7\u5c06\u7b26\u53f7\u56fe\u5c42\u6dfb\u52a0\u5230\u6ce8\u518c\u8868\u6765\u5b8c\u6210\u7684\u3002\u4e5f\u53ef\u4ee5\u5728\u4e0d\u5c06\u5176\u6dfb\u52a0\u5230\u6ce8\u518c\u8868\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u7b26\u53f7\u56fe\u5c42\uff0c\u4f46\u67d0\u4e9b\u529f\u80fd\u4e0d\u8d77\u4f5c\u7528\uff1a\u4f8b\u5982\uff0c\u4f7f\u7528\u81ea\u5b9a\u4e49\u7b26\u53f7\u56fe\u5c42\u52a0\u8f7d\u9879\u76ee\u6587\u4ef6\u6216\u65e0\u6cd5\u5728GUI\u4e2d\u7f16\u8f91\u56fe\u5c42\u7684\u5c5e\u6027\u3002 \u6211\u4eec\u5fc5\u987b\u4e3a\u7b26\u53f7\u56fe\u5c42\u521b\u5efa\u5143\u6570\u636e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from qgis.core import QgsSymbol , QgsSymbolLayerAbstractMetadata , QgsSymbolLayerRegistry class FooSymbolLayerMetadata ( QgsSymbolLayerAbstractMetadata ): def __init__ ( self ): QgsSymbolLayerAbstractMetadata . __init__ ( self , \"FooMarker\" , QgsSymbol . Marker ) def createSymbolLayer ( self , props ): radius = float ( props [ \"radius\" ]) if \"radius\" in props else 4.0 return FooSymbolLayer ( radius ) def createSymbolLayer ( self , props ): radius = float ( props [ \"radius\" ]) if \"radius\" in props else 4.0 return FooSymbolLayer ( radius ) fslmetadata = FooSymbolLayerMetadata () QgsApplication . symbolLayerRegistry () . addSymbolLayerType ( fslmetadata ) \u4f60\u5e94\u8be5\u5c06\u56fe\u5c42\u7c7b\u578b\uff08\u4e0e\u56fe\u5c42\u8fd4\u56de\u7684\u76f8\u540c\uff09\u548c\u7b26\u53f7\u7c7b\u578b\uff08marker/line/fill\uff09\u4f20\u9012\u7ed9\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002 createSymbolLayer() \u65b9\u6cd5\u8d1f\u8d23\u4f7f\u7528props\u5b57\u5178\u4e2d\u6307\u5b9a\u7684\u5c5e\u6027\u521b\u5efa\u7b26\u53f7\u56fe\u5c42\u7684\u5b9e\u4f8b\u3002 createSymbolLayerWidget() \u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u6b64\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\u7684\u8bbe\u7f6e\u63a7\u4ef6\u3002 \u6700\u540e\u4e00\u6b65\u662f\u5c06\u6b64\u7b26\u53f7\u56fe\u5c42\u6dfb\u52a0\u5230\u6ce8\u518c\u8868\u4e2d\u2014\u2014\u6211\u4eec\u5b8c\u6210\u4e86\u3002 6.8.5 \u521b\u5efa\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668 \u2693\ufe0e \u5982\u679c\u8981\u81ea\u5b9a\u4e49\u5982\u4f55\u9009\u62e9\u7b26\u53f7\u5448\u73b0\u8981\u7d20\u7684\u89c4\u5219\uff0c\u5219\u521b\u5efa\u65b0\u7684\u6e32\u67d3\u5668\u53ef\u80fd\u5f88\u6709\u7528\u3002\u4f60\u53ef\u80fd\u5e0c\u671b\u505a\u4e00\u4e9b\u7528\u4f8b\uff1a\u7b26\u53f7\u7531\u5b57\u6bb5\u7ec4\u5408\u786e\u5b9a\uff0c\u7b26\u53f7\u5927\u5c0f\u6839\u636e\u5f53\u524d\u6bd4\u4f8b\u800c\u53d8\u5316\u7b49\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u663e\u793a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\uff0c\u5b83\u53ef\u4ee5\u521b\u5efa\u4e24\u4e2a\u6807\u8bb0\u7b26\u53f7\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u8981\u7d20\u968f\u673a\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import random from qgis.core import QgsWkbTypes , QgsSymbol , QgsFeatureRenderer class RandomRenderer ( QgsFeatureRenderer ): def __init__ ( self , syms = None ): QgsFeatureRenderer . __init__ ( self , \"RandomRenderer\" ) self . syms = syms if syms else [ QgsSymbol . defaultSymbol ( QgsWkbTypes . geometryType ( QgsWkbTypes . Point ))] def symbolForFeature ( self , feature ): return random . choice ( self . syms ) def startRender ( self , context , vlayer ): for s in self . syms : s . startRender ( context ) def stopRender ( self , context ): for s in self . syms : s . stopRender ( context ) def usedAttributes ( self ): return [] def clone ( self ): return RandomRenderer ( self . syms ) \u7236\u7c7b QgsFeatureRenderer \u7684\u6784\u9020\u51fd\u6570\u9700\u8981\u4e00\u4e2a\u6e32\u67d3\u5668\u540d\u79f0\uff08\u5728\u6e32\u67d3\u5668\u4e2d\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff09\u3002 symbolForFeature() \u65b9\u6cd5\u51b3\u5b9a\u4ec0\u4e48\u7b26\u53f7\u7528\u4e8e\u7279\u5b9a\u7684\u8981\u7d20\u3002 startRender() \u548c stopRender() \u8d1f\u8d23\u7b26\u53f7\u6e32\u67d3\u7684\u521d\u59cb\u5316/\u5b8c\u6210\u3002 usedAttributes() \u65b9\u6cd5\u8fd4\u56de\u6e32\u67d3\u5668\u7684\u5b57\u6bb5\u540d\u79f0\u5217\u8868\u3002\u6700\u540e\uff0c clone() \u65b9\u6cd5\u5e94\u8fd4\u56de\u6e32\u67d3\u5668\u7684\u526f\u672c\u3002 \u4e0e\u7b26\u53f7\u56fe\u5c42\u4e00\u6837\uff0c\u53ef\u4ee5\u9644\u52a0GUI\u914d\u7f6e\u6e32\u67d3\u5668\uff0c\u5b83\u5fc5\u987b\u6765\u6e90\u4e8e QgsRendererWidget \u3002\u4ee5\u4e0b\u793a\u4f8b\u4ee3\u7801\u521b\u5efa\u4e00\u4e2a\u5141\u8bb8\u7528\u6237\u8bbe\u7f6e\u7b2c\u4e00\u4e2a\u7b26\u53f7\u7684\u6309\u94ae 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from qgis.gui import QgsRendererWidget , QgsColorButton class RandomRendererWidget ( QgsRendererWidget ): def __init__ ( self , layer , style , renderer ): QgsRendererWidget . __init__ ( self , layer , style ) if renderer is None or renderer . type () != \"RandomRenderer\" : self . r = RandomRenderer () else : self . r = renderer # setup UI self . btn1 = QgsColorButton () self . btn1 . setColor ( self . r . syms [ 0 ] . color ()) self . vbox = QVBoxLayout () self . vbox . addWidget ( self . btn1 ) self . setLayout ( self . vbox ) self . connect ( self . btn1 , SIGNAL ( \"clicked()\" ), self . setColor1 ) def setColor1 ( self ): color = QColorDialog . getColor ( self . r . syms [ 0 ] . color (), self ) if not color . isValid (): return self . r . syms [ 0 ] . setColor ( color ) self . btn1 . setColor ( self . r . syms [ 0 ] . color ()) def renderer ( self ): return self . r \u6784\u9020\u51fd\u6570\u63a5\u6536\u5f53\u524d\u56fe\u5c42\uff08 QgsVectorLayer \uff09\uff0c\u5168\u5c40\u6837\u5f0f\uff08 QgsStyle \uff09\u548c\u5f53\u524d\u6e32\u67d3\u5668\u7684\u5b9e\u4f8b\u3002\u5982\u679c\u6ca1\u6709\u6e32\u67d3\u5668\u6216\u6e32\u67d3\u5668\u5177\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u5b83\u5c06\u88ab\u6211\u4eec\u7684\u65b0\u6e32\u67d3\u5668\u66ff\u6362\uff0c\u5426\u5219\u6211\u4eec\u5c06\u4f7f\u7528\u5f53\u524d\u6e32\u67d3\u5668\uff08\u5df2\u7ecf\u662f\u6211\u4eec\u9700\u8981\u7684\u7c7b\u578b\uff09\u3002\u5e94\u8be5\u66f4\u65b0\u7a97\u53e3\u63a7\u4ef6\u5185\u5bb9\u4ee5\u663e\u793a\u6e32\u67d3\u5668\u7684\u5f53\u524d\u72b6\u6001\u3002\u5f53\u63a5\u53d7\u6e32\u67d3\u5668\u5bf9\u8bdd\u6846\u65f6\uff0c\u5c06\u8c03\u7528\u7a97\u53e3\u63a7\u4ef6\u7684 renderer() \u65b9\u6cd5\u83b7\u53d6\u5f53\u524d\u6e32\u67d3\u5668\u2014\u2014\u5b83\u5c06\u88ab\u5206\u914d\u7ed9\u8be5\u56fe\u5c42\u3002 \u6700\u540e\u4e00\u4e2a\u7f3a\u5931\u7684\u662f\u6e32\u67d3\u5668\u5143\u6570\u636e\u548c\u6ce8\u518c\u8868\u4e2d\u7684\u6ce8\u518c\u9879\uff0c\u5426\u5219\u4f7f\u7528\u6e32\u67d3\u5668\u52a0\u8f7d\u56fe\u5c42\u5c06\u4e0d\u8d77\u4f5c\u7528\uff0c\u7528\u6237\u5c06\u65e0\u6cd5\u4ece\u6e32\u67d3\u5668\u5217\u8868\u4e2d\u9009\u62e9\u5b83\u3002 RandomRenderer \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from qgis.core import QgsRendererAbstractMetadata , QgsRendererRegistry , QgsApplication class RandomRendererMetadata ( QgsRendererAbstractMetadata ): def __init__ ( self ): QgsRendererAbstractMetadata . __init__ ( self , \"RandomRenderer\" , \"Random renderer\" ) def createRenderer ( self , element ): return RandomRenderer () def createRendererWidget ( self , layer , style , renderer ): return RandomRendererWidget ( layer , style , renderer ) rrmetadata = RandomRendererMetadata () QgsApplication . rendererRegistry () . addRenderer ( rrmetadata ) \u4e0e\u7b26\u53f7\u56fe\u5c42\u7c7b\u4f3c\uff0c\u62bd\u8c61\u5143\u6570\u636e\u6784\u9020\u51fd\u6570\u7b49\u5f85\u6e32\u67d3\u5668\u540d\u79f0\uff0c\u5bf9\u7528\u6237\u53ef\u89c1\u7684\u540d\u79f0\u4ee5\u53ca\u6e32\u67d3\u5668\u56fe\u6807\u7684\u53ef\u9009\u540d\u79f0\u3002 createRenderer() \u65b9\u6cd5\u4f20\u9012\u4e00\u4e2a QDomElement \u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u53ef\u7528\u4e8e\u4eceDOM\u6811\u6062\u590d\u6e32\u67d3\u5668\u7684\u72b6\u6001\u3002 createRendererWidget() \u65b9\u6cd5\u521b\u5efa\u914d\u7f6e\u63a7\u4ef6\u3002\u5982\u679c\u6e32\u67d3\u5668\u6ca1\u6709GUI\uff0c\u5b83\u4e0d\u5fc5\u5b58\u5728\u6216\u53ef\u4ee5\u8fd4\u56de None \u3002 \u8981\u5c06\u56fe\u6807\u4e0e\u6e32\u67d3\u5668\u5173\u8054\uff0c\u53ef\u4ee5\u5728 QgsRendererAbstractMetadata \u6784\u9020\u51fd\u6570\u4e2d\u5c06\u5176\u6307\u5b9a\u4e3a\u7b2c\u4e09\u4e2a\uff08\u53ef\u9009\uff09\u53c2\u6570 1 2 3 4 QgsRendererAbstractMetadata . __init__ ( self , \"RandomRenderer\" , \"Random renderer\" , QIcon ( QPixmap ( \"RandomRendererIcon.png\" , \"png\" ))) \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5143\u6570\u636e\u7c7b\u7684 setIcon \u65b9\u6cd5\u5173\u8054\u8be5\u56fe\u6807\u3002\u56fe\u6807\u53ef\u4ee5\u4ece\u6587\u4ef6\u52a0\u8f7d\uff08\u5982\u4e0a\u6240\u793a\uff09\uff0c\u4e5f\u53ef\u4ee5\u4ece Qt\u8d44\u6e90 \u52a0\u8f7d \uff08PyQt5\u5305\u542bPython\u7684.qrc\u7f16\u8bd1\u6587\u4ef6\uff09\u3002 6.9 \u66f4\u591a\u8bdd\u9898 \u2693\ufe0e TODO: \u521b\u5efa/\u4fee\u6539\u7b26\u53f7 \u4f7f\u7528\u6837\u5f0f\uff08 QgsStyle \uff09 \u4f7f\u7528\u8272\u5e26\uff08 QgsColorRamp \uff09 \u63a2\u7d22\u7b26\u53f7\u56fe\u5c42\u548c\u6e32\u67d3\u5668\u6ce8\u518c\u8868","title":"6-\u4f7f\u7528\u77e2\u91cf\u56fe\u5c42"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#6","text":"\u672c\u8282\u603b\u7ed3\u4e86\u4f7f\u7528\u77e2\u91cf\u56fe\u5c42\u6267\u884c\u5404\u79cd\u64cd\u4f5c\u3002 \u8fd9\u91cc\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u90fd\u662f\u57fa\u4e8e QgsVectorLayer \u7c7b\u7684\u65b9\u6cd5\u3002","title":"6 \u4f7f\u7528\u77e2\u91cf\u56fe\u5c42"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#61","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 QgsVectorLayer \u5bf9\u8c61\u7684 fields() \u65b9\u6cd5\u68c0\u7d22\u4e00\u4e2a\u77e2\u91cf\u56fe\u5c42\u76f8\u5173\u5b57\u6bb5\u7684\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 8 9 vlayer = QgsVectorLayer ( \"testdata/airports.shp\" , \"airports\" , \"ogr\" ) for field in vlayer . fields (): print ( field . name (), field . typeName ()) # ID Integer64 # fk_region Integer64 # ELEV Real # NAME String # USE String QgsVectorLayer \u7c7b\u7684 displayField() \u548c mapTipTemplate() \u65b9\u6cd5\u63d0\u4f9b\u6709\u5173 \u663e\u793a\u5c5e\u6027 \u9009\u9879\u5361\u4e2d\u4f7f\u7528\u7684\u5b57\u6bb5\u548c\u6a21\u677f\u7684\u4fe1\u606f\u3002 \u52a0\u8f7d\u77e2\u91cf\u5c42\u65f6\uff0cQGIS\u59cb\u7ec8\u9009\u62e9\u4e00\u4e2a\u5b57\u6bb5\u4f5c\u4e3a \u663e\u793a\u540d\u79f0 \uff0c\u800c HTML\u5730\u56fe\u63d0\u793a \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a\u7a7a\u3002\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u540c\u65f6\u83b7\u5f97\uff1a 1 2 3 vlayer = QgsVectorLayer ( \"testdata/airports.shp\" , \"airports\" , \"ogr\" ) print ( vlayer . displayField ()) # NAME \u63d0\u793a \u5982\u679c\u5c06\u663e\u793a\u540d\u79f0\u4ece\u5b57\u6bb5\u66f4\u6539\u4e3a\u8868\u8fbe\u5f0f\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 displayExpression() \u800c\u4e0d\u662f displayField() \u3002","title":"6.1 \u68c0\u7d22\u76f8\u5173\u5c5e\u6027\u4fe1\u606f"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#62","text":"\u904d\u5386\u77e2\u91cf\u56fe\u5c42\u8981\u7d20\u662f\u6700\u5e38\u89c1\u7684\u4efb\u52a1\u4e4b\u4e00\u3002\u4e0b\u9762\u662f\u6267\u884c\u6b64\u4efb\u52a1\u7684\u7b80\u5355\u57fa\u672c\u4ee3\u7801\u793a\u4f8b\uff0c\u5e76\u663e\u793a\u6709\u5173\u6bcf\u4e2a\u8981\u7d20\u7684\u4e00\u4e9b\u4fe1\u606f\u3002 layer \u53d8\u91cf\u88ab\u5047\u5b9a\u4e3a\u4e00\u4e2a QgsVectorLayer \u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 layer = iface . activeLayer () features = layer . getFeatures () for feature in features : # \u68c0\u7d22\u6bcf\u4e00\u4e2a\u8981\u7d20\u7684\u51e0\u4f55\u548c\u5c5e\u6027 print ( \"Feature ID: \" , feature . id ()) # \u83b7\u53d6\u51e0\u4f55 geom = feature . geometry () geomSingleType = QgsWkbTypes . isSingleType ( geom . wkbType ()) if geom . type () == QgsWkbTypes . PointGeometry : # \u51e0\u4f55\u7c7b\u578b\u53ef\u4ee5\u662f\u5355\u4e2a\u6216\u591a\u4e2a\u7c7b\u578b\uff0c if geomSingleType : x = geom . asPoint () print ( \"Point: \" , x ) else : x = geom . asMultiPoint () print ( \"MultiPoint: \" , x ) elif geom . type () == QgsWkbTypes . LineGeometry : if geomSingleType : x = geom . asPolyline () print ( \"Line: \" , x , \"length: \" , geom . length ()) else : x = geom . asMultiPolyline () print ( \"MultiLine: \" , x , \"length: \" , geom . length ()) elif geom . type () == QgsWkbTypes . PolygonGeometry : if geomSingleType : x = geom . asPolygon () print ( \"Polygon: \" , x , \"Area: \" , geom . area ()) else : x = geom . asMultiPolygon () print ( \"MultiPolygon: \" , x , \"Area: \" , geom . area ()) else : print ( \"Unknown or invalid geometry\" ) # \u83b7\u53d6\u5c5e\u6027 attrs = feature . attributes () # attrs\u662f\u4e00\u4e2a\u5217\u8868\u3002\u5b83\u5305\u542b\u8981\u7d20\u7684\u6240\u6709\u5c5e\u6027\u503c print ( attrs ) # \u672c\u6d4b\u8bd5\u53ea\u6253\u5370\u7b2c\u4e00\u4e2a\u8981\u7d20 break # Feature ID: 1 # Point: <QgsPointXY: POINT(7 45)> # [1, 'First feature']","title":"6.2 \u904d\u5386\u77e2\u91cf\u56fe\u5c42"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#63","text":"\u5728QGIS\u684c\u9762\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0d\u540c\u65b9\u5f0f\u9009\u62e9\u8981\u7d20\uff1a\u7528\u6237\u53ef\u4ee5\u5355\u51fb\u8981\u7d20\u3001\u5728\u5730\u56fe\u753b\u5e03\u4e0a\u7ed8\u5236\u77e9\u5f62\u6216\u4f7f\u7528\u8868\u8fbe\u5f0f\u8fc7\u6ee4\u5668\u3002\u6240\u9009\u8981\u7d20\u901a\u5e38\u4ee5\u4e0d\u540c\u989c\u8272\u7a81\u51fa\u663e\u793a\uff08\u9ed8\u8ba4\u4e3a\u9ec4\u8272\uff09\uff0c\u4ee5\u5f15\u8d77\u7528\u6237\u5bf9\u5df2\u9009\u8981\u7d20\u7684\u6ce8\u610f\u3002 \u6709\u65f6\uff0c\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u9009\u62e9\u8981\u7d20\u6216\u66f4\u6539\u9ed8\u8ba4\u989c\u8272\u4f1a\u5f88\u6709\u7528\u3002 \u9009\u62e9\u6240\u6709\u8981\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528 selectAll() \u65b9\u6cd5\uff1a 1 2 3 # \u83b7\u53d6\u5f53\u524d\u56fe\u5c42\uff08\u5fc5\u987b\u662f\u77e2\u91cf\u56fe\u5c42\uff09 layer = iface . activeLayer () layer . selectAll () \u4f7f\u7528\u8868\u8fbe\u5f0f\u8fdb\u884c\u9009\u62e9\uff0c\u4f7f\u7528 selectByExpression() \u65b9\u6cd5\uff1a 1 2 3 4 # \u5047\u8bbe\u5f53\u524d\u56fe\u5c42\u662f\u6765\u81eaQGIS\u6d4b\u8bd5\u5957\u4ef6\u7684points.shp\u6587\u4ef6 #\uff08Class\uff08\u5b57\u7b26\u4e32\uff09\u548cHeading\uff08\u6570\u5b57\uff09\u662fpoints.shp\u4e2d\u7684\u5c5e\u6027\uff09 layer = iface . activeLayer () layer . selectByExpression ( '\"Class\"= \\' B52 \\' and \"Heading\" > 10 and \"Heading\" <70' , QgsVectorLayer . SetSelection ) \u66f4\u6539\u9009\u62e9\u989c\u8272\uff0c\u53ef\u4ee5\u4f7f\u7528 QgsMapCanvas \u7684 setSelectionColor() \u65b9\u6cd5 \uff1a 1 iface . mapCanvas () . setSelectionColor ( QColor ( \"red\" )) \u7ed9\u56fe\u5c42\u7684\u6240\u9009\u8981\u7d20\u5217\u8868\u6dfb\u52a0\u8981\u7d20\uff0c\u4f60\u53ef\u4ee5\u8c03\u7528 select() \u6dfb\u52a0\u5230\u8981\u7d20ID\u5217\u8868\uff1a 1 2 3 4 5 6 7 8 selected_fid = [] # \u83b7\u53d6\u56fe\u5c42\u7684\u7b2c\u4e00\u4e2a\u8981\u7d20ID for feature in layer . getFeatures (): selected_fid . append ( feature . id ()) break # \u5c06\u8fd9\u4e9b\u8981\u7d20\u6dfb\u52a0\u5230\u9009\u5b9a\u7684\u5217\u8868 layer . select ( selected_fid ) \u6e05\u9664\u9009\u62e9\uff1a 1 layer . removeSelection ()","title":"6.3 \u9009\u62e9\u8981\u7d20"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#631","text":"\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7\u540d\u79f0\u6765\u83b7\u5f97\uff1a 1 2 3 print ( feature [ 'name' ]) # First feature \u6216\u8005\uff0c\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u5f15\u7528\u5c5e\u6027\u3002\u8fd9\u6bd4\u4f7f\u7528\u540d\u79f0\u5feb\u4e00\u70b9\u3002\u4f8b\u5982\uff0c\u83b7\u53d6\u7b2c\u4e8c\u4e2a\u5c5e\u6027\uff1a 1 2 3 print ( feature [ 1 ]) # Second feature","title":"6.3.1 \u8bbf\u95ee\u5c5e\u6027"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#632","text":"\u5982\u679c\u4f60\u53ea\u9700\u8981\u9009\u4e2d\u7684\u8981\u7d20\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u77e2\u91cf\u56fe\u5c42\u7684 selectedFeatures() \u65b9\u6cd5\uff1a 1 2 3 4 5 selection = layer . selectedFeatures () print ( len ( selection )) for feature in selection : # \u4f7f\u7528\u8981\u7d20\u6267\u884c\u4efb\u4f55\u64cd\u4f5c pass","title":"6.3.2 \u904d\u5386\u9009\u4e2d\u7684\u8981\u7d20"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#633","text":"\u5982\u679c\u8981\u904d\u5386\u56fe\u5c42\u4e2d\u7279\u5b9a\u7684\u8981\u7d20\u5b50\u96c6\uff08\u4f8b\u5982\u7ed9\u5b9a\u533a\u57df\u5185\u7684\u8981\u7d20\uff09\uff0c\u5219\u5fc5\u987b\u6dfb\u52a0 QgsFeatureRequest \u5bf9\u8c61\u5230 getFeatures() \u65b9\u6cd5\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 areaOfInterest = QgsRectangle ( 450290 , 400520 , 450750 , 400780 ) request = QgsFeatureRequest () . setFilterRect ( areaOfInterest ) for feature in layer . getFeatures ( request ): # \u4f7f\u7528\u8981\u7d20\u6267\u884c\u4efb\u4f55\u64cd\u4f5c pass \u4e3a\u4e86\u901f\u5ea6\uff0c\u76f8\u4ea4\u901a\u5e38\u4ec5\u4f7f\u7528\u8981\u7d20\u7684\u8303\u56f4(bbox)\u6765\u5b8c\u6210\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u6807\u5fd7 ExactIntersect \u53ef\u4ee5\u786e\u4fdd\u53ea\u8fd4\u56de\u76f8\u4ea4\u7684\u8981\u7d20\uff1a 1 request = QgsFeatureRequest () . setFilterRect ( areaOfInterest ) . setFlags ( QgsFeatureRequest . ExactIntersect ) \u4f7f\u7528 setLimit() \u4f60\u53ef\u4ee5\u9650\u5236\u8981\u7d20\u7684\u6570\u91cf\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 request = QgsFeatureRequest () request . setLimit ( 2 ) for feature in layer . getFeatures ( request ): print ( feature ) # <qgis._core.QgsFeature object at 0x7f9b78590948> \u5982\u679c\u4f60\u9700\u8981\u4e00\u4e2a\u57fa\u4e8e\u5c5e\u6027\u7684\u8fc7\u6ee4\u5668\u6765\u4ee3\u66ff\uff08\u6216\u589e\u52a0\uff09\u4e00\u4e2a\u7a7a\u95f4\u8fc7\u6ee4\u5668\uff0c\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u6240\u793a\uff0c\u4f60\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a QgsExpression \u5bf9\u8c61\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 QgsFeatureRequest \u51fd\u6570\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 # \u8868\u8fbe\u5f0f\u5c06\u8fc7\u6ee4\u5b57\u6bb5\u201clocation_name\u201d # \u5305\u542b\u5355\u8bcd\u201cLake\u201d\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09 exp = QgsExpression ( \"location_name ILIKE \\' %La ke% \\' \" ) request = QgsFeatureRequest ( exp ) \u6709\u5173\u652f\u6301\u8bed\u6cd5\uff08 QgsExpression \uff09\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 11-\u8868\u8fbe\u5f0f\uff0c\u8fc7\u6ee4\u548c\u8ba1\u7b97\u503c \u3002 \u8be5\u8bf7\u6c42\u53ef\u7528\u4e8e\u68c0\u7d22\u6bcf\u4e2a\u8981\u7d20\uff0c\u56e0\u6b64\u8fed\u4ee3\u5668\u8fd4\u56de\u6240\u6709\u8981\u7d20\uff0c\u4f46\u8fd4\u56de\u6bcf\u4e2a\u8981\u7d20\u7684\u90e8\u5206\u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # \u4ec5\u8fd4\u56de\u9009\u5b9a\u7684\u5b57\u6bb5\u4ee5\u589e\u52a0\u8bf7\u6c42\u901f\u5ea6 request . setSubsetOfAttributes ([ 0 , 2 ]) # \u66f4\u52a0\u53cb\u597d\u7684\u65b9\u5f0f request . setSubsetOfAttributes ([ 'name' , 'id' ], layer . fields ()) # \u4e0d\u8fd4\u56de\u51e0\u4f55\u5bf9\u8c61\u4ee5\u589e\u52a0\u8bf7\u6c42\u901f\u5ea6 request . setFlags ( QgsFeatureRequest . NoGeometry ) # \u4ec5\u83b7\u53d6ID\u4e3a45\u7684\u8981\u7d20 request . setFilterFid ( 45 ) # \u8fd9\u4e9b\u9009\u9879\u53ef\u4ee5\u662f\u94fe\u5f0f\u7684 request . setFilterRect ( areaOfInterest ) . setFlags ( QgsFeatureRequest . NoGeometry ) . setFilterFid ( 45 ) . setSubsetOfAttributes ([ 0 , 2 ])","title":"6.3.3 \u904d\u5386\u4e00\u90e8\u5206\u8981\u7d20"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#64","text":"\u5927\u591a\u6570\u77e2\u91cf\u6570\u636e\u63d0\u4f9b\u8005\u90fd\u652f\u6301\u7f16\u8f91\u56fe\u5c42\u6570\u636e\u3002\u6709\u65f6\u5b83\u4eec\u4ec5\u652f\u6301\u7f16\u8f91\u5b50\u96c6\u3002\u4f7f\u7528 capabilities() \u529f\u80fd\u53ef\u4ee5\u627e\u51fa\u652f\u6301\u7684\u529f\u80fd\u96c6\u3002 1 2 3 4 caps = layer . dataProvider () . capabilities () # \u68c0\u67e5\u662f\u5426\u652f\u6301\u7279\u5b9a\u529f\u80fd\uff1a if caps & QgsVectorDataProvider . DeleteFeatures : print ( '\u56fe\u5c42\u652f\u6301\u5220\u9664\u8981\u7d20' ) \u6709\u5173\u6240\u6709\u53ef\u7528\u529f\u80fd\u7684\u5217\u8868\uff0c\u8bf7\u53c2\u9605 \uff1a QgsVectorDataProvider\u63a5\u53e3\u6587\u6863 \u6253\u5370\u56fe\u5c42\u529f\u80fd\u7684\u6587\u672c\u63cf\u8ff0\uff0c\u7ed3\u679c\u662f\u4ee5\u9017\u53f7\u5206\u9694\u7684\u5217\u8868\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 capabilitiesString() \u65b9\u6cd5\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a 1 2 3 4 5 6 caps_string = layer . dataProvider () . capabilitiesString () # Print: # 'Add Features, Delete Features, Change Attribute Values, Add Attributes, # Delete Attributes, Rename Attributes, Fast Access to Features at ID, # Presimplify Geometries, Presimplify Geometries with Validity Check, # Transactions, Curved Geometries' \u901a\u8fc7\u4f7f\u7528\u4ee5\u4e0b\u4efb\u4f55\u65b9\u6cd5\u8fdb\u884c\u77e2\u91cf\u56fe\u5c42\u7f16\u8f91\uff0c\u66f4\u6539\u5c06\u76f4\u63a5\u63d0\u4ea4\u5230\u57fa\u7840\u6570\u636e\u5b58\u50a8\uff08\u6587\u4ef6\uff0c\u6570\u636e\u5e93\u7b49\uff09\u3002\u5982\u679c\u4f60\u53ea\u60f3\u8fdb\u884c\u4e34\u65f6\u4fee\u6539\uff0c\u8bf7\u8df3\u5230\u4e0b\u4e00\u8282 6.4.4 \u4f7f\u7528\u7f16\u8f91\u7f13\u51b2\u533a\u4fee\u6539\u77e2\u91cf\u56fe\u5c42 \u3002 \u63d0\u793a \u5982\u679c\u4f60\u5728QGIS\u5185\u90e8\uff08\u4ece\u63a7\u5236\u53f0\u6216\u4ece\u63d2\u4ef6\u4e2d\uff09\uff0c\u53ef\u80fd\u9700\u8981\u5f3a\u5236\u91cd\u7ed8\u5730\u56fe\u753b\u5e03\uff0c\u4ee5\u4fbf\u67e5\u770b\u4f60\u5bf9\u51e0\u4f55\u3001\u6837\u5f0f\u6216\u5c5e\u6027\u6240\u505a\u7684\u66f4\u6539\uff1a 1 2 3 4 5 # \u5982\u679c\u542f\u7528\u4e86\u7f13\u5b58\uff0c\u7b80\u5355\u7684\u753b\u5e03\u5237\u65b0\u53ef\u80fd\u4e0d\u8db3\u4ee5\u89e6\u53d1\u91cd\u7ed8\uff0c\u5e76\u4e14\u5fc5\u987b\u6e05\u9664\u56fe\u5c42\u7684\u7f13\u5b58\u56fe\u50cf\u3002 if iface . mapCanvas () . isCachingEnabled (): layer . triggerRepaint () else : iface . mapCanvas () . refresh ()","title":"6.4 \u4fee\u6539\u77e2\u91cf\u56fe\u5c42"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#641","text":"\u521b\u5efa\u4e00\u4e9b QgsFeature \u5b9e\u4f8b\u5e76\u5c06\u5b83\u4eec\u7684\u5217\u8868\u4f20\u9012\u7ed9\u63d0\u4f9b\u8005\u7684 addFeatures() \u65b9\u6cd5\u3002\u5b83\u5c06\u8fd4\u56de\u4e24\u4e2a\u503c\uff1aresult\uff08true / false\uff09\u548c\u6dfb\u52a0\u7684\u8981\u7d20\u5217\u8868\uff08\u5b83\u4eec\u7684ID\u7531\u6570\u636e\u5b58\u50a8\u8bbe\u7f6e\uff09\u3002 \u8bbe\u7f6e\u8981\u7d20\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 QgsFields \u5bf9\u8c61\uff08\u53ef\u4ee5\u4ece fields() \u77e2\u91cf\u56fe\u5c42\u7684\u65b9\u6cd5\u83b7\u53d6 \uff09\u6216\u8c03\u7528 initAttributes() \u4f20\u9012\u8981\u6dfb\u52a0\u7684\u5b57\u6bb5\u6570\u6765\u521d\u59cb\u5316\u8981\u7d20\u3002 1 2 3 4 5 6 7 8 if caps & QgsVectorDataProvider . AddFeatures : feat = QgsFeature ( layer . fields ()) feat . setAttributes ([ 0 , 'hello' ]) # \u6216\u6309key\u6216index\u8bbe\u7f6e\u5355\u4e2a\u5c5e\u6027\uff1a feat . setAttribute ( 'name' , 'hello' ) feat . setAttribute ( 0 , 'hello' ) feat . setGeometry ( QgsGeometry . fromPointXY ( QgsPointXY ( 123 , 456 ))) ( res , outFeats ) = layer . dataProvider () . addFeatures ([ feat ])","title":"6.4.1 \u6dfb\u52a0\u8981\u7d20"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#642","text":"\u5220\u9664\u67d0\u4e9b\u8981\u7d20\uff0c\u53ea\u9700\u63d0\u4f9b\u5176\u8981\u7d20ID\u5217\u8868\u5373\u53ef\u3002 1 2 if caps & QgsVectorDataProvider . DeleteFeatures : res = layer . dataProvider () . deleteFeatures ([ 5 , 10 ])","title":"6.4.2 \u5220\u9664\u8981\u7d20"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#643","text":"\u53ef\u4ee5\u66f4\u6539\u8981\u7d20\u7684\u51e0\u4f55\u56fe\u5f62\u6216\u66f4\u6539\u67d0\u4e9b\u5c5e\u6027\u3002\u4ee5\u4e0b\u793a\u4f8b\u9996\u5148\u66f4\u6539\u7d22\u5f15\u4e3a0\u548c1\u7684\u5c5e\u6027\u503c\uff0c\u7136\u540e\u66f4\u6539\u8981\u7d20\u7684\u51e0\u4f55\u3002 1 2 3 4 5 6 7 8 9 fid = 100 # \u6211\u4eec\u5c06\u4fee\u6539\u7684\u8981\u7d20ID if caps & QgsVectorDataProvider . ChangeAttributeValues : attrs = { 0 : \"hello\" , 1 : 123 } layer . dataProvider () . changeAttributeValues ({ fid : attrs }) if caps & QgsVectorDataProvider . ChangeGeometries : geom = QgsGeometry . fromPointXY ( QgsPointXY ( 111 , 222 )) layer . dataProvider () . changeGeometryValues ({ fid : geom }) \u63d0\u793a QgsVectorLayerEditUtils\u7c7b\u8fdb\u884c\u4ec5\u51e0\u4f55\u7f16\u8f91 \u5982\u679c\u4f60\u53ea\u9700\u8981\u66f4\u6539\u51e0\u4f55\u56fe\u5f62\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 QgsVectorLayerEditUtils \uff0c\u5b83\u63d0\u4f9b\u4e00\u4e9b\u6709\u7528\u7684\u65b9\u6cd5\u6765\u7f16\u8f91\u51e0\u4f55\u56fe\u5f62\uff08\u5e73\u79fb\u3001\u63d2\u5165\u6216\u79fb\u52a8\u9876\u70b9\u7b49\uff09\u3002","title":"6.4.3 \u4fee\u6539\u8981\u7d20"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#644","text":"\u5728QGIS\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7f16\u8f91\u77e2\u91cf\u65f6\uff0c\u5fc5\u987b\u9996\u5148\u4e3a\u7279\u5b9a\u56fe\u5c42\u8bbe\u7f6e\u5f00\u59cb\u7f16\u8f91\u6a21\u5f0f\uff0c\u7136\u540e\u8fdb\u884c\u4e00\u4e9b\u4fee\u6539\uff0c\u6700\u540e\u63d0\u4ea4\uff08\u6216\u56de\u6eda\uff09\u66f4\u6539\u3002\u4f60\u6240\u505a\u7684\u6240\u6709\u66f4\u6539\u5728\u4f60\u63d0\u4ea4\u4e4b\u524d\u90fd\u4e0d\u4f1a\u5199\u5165\u2014\u2014\u5b83\u4eec\u4fdd\u7559\u5728\u56fe\u5c42\u7684\u5185\u5b58\u7f16\u8f91\u7f13\u51b2\u533a\u4e2d\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u4f7f\u7528\u6b64\u529f\u80fd\u2014\u2014\u5b83\u4ec5\u4ec5\u662f\u662f\u77e2\u91cf\u56fe\u5c42\u7f16\u8f91\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8865\u5145\u76f4\u63a5\u4f7f\u7528\u6570\u636e\u63d0\u4f9b\u8005\u3002\u5728\u4e3a\u77e2\u91cf\u56fe\u5c42\u7f16\u8f91\u63d0\u4f9b\u4e00\u4e9bGUI\u5de5\u5177\u65f6\u4f7f\u7528\u6b64\u9009\u9879\uff0c\u56e0\u4e3a\u8fd9\u5c06\u5141\u8bb8\u7528\u6237\u51b3\u5b9a\u662f\u5426\u63d0\u4ea4/\u56de\u6eda\uff0c\u5e76\u5141\u8bb8\u4f7f\u7528\u64a4\u9500/\u91cd\u505a\u3002\u63d0\u4ea4\u66f4\u6539\u540e\uff0c\u7f16\u8f91\u7f13\u51b2\u533a\u4e2d\u7684\u6240\u6709\u66f4\u6539\u90fd\u5c06\u4fdd\u5b58\u5230\u6570\u636e\u63d0\u4f9b\u8005\u4e2d\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u6211\u4eec\u5728\u63d0\u4f9b\u8005\u4e2d\u770b\u5230\u7684\u65b9\u6cd5\uff0c\u4f46\u5b83\u4eec\u5728 QgsVectorLayer \u5bf9\u8c61\u4e0a\u8c03\u7528\u3002 \u4f7f\u8fd9\u4e9b\u65b9\u6cd5\u8d77\u4f5c\u7528\uff0c\u56fe\u5c42\u5fc5\u987b\u5904\u4e8e\u7f16\u8f91\u6a21\u5f0f\u3002\u5f00\u59cb\u7f16\u8f91\u6a21\u5f0f\uff0c\u4f7f\u7528 startEditing() \u65b9\u6cd5\u3002\u505c\u6b62\u7f16\u8f91\uff0c\u4f7f\u7528 commitChanges() \u6216 rollBack() \u65b9\u6cd5\u3002\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u5c06\u63d0\u4ea4\u5bf9\u6570\u636e\u6e90\u7684\u6240\u6709\u66f4\u6539\uff0c\u800c\u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u5c06\u4e22\u5f03\u5b83\u4eec\uff0c\u5e76\u4e14\u4e0d\u4f1a\u4fee\u6539\u6570\u636e\u6e90\u3002 \u786e\u5b9a\u56fe\u5c42\u662f\u5426\u5904\u4e8e\u7f16\u8f91\u6a21\u5f0f\uff0c\u4f7f\u7528 isEditable() \u65b9\u6cd5\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u793a\u4f8b\u6f14\u793a\uff0c\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u7f16\u8f91\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from qgis.PyQt.QtCore import QVariant feat1 = feat2 = QgsFeature ( layer . fields ()) fid = 99 feat1 . setId ( fid ) # \u6dfb\u52a0\u4e24\u4e2a\u8981\u7d20\uff08QgsFeature\u5b9e\u4f8b\uff09 layer . addFeatures ([ feat1 , feat2 ]) # \u5220\u9664\u6307\u5b9aID\u7684\u8981\u7d20 layer . deleteFeature ( fid ) # \u4e3a\u8981\u7d20\u8bbe\u7f6e\u65b0\u51e0\u4f55\uff08QgsGeometry\u5b9e\u4f8b\uff09\u3002 layer . changeGeometry ( fid , geometry ) # \u5c06\u7ed9\u5b9a\u5b57\u6bb5\u7d22\u5f15\uff08int\uff09\u7684\u5c5e\u6027\u66f4\u65b0\u4e3a\u7ed9\u5b9a\u503c fieldIndex = 1 value = 'My new name' layer . changeAttributeValue ( fid , fieldIndex , value ) # \u6dfb\u52a0\u65b0\u7684\u5b57\u6bb5 layer . addAttribute ( QgsField ( \"mytext\" , QVariant . String )) # \u5220\u9664\u5b57\u6bb5 layer . deleteAttribute ( fieldIndex ) \u4e3a\u4e86\u4f7f\u64a4\u6d88/\u91cd\u505a\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e0a\u8ff0\u8c03\u7528\u5fc5\u987b\u5305\u542b\u5728\u64a4\u6d88\u547d\u4ee4\u4e2d\u3002\uff08\u5982\u679c\u4f60\u4e0d\u5173\u5fc3\u64a4\u6d88/\u91cd\u505a\u5e76\u5e0c\u671b\u7acb\u5373\u5b58\u50a8\u66f4\u6539\uff0c\u90a3\u4e48\u901a\u8fc7 6.4 \u4fee\u6539\u77e2\u91cf\u56fe\u5c42 \uff0c\u4f60\u5c06\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u5b8c\u6210\u5de5\u4f5c \u3002\uff09 \u4ee5\u4e0b\u662f\u4f7f\u7528\u64a4\u6d88\u529f\u80fd\u7684\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 layer . beginEditCommand ( \"Feature triangulation\" ) # ...\u8c03\u7528\u56fe\u5c42\u7684\u7f16\u8f91\u65b9\u6cd5...... if problem_occurred : layer . destroyEditCommand () return # ...\u66f4\u591a\u7f16\u8f91... layer . endEditCommand () beginEditCommand() \u65b9\u6cd5\u5c06\u521b\u5efa\u4e00\u4e2a\u5185\u90e8\u201c\u6d3b\u52a8\u201d\u547d\u4ee4\uff0c\u5e76\u8bb0\u5f55\u77e2\u91cf\u56fe\u5c42\u4e2d\u7684\u540e\u7eed\u66f4\u6539\u3002\u968f\u7740\u5bf9 endEditCommand() \u547d\u4ee4\u7684\u8c03\u7528\u88ab\u63a8\u9001\u5230\u64a4\u9500\u6808\uff0c\u7528\u6237\u5c06\u80fd\u591f\u4eceGUI\u64a4\u6d88/\u91cd\u505a\u5b83\u3002\u5982\u679c\u5728\u6267\u884c\u66f4\u6539\u65f6\u51fa\u73b0\u95ee\u9898\uff0c destroyEditCommand() \u65b9\u6cd5\u5c06\u5220\u9664\u8be5\u547d\u4ee4\u5e76\u56de\u6eda\u6b64\u547d\u4ee4\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u65f6\u6240\u505a\u7684\u6240\u6709\u66f4\u6539\u3002 \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 with edit(layer) \u2014\u2014\u5c06\u63d0\u4ea4\u548c\u56de\u6eda\u5305\u88c5\u5728\u66f4\u5177\u8bed\u4e49\u7684\u4ee3\u7801\u5757\u4e2d\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a 1 2 3 4 with edit ( layer ): feat = next ( layer . getFeatures ()) feat [ 0 ] = 5 layer . updateFeature ( feat ) \u7ed3\u675f\u540e\u5c06\u81ea\u52a8\u8c03\u7528 commitChanges() \u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u5f02\u5e38\uff0c\u5b83\u5c06\u8fdb\u884c rollBack() \u6240\u6709\u66f4\u6539\u3002\u5982\u679c commitChanges() \uff08\u5f53\u8be5\u65b9\u6cd5\u8fd4\u56deFalse\u65f6\uff09\u9047\u5230\u95ee\u9898\u5c06\u5f15\u53d1 QgsEditError \u5f02\u5e38\u3002","title":"6.4.4 \u4f7f\u7528\u7f16\u8f91\u7f13\u51b2\u533a\u4fee\u6539\u77e2\u91cf\u56fe\u5c42"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#645","text":"\u6dfb\u52a0\u5b57\u6bb5\uff08\u5c5e\u6027\uff09\uff0c\u4f60\u9700\u8981\u6307\u5b9a\u5b57\u6bb5\u5b9a\u4e49\u5217\u8868\u3002\u5220\u9664\u5b57\u6bb5\uff0c\u53ea\u9700\u63d0\u4f9b\u5b57\u6bb5\u7d22\u5f15\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 from qgis.PyQt.QtCore import QVariant if caps & QgsVectorDataProvider . AddAttributes : res = layer . dataProvider () . addAttributes ( [ QgsField ( \"mytext\" , QVariant . String ), QgsField ( \"myint\" , QVariant . Int )]) if caps & QgsVectorDataProvider . DeleteAttributes : res = layer . dataProvider () . deleteAttributes ([ 0 ]) 1 2 3 4 5 6 7 8 9 10 11 12 # \u5220\u9664\u5b57\u6bb5\u7684\u5907\u7528\u65b9\u6cd5 # \u9996\u5148\u521b\u5efa\u8981\u5220\u9664\u7684\u4e34\u65f6\u5b57\u6bb5 (f1-3) layer . dataProvider () . addAttributes ([ QgsField ( \"f1\" , QVariant . Int ), QgsField ( \"f2\" , QVariant . Int ), QgsField ( \"f3\" , QVariant . Int )]) layer . updateFields () count = layer . fields () . count () # \u56fe\u5c42\u5b57\u6bb5\u4e2a\u6570 ind_list = list (( count - 3 , count - 2 )) # \u521b\u5efa\u5217\u8868 # \u4f7f\u7528\u7d22\u5f15\u5220\u9664\u5b57\u6bb5 layer . dataProvider () . deleteAttributes ([ count - 1 ]) # \u4f7f\u7528\u7d22\u5f15\u5217\u8868\u5220\u9664\u591a\u4e2a\u5b57\u6bb5 layer . dataProvider () . deleteAttributes ( ind_list ) \u5728\u6570\u636e\u63d0\u4f9b\u7a0b\u8005\u4e2d\u6dfb\u52a0\u6216\u5220\u9664\u5b57\u6bb5\u540e\uff0c\u9700\u8981\u66f4\u65b0\u56fe\u5c42\u7684\u5b57\u6bb5\uff0c\u56e0\u4e3a\u66f4\u6539\u4e0d\u4f1a\u81ea\u52a8\u4f20\u64ad\u3002 1 layer . updateFields () \u63d0\u793a \u4f7f\u7528 with \u8bed\u53e5\u76f4\u63a5\u4fdd\u5b58\u66f4\u6539 \u4f7f\u7528 with edit(layer): \u66f4\u6539\u5c06\u5728\u7ed3\u675f\u540e\u8c03\u7528 commitChanges() \u81ea\u52a8\u63d0\u4ea4\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u5f02\u5e38\uff0c\u5b83\u5c06 rollBack() \u6240\u6709\u66f4\u6539\u3002\u8bf7\u53c2\u89c1 6.4.4 \u4f7f\u7528\u7f16\u8f91\u7f13\u51b2\u533a\u4fee\u6539\u77e2\u91cf\u56fe\u5c42","title":"6.4.5 \u6dfb\u52a0\u548c\u5220\u9664\u5b57\u6bb5"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#65","text":"\u5982\u679c\u9700\u8981\u5bf9\u77e2\u91cf\u56fe\u5c42\u8fdb\u884c\u9891\u7e41\u67e5\u8be2\uff0c\u7a7a\u95f4\u7d22\u5f15\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u4ee3\u7801\u7684\u6027\u80fd\u3002\u4f8b\u5982\uff0c\u60f3\u8c61\u4e00\u4e0b\uff0c\u4f60\u6b63\u5728\u7f16\u5199\u63d2\u503c\u7b97\u6cd5\uff0c\u5e76\u4e14\u5bf9\u4e8e\u7ed9\u5b9a\u4f4d\u7f6e\u4f60\u9700\u8981\u77e5\u9053\u70b9\u56fe\u5c42\u4e2d\u6700\u8fd1\u768410\u4e2a\u70b9\uff0c\u4ee5\u4fbf\u4f7f\u7528\u8fd9\u4e9b\u70b9\u6765\u8ba1\u7b97\u63d2\u503c\u3002\u5982\u679c\u6ca1\u6709\u7a7a\u95f4\u7d22\u5f15\uff0cQGIS\u627e\u5230\u8fd910\u4e2a\u70b9\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u8ba1\u7b97\u4ece\u6bcf\u4e2a\u70b9\u5230\u6307\u5b9a\u4f4d\u7f6e\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u6bd4\u8f83\u8fd9\u4e9b\u8ddd\u79bb\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u9879\u975e\u5e38\u8017\u65f6\u7684\u4efb\u52a1\uff0c\u7279\u522b\u662f\u5982\u679c\u9700\u8981\u5728\u591a\u4e2a\u4f4d\u7f6e\u91cd\u590d\u8fd9\u9879\u4efb\u52a1\u3002\u5982\u679c\u56fe\u5c42\u5b58\u5728\u7a7a\u95f4\u7d22\u5f15\uff0c\u5219\u64cd\u4f5c\u66f4\u6709\u6548\u3002 \u53ef\u4ee5\u5c06\u6ca1\u6709\u7a7a\u95f4\u7d22\u5f15\u7684\u56fe\u5c42\u89c6\u4e3a\u7535\u8bdd\u7c3f\uff0c\u5176\u4e2d\u4e0d\u5bf9\u7535\u8bdd\u53f7\u7801\u8fdb\u884c\u6392\u5e8f\u6216\u7d22\u5f15\u3002\u627e\u5230\u7ed9\u5b9a\u4eba\u5458\u7684\u7535\u8bdd\u53f7\u7801\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u4ece\u5934\u5f00\u59cb\u9605\u8bfb\uff0c\u76f4\u5230\u627e\u5230\u5b83\u4e3a\u6b62\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cQGIS\u77e2\u91cf\u56fe\u5c42\u4e0d\u4f1a\u521b\u5efa\u7a7a\u95f4\u7d22\u5f15\uff0c\u4f46\u4f60\u53ef\u4ee5\u8f7b\u677e\u521b\u5efa\u5b83\u4eec\u3002\u8fd9\u662f\u4f60\u8981\u505a\u7684\uff1a \u4f7f\u7528 QgsSpatialIndex \u7c7b\u521b\u5efa\u7a7a\u95f4\u7d22\u5f15\uff1a 1 index = QgsSpatialIndex () \u5411\u7d22\u5f15\u6dfb\u52a0\u8981\u7d20\u2014\u2014\u7d22\u5f15\u83b7\u53d6 QgsFeature \u5bf9\u8c61\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u5185\u90e8\u6570\u636e\u7ed3\u6784\u3002\u4f60\u53ef\u4ee5\u624b\u52a8\u521b\u5efa\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5148\u524d\u63d0\u4f9b\u8005\u7684 getFeatures() \u65b9\u6cd5\u3002 1 index . insertFeature ( feat ) \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u6279\u91cf\u52a0\u8f7d\u56fe\u5c42\u7684\u6240\u6709\u8981\u7d20 1 index = QgsSpatialIndex ( layer . getFeatures ()) \u4e00\u65e6\u7a7a\u95f4\u7d22\u5f15\u586b\u5145\u4e86\u4e00\u4e9b\u503c\uff0c\u4f60\u5c31\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u67e5\u8be2 1 2 3 4 5 # \u4ee5\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de\u4e94\u4e2a\u6700\u8fd1\u8981\u7d20\u7684ID nearest = index . nearestNeighbor ( QgsPointXY ( 25.4 , 12.7 ), 5 ) # \u4ee5\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de\u4e0e\u77e9\u5f62\u76f8\u4ea4\u7684\u8981\u7d20 intersect = index . intersects ( QgsRectangle ( 22.5 , 15.3 , 23.1 , 17.2 )) \u4f60\u53ef\u4ee5\u4f7f\u7528 QgsSpatialIndexKDBush \u7a7a\u95f4\u7d22\u5f15\u3002\u8fd9\u4e2a\u7a7a\u95f4\u7d22\u5f15\u4e0e\u6807\u51c6\u7a7a\u95f4\u5e93 QgsSpatialIndex \u76f8\u4f3c\uff0c\u4f46\u662f\u6709\u4ee5\u4e0b\u7279\u6027\uff1a **\u4ec5**\u652f\u6301\u652f\u6301\u5355\u70b9\u8981\u7d20 \u9759\u6001 \uff08\u6784\u9020\u540e\u65e0\u6cd5\u5c06\u5176\u4ed6\u8981\u7d20\u6dfb\u52a0\u5230\u7d22\u5f15\uff09 \u66f4\u5feb \u5141\u8bb8\u76f4\u63a5\u68c0\u7d22\u539f\u59cb\u8981\u7d20\u7684\u70b9\uff0c\u800c\u65e0\u9700\u5176\u4ed6\u8981\u7d20\u8bf7\u6c42 \u652f\u6301\u57fa\u4e8e\u771f\u5b9e\u8ddd\u79bb\u7684\u641c\u7d22\uff0c\u5373\u8fd4\u56de\u641c\u7d22\u534a\u5f84\u8303\u56f4\u5185\u7684\u6240\u6709\u70b9","title":"6.5 \u4f7f\u7528\u7a7a\u95f4\u7d22\u5f15"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#66-qgsvectorlayerutils","text":"QgsVectorLayerUtils \u7c7b\u5305\u542b\u4e00\u4e9b\u975e\u5e38\u6709\u7528\u7684\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u5728\u77e2\u91cf\u56fe\u5c42\u4e2d\u4f7f\u7528\u3002 \u4f8b\u5982\uff0c createFeature() \u65b9\u6cd5\u51c6\u5907\u5c06 QgsFeature \u6dfb\u52a0\u5230\u77e2\u91cf\u5c42\uff0c\u5e76\u4fdd\u7559\u6bcf\u4e2a\u5b57\u6bb5\u7684\u6240\u6709\u6700\u7ec8\u7ea6\u675f\u548c\u9ed8\u8ba4\u503c 1 2 vlayer = QgsVectorLayer ( \"testdata/airports.shp\" , \"airports\" , \"ogr\" ) feat = QgsVectorLayerUtils . createFeature ( vlayer ) \u4f7f\u7528 getValues() \u65b9\u6cd5\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u5b57\u6bb5\u6216\u8868\u8fbe\u5f0f\u7684\u503c\uff1a 1 2 3 4 5 6 7 vlayer = QgsVectorLayer ( \"testdata/airports.shp\" , \"airports\" , \"ogr\" ) # \u53ea\u9009\u62e9\u7b2c\u4e00\u4e2a\u8981\u7d20 vlayer . selectByIds ([ 1 ]) val = QgsVectorLayerUtils . getValues ( vlayer , \"NAME\" , selectedOnly = True ) print ( val ) # (['AMBLER'], True)","title":"6.6 QgsVectorLayerUtils\u7c7b"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#67","text":"\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u751f\u6210\u77e2\u91cf\u56fe\u5c42\u6570\u636e\u96c6\uff1a QgsVectorFileWriter \u7c7b\uff1a\u7528\u4e8e\u5c06\u77e2\u91cf\u6587\u4ef6\u5199\u5165\u786c\u76d8\uff0c\u901a\u8fc7\u9759\u6001\u8c03\u7528 writeAsVectorFormat() \u4fdd\u5b58\u6574\u4e2a\u77e2\u91cf\u56fe\u5c42\uff0c\u6216\u521b\u5efa\u8be5\u7c7b\u7684\u5b9e\u4f8b\u5e76\u8c03\u7528 addFeature() \u65b9\u6cd5\u3002\u8be5\u7c7b\u652f\u6301OGR\u652f\u6301\u7684\u6240\u6709\u77e2\u91cf\u683c\u5f0f\uff08GeoPackage\uff0cShapefile\uff0cGeoJSON\uff0cKML\u7b49\uff09\u3002 QgsVectorLayer \u7c7b\uff1a\u5b9e\u4f8b\u5316\u4e00\u4e2a\u6570\u636e\u63d0\u4f9b\u8005\uff0c\u63d0\u4f9b\u7684\u6570\u636e\u6e90\u8def\u5f84\uff08url\uff09\u4ee5\u8fde\u63a5\u548c\u8bbf\u95ee\u6570\u636e\u3002\u5b83\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u4e34\u65f6\u7684\u3001\u57fa\u4e8e\u5185\u5b58\u5b58\u50a8\u7684\u56fe\u5c42\uff08 memory \uff09\uff0c\u8fd8\u53ef\u4ee5\u8fde\u63a5\u5230OGR\u6570\u636e\u96c6\uff08 ogr \uff09\uff0c\u6570\u636e\u5e93\uff08 postgres \uff0c spatialite \uff0c mysql \uff0c mssql \uff09\uff0c\u66f4\u591a\uff08 wfs \uff0c gpx \uff0c delimitedtext ...\uff09\u3002","title":"6.7 \u521b\u5efa\u77e2\u91cf\u56fe\u5c42"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#671-qgsvectorfilewriter","text":"1 2 3 4 5 6 7 8 9 10 11 12 # SaveVectorOptions\u5305\u542b\u5f88\u591a\u8bbe\u7f6e\u9879 save_options = QgsVectorFileWriter . SaveVectorOptions () transform_context = QgsProject . instance () . transformContext () # \u5199\u5165GeoPackage (\u9ed8\u8ba4) error = QgsVectorFileWriter . writeAsVectorFormatV2 ( layer , \"testdata/my_new_file.gpkg\" , transform_context , save_options ) if error [ 0 ] == QgsVectorFileWriter . NoError : print ( \"success!\" ) else : print ( error ) 1 2 3 4 5 6 7 8 9 10 11 12 13 # \u4f7f\u7528utf-8\u7f16\u7801\u5199\u5165ESRI Shapefile save_options = QgsVectorFileWriter . SaveVectorOptions () save_options . driverName = \"ESRI Shapefile\" save_options . fileEncoding = \"UTF-8\" transform_context = QgsProject . instance () . transformContext () error = QgsVectorFileWriter . writeAsVectorFormatV2 ( layer , \"testdata/my_new_shapefile\" , transform_context , save_options ) if error [ 0 ] == QgsVectorFileWriter . NoError : print ( \"success again!\" ) else : print ( error ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # \u5199\u5165ESRI GDB\u6587\u4ef6 save_options = QgsVectorFileWriter . SaveVectorOptions () save_options . driverName = \"FileGDB\" # \u8bd1\u8005\u6ce8\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6ca1\u6709FileGDB\u9a71\u52a8 # \u5982\u679c\u6ca1\u6709\u51e0\u4f55 save_options . overrideGeometryType = QgsWkbTypes . Unknown save_options . actionOnExistingFile = QgsVectorFileWriter . CreateOrOverwriteLayer save_options . layerName = 'my_new_layer_name' transform_context = QgsProject . instance () . transformContext () gdb_path = \"testdata/my_example.gdb\" error = QgsVectorFileWriter . writeAsVectorFormatV2 ( layer , gdb_path , transform_context , save_options ) if error [ 0 ] == QgsVectorFileWriter . NoError : print ( \"success!\" ) else : print ( error ) \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 FieldValueConverter \u8f6c\u6362\u5b57\u6bb5\u4f7f\u5176\u4e0e\u4e0d\u540c\u683c\u5f0f\u517c\u5bb9\u3002\u4f8b\u5982\uff0c\u8981\u5c06\u6570\u7ec4\u53d8\u91cf\u7c7b\u578b\uff08\u4f8b\u5982\u5728Postgres\u4e2d\uff09\u8f6c\u6362\u4e3a\u6587\u672c\u7c7b\u578b\uff0c\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 LIST_FIELD_NAME = 'xxxx' class ESRIValueConverter ( QgsVectorFileWriter . FieldValueConverter ): def __init__ ( self , layer , list_field ): QgsVectorFileWriter . FieldValueConverter . __init__ ( self ) self . layer = layer self . list_field_idx = self . layer . fields () . indexFromName ( list_field ) def convert ( self , fieldIdxInLayer , value ): if fieldIdxInLayer == self . list_field_idx : return QgsListFieldFormatter () . representValue ( layer = vlayer , fieldIndex = self . list_field_idx , config = {}, cache = None , value = value ) else : return value def fieldDefinition ( self , field ): idx = self . layer . fields () . indexFromName ( field . name ()) if idx == self . list_field_idx : return QgsField ( LIST_FIELD_NAME , QVariant . String ) else : return self . layer . fields ()[ idx ] converter = ESRIValueConverter ( vlayer , LIST_FIELD_NAME ) opts = QgsVectorFileWriter . SaveVectorOptions () opts . fieldValueConverter = converter \u8fd8\u53ef\u4ee5\u6307\u5b9a\u76ee\u6807CRS\u2014\u2014\u5982\u679c\u5c06\u4e00\u4e2a\u6709\u6548\u7684 QgsCoordinateReferenceSystem \u5b9e\u4f8b\u4f5c\u4e3a\u7b2c\u56db\u4e2a\u53c2\u6570\uff0c\u5219\u5c06\u8be5\u56fe\u5c42\u8f6c\u6362\u4e3a\u8fd9\u4e2aCRS\u3002 \u6709\u5173\u6709\u6548\u7684\u9a71\u52a8\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u8bf7\u8c03\u7528 supportedFiltersAndFormats \u65b9\u6cd5\u6216\u67e5\u9605 OGR\u652f\u6301\u7684\u683c\u5f0f \u2014\u2014\u4f60\u5e94\u8be5\u5c06\u201cCode\u201d\u5217\u4e2d\u7684\u503c\u4f5c\u4e3a\u9a71\u52a8\u7a0b\u5e8f\u540d\u79f0\u4f20\u9012\u3002 \uff08\u53ef\u9009\uff09\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u662f\u4ec5\u5bfc\u51fa\u9009\u4e2d\u7684\u8981\u7d20\uff0c\u4f20\u9012\u66f4\u591a\u9a71\u52a8\u7a0b\u5e8f\u7279\u5b9a\u7684\u9009\u9879\u8fdb\u884c\u521b\u5efa\uff0c\u6216\u8005\u544a\u8bc9\u6570\u636e\u5199\u5165\u7c7b\u4e0d\u8981\u521b\u5efa\u5c5e\u6027...\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\uff08\u53ef\u9009\uff09\u53c2\u6570; \u8bf7\u53c2\u9605 QgsVectorFileWriter \u7684\u8be6\u7ec6\u4fe1\u606f","title":"6.7.1 \u4eceQgsVectorFileWriter\u5b9e\u4f8b\u521b\u5efa"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#672","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 from qgis.PyQt.QtCore import QVariant # \u4e3a\u8981\u7d20\u5c5e\u6027\u5b9a\u4e49\u5b57\u6bb5\u3002\u9700\u8981QgsFields\u5bf9\u8c61 fields = QgsFields () fields . append ( QgsField ( \"first\" , QVariant . Int )) fields . append ( QgsField ( \"second\" , QVariant . String )) \"\"\" \u521b\u5efa\u4e00\u4e2a\u77e2\u91cf\u6587\u4ef6\u7f16\u5199\u5668\u7684\u5b9e\u4f8b\uff0c\u5b83\u5c06\u521b\u5efa\u77e2\u91cf\u6587\u4ef6 \u53c2\u6570\uff1a 1. \u65b0\u6587\u4ef6\u7684\u8def\u5f84\uff08\u5982\u679c\u5df2\u5b58\u5728\u5219\u5931\u8d25\uff09 2. \u5b57\u6bb5\u6620\u5c04 3. \u51e0\u4f55\u7c7b\u578b - WKBTYPE\u679a\u4e3e 4. \u56fe\u5c42\u7684\u7a7a\u95f4\u53c2\u8003\uff08QgsCoordinateReferenceSystem\u7684\u5b9e\u4f8b\uff09 5. \u5750\u6807\u8f6c\u6362\u4e0a\u4e0b\u6587 6. \u8f93\u51fa\u9009\u9879\uff08\u9a71\u52a8\u540d\u79f0\uff0c\u7f16\u7801\u7b49\uff09 \"\"\" crs = QgsProject . instance () . crs () transform_context = QgsProject . instance () . transformContext () save_options = QgsVectorFileWriter . SaveVectorOptions () save_options . driverName = \"ESRI Shapefile\" save_options . fileEncoding = \"UTF-8\" writer = QgsVectorFileWriter . create ( \"testdata/my_new_shapefile.shp\" , fields , QgsWkbTypes . Point , crs , transform_context , save_options ) if writer . hasError () != QgsVectorFileWriter . NoError : print ( \"Error when creating shapefile: \" , writer . errorMessage ()) # \u6dfb\u52a0\u4e00\u4e2a\u8981\u7d20 fet = QgsFeature () fet . setGeometry ( QgsGeometry . fromPointXY ( QgsPointXY ( 10 , 10 ))) fet . setAttributes ([ 1 , \"text\" ]) writer . addFeature ( fet ) # \u5220\u9664writer\u5199\u5165\u5230\u78c1\u76d8 del writer","title":"6.7.2 \u76f4\u63a5\u4ece\u8981\u7d20\u521b\u5efa"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#673-qgsvectorlayer","text":"\u5728 QgsVectorLayer \u7c7b\u652f\u6301\u7684\u6240\u6709\u6570\u636e\u63d0\u4f9b\u8005\u4e2d\uff0c\u8ba9\u6211\u4eec\u5173\u6ce8\u57fa\u4e8e\u5185\u5b58\u7684\u56fe\u5c42\u3002\u5185\u5b58\u63d0\u4f9b\u8005\u4e3b\u8981\u4f9b\u63d2\u4ef6\u6216\u7b2c\u4e09\u65b9\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u3002\u5b83\u4e0d\u4f1a\u5c06\u6570\u636e\u5b58\u50a8\u5728\u78c1\u76d8\u4e2d\uff0c\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u5feb\u901f\u5728\u540e\u53f0\u4f7f\u7528\u4e34\u65f6\u56fe\u5c42\u3002 \u63d0\u4f9b\u8005\u652f\u6301string\uff0cint\u548cdouble\u5b57\u6bb5\u3002 \u5185\u5b58\u63d0\u4f9b\u8005\u8fd8\u652f\u6301\u7a7a\u95f4\u7d22\u5f15\uff0c\u901a\u8fc7\u8c03\u7528\u63d0\u4f9b\u8005\u7684 createSpatialIndex() \u65b9\u6cd5\u6765\u542f\u7528\u3002\u521b\u5efa\u7a7a\u95f4\u7d22\u5f15\u540e\uff0c\u4f60\u5c06\u80fd\u591f\u66f4\u5feb\u5730\u8fed\u4ee3\u8f83\u5c0f\u533a\u57df\u5185\u7684\u8981\u7d20\uff08\u56e0\u4e3a\u6ca1\u6709\u5fc5\u8981\u904d\u5386\u6240\u6709\u8981\u7d20\uff0c\u53ea\u904d\u5386\u6307\u5b9a\u77e9\u5f62\u5185\u7684\u8981\u7d20\uff09\u3002 \u901a\u8fc7\u5c06 \"memory\" \u4f5c\u4e3a QgsVectorLayer \u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u6765\u521b\u5efa\u5185\u5b58\u63d0\u4f9b\u8005\u3002 \u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u4e5f\u9700\u8981\u5b9a\u4e49\u56fe\u5c42\u51e0\u4f55\u7c7b\u578b\u7684URI\uff0c\u5305\u62ec\uff1a \"Point\" \uff0c \"LineString\" \uff0c \"Polygon\" \uff0c \"MultiPoint\" \uff0c \"MultiLineString\" \uff0c \"MultiPolygon\" or \"None\" \u3002 URI\u8fd8\u53ef\u4ee5\u6307\u5b9a\u5750\u6807\u53c2\u8003\u7cfb\u7edf\u3001\u5b57\u6bb5\u548c\u7d22\u5f15\u3002\u8bed\u6cd5\u662f\uff1a crs=definition \u6307\u5b9a\u5750\u6807\u53c2\u8003\u7cfb\u7edf\uff0c\u5176\u4e2d\u5b9a\u4e49\u53ef\u4ee5\u662f\u63a5\u53d7\u7684\u4efb\u4f55\u5f62\u5f0f QgsCoordinateReferenceSystem.createFromString() index=yes \u6307\u5b9a\u63d0\u4f9b\u8005\u5c06\u4f7f\u7528\u7a7a\u95f4\u7d22\u5f15 field=name:type(length,precision) \u6307\u5b9a\u56fe\u5c42\u7684\u5c5e\u6027\u3002\u8be5\u5c5e\u6027\u5177\u6709\u540d\u79f0\uff0c\u53ef\u9009\u7684\u7c7b\u578b\uff08integer, double, or string\uff09\uff0c\u957f\u5ea6\u548c\u7cbe\u5ea6\u3002\u53ef\u80fd\u6709\u591a\u4e2a\u5b57\u6bb5\u5b9a\u4e49\u3002 \u4ee5\u4e0bURI\u793a\u4f8b\u5305\u542b\u6240\u6709\u8fd9\u4e9b\u9009\u9879 1 \"Point?crs=epsg:4326&field=id:integer&field=name:string(20)&index=yes\" \u4ee5\u4e0b\u793a\u4f8b\u4ee3\u7801\u8bf4\u660e\u4e86\u5982\u4f55\u521b\u5efa\u548c\u586b\u5145\u5185\u5b58\u63d0\u4f9b\u8005 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from qgis.PyQt.QtCore import QVariant # \u521b\u5efa\u56fe\u5c42 vl = QgsVectorLayer ( \"Point\" , \"temporary_points\" , \"memory\" ) pr = vl . dataProvider () # \u6dfb\u52a0\u5b57\u6bb5 pr . addAttributes ([ QgsField ( \"name\" , QVariant . String ), QgsField ( \"age\" , QVariant . Int ), QgsField ( \"size\" , QVariant . Double )]) vl . updateFields () # \u544a\u8bc9\u77e2\u91cf\u56fe\u5c42\u4ece\u63d0\u4f9b\u8005\u83b7\u53d6\u66f4\u6539 # \u6dfb\u52a0\u4e00\u4e2a\u8981\u7d20 fet = QgsFeature () fet . setGeometry ( QgsGeometry . fromPointXY ( QgsPointXY ( 10 , 10 ))) fet . setAttributes ([ \"Johny\" , 2 , 0.3 ]) pr . addFeatures ([ fet ]) # \u5728\u6dfb\u52a0\u65b0\u8981\u7d20\u65f6\u66f4\u65b0\u56fe\u5c42\u7684\u8303\u56f4\uff0c\u56e0\u4e3a\u63d0\u4f9b\u8005\u4e2d\u7684\u8303\u56f4\u66f4\u6539\u4e0d\u4f1a\u4f20\u64ad\u5230\u56fe\u5c42 vl . updateExtents () \u6700\u540e\uff0c\u8ba9\u6211\u4eec\u68c0\u67e5\u4e00\u5207\u662f\u5426\u987a\u5229 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # \u663e\u793a\u4e00\u4e9b\u7edf\u8ba1 print ( \"fields:\" , len ( pr . fields ())) print ( \"features:\" , pr . featureCount ()) e = vl . extent () print ( \"extent:\" , e . xMinimum (), e . yMinimum (), e . xMaximum (), e . yMaximum ()) # \u904d\u5386\u8981\u7d20 features = vl . getFeatures () for fet in features : print ( \"F:\" , fet . id (), fet . attributes (), fet . geometry () . asPoint ()) # fields: 3 # features: 1 # extent: 10.0 10.0 10.0 10.0 # F: 1 ['Johny', 2, 0.3] <QgsPointXY: POINT(10 10)>","title":"6.7.3 \u4eceQgsVectorLayer\u5b9e\u4f8b\u521b\u5efa"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#68","text":"\u6e32\u67d3\u77e2\u91cf\u56fe\u5c42\u65f6\uff0c\u6570\u636e\u7684\u5916\u89c2\u7531**\u6e32\u67d3\u5668**\u548c\u4e0e\u56fe\u5c42\u76f8\u5173\u8054\u7684**\u7b26\u53f7**\u63d0\u4f9b \u3002\u7b26\u53f7\u662f\u4e00\u4e2a\u7c7b\u2014\u2014\u8d1f\u8d23\u7ed8\u5236\u8981\u7d20\u7684\u53ef\u89c6\u5316\uff0c\u800c\u6e32\u67d3\u5668\u786e\u5b9a\u7528\u4e8e\u7279\u5b9a\u8981\u7d20\u7684\u7b26\u53f7\u3002 \u83b7\u5f97\u56fe\u5c42\u7684\u6e32\u67d3\u5668\uff0c\u5982\u4e0b\u6240\u793a\uff1a 1 renderer = layer . renderer () \u6709\u4e86\u8fd9\u4e2a\u53c2\u8003\uff0c\u8ba9\u6211\u4eec\u6765\u63a2\u8ba8\u4e00\u4e0b 1 2 print ( \"Type:\" , renderer . type ()) # Type: singleSymbol QGIS\u6838\u5fc3\u5e93\u4e2d\u6709\u51e0\u79cd\u5df2\u77e5\u7684\u6e32\u67d3\u5668\u7c7b\u578b\uff1a \u7c7b\u578b \u7c7b \u63cf\u8ff0 singleSymbol QgsSingleSymbolRenderer \u4f7f\u7528\u76f8\u540c\u7684\u7b26\u53f7\u5448\u73b0\u6240\u6709\u8981\u7d20 categorizedSymbol QgsCategorizedSymbolRenderer \u4f7f\u7528\u6bcf\u4e2a\u7c7b\u522b\u7684\u4e0d\u540c\u7b26\u53f7\u5448\u73b0\u8981\u7d20 graduatedSymbol QgsGraduatedSymbolRenderer \u4e3a\u6bcf\u4e2a\u503c\u8303\u56f4\u4f7f\u7528\u4e0d\u540c\u7684\u7b26\u53f7\u5448\u73b0\u8981\u7d20 \u53ef\u80fd\u8fd8\u6709\u4e00\u4e9b\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\u7c7b\u578b\uff0c\u6240\u4ee5\u6c38\u8fdc\u4e0d\u8981\u5047\u8bbe\u53ea\u6709\u8fd9\u4e9b\u7c7b\u578b\u3002\u4f60\u53ef\u4ee5\u67e5\u8be2 QgsApplication \u7684 QgsRendererRegistry \u65b9\u6cd5\u67e5\u627e\u5f53\u524d\u53ef\u7528\u7684\u6e32\u67d3\u5668\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 print ( QgsApplication . rendererRegistry () . renderersList ()) # Print: [ 'nullSymbol' , 'singleSymbol' , 'categorizedSymbol' , 'graduatedSymbol' , 'RuleRenderer' , 'pointDisplacement' , 'pointCluster' , 'invertedPolygonRenderer' , 'heatmapRenderer' , '25dRenderer' ] \u53ef\u4ee5\u4ee5\u6587\u672c\u5f62\u5f0f\u83b7\u53d6\u6e32\u67d3\u5668\u7684\u5185\u5bb9\u2014\u2014\u53ef\u7528\u4e8e\u8c03\u8bd5 1 2 print ( renderer . dump ()) # SINGLE: MARKER SYMBOL (1 layers) color 190,207,80,255","title":"6.8 \u77e2\u91cf\u56fe\u5c42\u7684\u5916\u89c2\uff08\u7b26\u53f7\u7cfb\u7edf\uff09"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#681","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 symbol() \u65b9\u6cd5\u83b7\u53d6\u7528\u4e8e\u6e32\u67d3\u7684\u7b26\u53f7\uff0c\u4f7f\u7528 setSymbol() \u65b9\u6cd5\u66f4\u6539\u5b83\uff08C ++\u5f00\u53d1\u4eba\u5458\u6ce8\u610f\uff1a\u6e32\u67d3\u5668\u5c06\u83b7\u53d6\u7b26\u53f7\u7684\u6240\u6709\u6743\u3002\uff09 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 setSymbol() \u5e76\u4f20\u9012\u9002\u5f53\u7684\u7b26\u53f7\u5b9e\u4f8b\u6765\u66f4\u6539\u77e2\u91cf\u56fe\u5c42\u7684\u7b26\u53f7\u3002 \u70b9 \uff0c*\u7ebf*\u548c*\u591a\u8fb9\u5f62*\u56fe\u5c42\u7684\u7b26\u53f7\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u76f8\u5e94\u7684\u7c7b QgsMarkerSymbol \uff0c QgsLineSymbol \u548c QgsFillSymbol \u7684 createSimple() \u65b9\u6cd5\u6765\u521b\u5efa\u3002 \u7ed9\u4f20\u9012 createSimple() \u7684\u5b57\u5178\u53c2\u6570\u6765\u8bbe\u7f6e\u7b26\u53f7\u7684\u6837\u5f0f\u5c5e\u6027\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 setSymbol() \u5e76\u4f20\u9012 QgsMarkerSymbol \u5b9e\u4f8b, \u6765\u66ff\u6362\u7279\u5b9a**\u70b9**\u56fe\u5c42\u7684\u7b26\u53f7\uff0c\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u6240\u793a\uff1a 1 2 3 4 symbol = QgsMarkerSymbol . createSimple ({ 'name' : 'square' , 'color' : 'red' }) layer . renderer () . setSymbol ( symbol ) # \u663e\u793a\u66f4\u6539 layer . triggerRepaint () name \u8868\u793a\u7b26\u53f7\u7684\u5f62\u72b6\uff0c\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4efb\u4f55\u4e00\u79cd\uff1a circle square cross rectangle diamond pentagon triangle equilateral_triangle star regular_star arrow filled_arrowhead x \u83b7\u53d6\u7b26\u53f7\u5b9e\u4f8b\u7684\u7b2c\u4e00\u4e2a\u7b26\u53f7\u56fe\u5c42\u7684\u5b8c\u6574\u5c5e\u6027\u5217\u8868\uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u793a\u4f8b\u4ee3\u7801\u8fdb\u884c\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 print ( layer . renderer () . symbol () . symbolLayers ()[ 0 ] . properties ()) # Prints { 'angle' : '0' , 'color' : '0,128,0,255' , 'horizontal_anchor_point' : '1' , 'joinstyle' : 'bevel' , 'name' : 'circle' , 'offset' : '0,0' , 'offset_map_unit_scale' : '0,0' , 'offset_unit' : 'MM' , 'outline_color' : '0,0,0,255' , 'outline_style' : 'solid' , 'outline_width' : '0' , 'outline_width_map_unit_scale' : '0,0' , 'outline_width_unit' : 'MM' , 'scale_method' : 'area' , 'size' : '2' , 'size_map_unit_scale' : '0,0' , 'size_unit' : 'MM' , 'vertical_anchor_point' : '1' } \u5982\u679c\u8981\u66f4\u6539\u67d0\u4e9b\u5c5e\u6027\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 # \u4f60\u53ef\u4ee5\u66f4\u6539\u5355\u4e2a\u5c5e\u6027... layer . renderer () . symbol () . symbolLayer ( 0 ) . setSize ( 3 ) # ...\u4f46\u5e76\u975e\u6240\u6709\u5c5e\u6027\u90fd\u53ef\u4ee5\u4ece\u65b9\u6cd5\u8bbf\u95ee\uff0c # \u4f60\u4e5f\u53ef\u4ee5\u5b8c\u5168\u66ff\u6362\u7b26\u53f7\uff1a props = layer . renderer () . symbol () . symbolLayer ( 0 ) . properties () props [ 'color' ] = 'yellow' props [ 'name' ] = 'square' layer . renderer () . setSymbol ( QgsMarkerSymbol . createSimple ( props )) # \u663e\u793a\u66f4\u6539 layer . triggerRepaint ()","title":"6.8.1 \u5355\u4e00\u7b26\u53f7\u6e32\u67d3\u5668"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#682","text":"\u4f7f\u7528\u5206\u7c7b\u6e32\u67d3\u5668\u65f6\uff0c\u53ef\u4ee5\u67e5\u8be2\u548c\u8bbe\u7f6e\u7528\u4e8e\u5206\u7c7b\u7684\u5c5e\u6027\uff1a\u4f7f\u7528 classAttribute() \u548c setClassAttribute() \u65b9\u6cd5\u3002 \u83b7\u53d6\u7c7b\u522b\u5217\u8868\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 categorized_renderer = QgsCategorizedSymbolRenderer () # \u6dfb\u52a0\u4e00\u4e9b\u7c7b\u522b cat1 = QgsRendererCategory ( '1' , QgsMarkerSymbol (), 'category 1' ) cat2 = QgsRendererCategory ( '2' , QgsMarkerSymbol (), 'category 2' ) categorized_renderer . addCategory ( cat1 ) categorized_renderer . addCategory ( cat2 ) for cat in categorized_renderer . categories (): print ( \" {} : {} :: {} \" . format ( cat . value (), cat . label (), cat . symbol ())) # 1: category 1 :: <qgis._core.QgsMarkerSymbol object at 0x7f378ffcd9d8> # 2: category 2 :: <qgis._core.QgsMarkerSymbol object at 0x7f378ffcd9d8> \u5176\u4e2d value() \u662f\u7c7b\u522b\u4e4b\u95f4\u7528\u4e8e\u533a\u522b\u7684\u503c\uff0c label() \u662f\u7528\u4e8e\u7c7b\u522b\u63cf\u8ff0\u7684\u6587\u672c\uff0c symbol() \u65b9\u6cd5\u8fd4\u56de\u6240\u5206\u914d\u7684\u7b26\u53f7\u3002 \u6e32\u67d3\u5668\u901a\u5e38\u8fd8\u5b58\u50a8\u7528\u4e8e\u5206\u7c7b\u7684\u539f\u59cb\u7b26\u53f7\u548c\u8272\u5e26\uff1a sourceColorRamp() \u548c sourceSymbol() \u65b9\u6cd5\u3002","title":"6.8.2 \u5206\u7c7b\u7b26\u53f7\u6e32\u67d3\u5668"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#683","text":"\u6b64\u6e32\u67d3\u5668\u4e0e\u4e0a\u9762\u63cf\u8ff0\u7684\u5206\u7c7b\u7b26\u53f7\u6e32\u67d3\u5668\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u5b83\u4e0d\u662f\u6bcf\u4e2a\u7c7b\u7684\u4e00\u4e2a\u5c5e\u6027\u503c\uff0c\u800c\u662f\u4f7f\u7528\u503c\u8303\u56f4\uff0c\u56e0\u6b64\u53ea\u80fd\u7528\u4e8e\u6570\u5b57\u5c5e\u6027\u3002 \u4e86\u89e3\u6709\u5173\u6e32\u67d3\u5668\u4e2d\u4f7f\u7528\u8303\u56f4\u7684\u66f4\u591a\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 graduated_renderer = QgsGraduatedSymbolRenderer () # \u6dfb\u52a0\u4e00\u4e9b\u7c7b\u522b graduated_renderer . addClassRange ( QgsRendererRange ( QgsClassificationRange ( 'class 0-100' , 0 , 100 ), QgsMarkerSymbol ())) graduated_renderer . addClassRange ( QgsRendererRange ( QgsClassificationRange ( 'class 101-200' , 101 , 200 ), QgsMarkerSymbol ())) for ran in renderer . ranges (): print ( \" {} - {} : {} {} \" . format ( ran . lowerValue (), ran . upperValue (), ran . label (), ran . symbol () )) # 0.0 - 100.0: class 0-100 <qgis._core.QgsMarkerSymbol object at 0x7f8bad281b88> # 101.0 - 200.0: class 101-200 <qgis._core.QgsMarkerSymbol object at 0x7f8bad281b88> \u4f60\u53ef\u4ee5\u518d\u6b21\u4f7f\u7528 classAttribute() \uff08\u67e5\u627e\u5206\u7c7b\u5c5e\u6027\u540d\u79f0\uff09 sourceSymbol() \u548c sourceColorRamp() \u65b9\u6cd5\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cd mode() \u65b9\u6cd5\u53ef\u4ee5\u786e\u5b9a\u8303\u56f4\u7684\u521b\u5efa\u65b9\u5f0f\uff1a\u4f7f\u7528\u7b49\u95f4\u9694\uff0c\u5206\u4f4d\u6570\u6216\u5176\u4ed6\u65b9\u6cd5\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u521b\u5efa\u81ea\u5df1\u7684\u6e10\u53d8\u7b26\u53f7\u6e32\u67d3\u5668\uff0c\u5219\u53ef\u4ee5\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5982\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u6bb5\u6240\u793a\uff08\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u4e24\u4e2a\u7c7b\u522b\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from qgis.PyQt import QtGui myVectorLayer = QgsVectorLayer ( myVectorPath , myName , 'ogr' ) myTargetField = 'target_field' myRangeList = [] myOpacity = 1 # \u521b\u5efa\u6211\u4eec\u7684\u7b2c\u4e00\u7b26\u53f7\u548c\u8303\u56f4... myMin = 0.0 myMax = 50.0 myLabel = 'Group 1' myColour = QtGui . QColor ( '#ffee00' ) mySymbol1 = QgsSymbol . defaultSymbol ( myVectorLayer . geometryType ()) mySymbol1 . setColor ( myColour ) mySymbol1 . setOpacity ( myOpacity ) myRange1 = QgsRendererRange ( myMin , myMax , mySymbol1 , myLabel ) myRangeList . append ( myRange1 ) # \u73b0\u5728\u521b\u5efa\u53e6\u4e00\u4e2a\u7b26\u53f7\u548c\u8303\u56f4... myMin = 50.1 myMax = 100 myLabel = 'Group 2' myColour = QtGui . QColor ( '#00eeff' ) mySymbol2 = QgsSymbol . defaultSymbol ( myVectorLayer . geometryType ()) mySymbol2 . setColor ( myColour ) mySymbol2 . setOpacity ( myOpacity ) myRange2 = QgsRendererRange ( myMin , myMax , mySymbol2 , myLabel ) myRangeList . append ( myRange2 ) myRenderer = QgsGraduatedSymbolRenderer ( '' , myRangeList ) myRenderer . setMode ( QgsGraduatedSymbolRenderer . EqualInterval ) myRenderer . setClassAttribute ( myTargetField ) myVectorLayer . setRenderer ( myRenderer ) QgsProject . instance () . addMapLayer ( myVectorLayer )","title":"6.8.3 \u6e10\u53d8\u7b26\u53f7\u6e32\u67d3\u5668"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#684","text":"\u5bf9\u4e8e\u7b26\u53f7\u7684\u8868\u793a\uff0c QgsSymbol \u57fa\u7c7b\u6709\u4e09\u4e2a\u6d3e\u751f\u7c7b\uff1a QgsMarkerSymbol \u2014\u2014\u7528\u4e8e\u70b9\u8981\u7d20 QgsLineSymbol \u2014\u2014\u7528\u4e8e\u7ebf\u8981\u7d20 QgsFillSymbol \u2014\u2014\u7528\u4e8e\u9762\u8981\u7d20 \u6bcf\u4e2a\u7b26\u53f7\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u7b26\u53f7\u56fe\u5c42 \uff08\u4ece QgsSymbolLayer \u6d3e\u751f\u7684\u7c7b\uff09\u3002\u7b26\u53f7\u56fe\u5c42\u6267\u884c\u5b9e\u9645\u6e32\u67d3\uff0c\u7b26\u53f7\u7c7b\u672c\u8eab\u4ec5\u7528\u4f5c\u7b26\u53f7\u56fe\u5c42\u7684\u5bb9\u5668\u3002 \u62e5\u6709\u4e00\u4e2a\u7b26\u53f7\u5b9e\u4f8b\uff08\u4f8b\u5982\u6765\u81ea\u6e32\u67d3\u5668\uff09\uff0c\u53ef\u4ee5\u63a2\u7d22\u5b83\uff1a type() \u65b9\u6cd5\u8bf4\u660e\u5b83\u662f\u6807\u8bb0\u3001\u7ebf\u8fd8\u662f\u586b\u5145\u7b26\u53f7\u3002 dump() \u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u7b26\u53f7\u7684\u7b80\u77ed\u63cf\u8ff0\u3002\u83b7\u53d6\u7b26\u53f7\u56fe\u5c42\u5217\u8868\uff1a 1 2 3 4 5 6 marker_symbol = QgsMarkerSymbol () for i in range ( marker_symbol . symbolLayerCount ()): lyr = marker_symbol . symbolLayer ( i ) print ( \" {} : {} \" . format ( i , lyr . layerType ())) # 0: SimpleMarker \u627e\u51fa\u7b26\u53f7\u7684\u989c\u8272\u4f7f\u7528 color() \u65b9\u6cd5\uff0c setColor() \u6539\u53d8\u5176\u989c\u8272\u3002\u4f7f\u7528\u6807\u8bb0\u7b26\u53f7\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 size() \u548c angle() \u65b9\u6cd5\u67e5\u8be2\u7b26\u53f7\u5927\u5c0f\u548c\u65cb\u8f6c\u3002\u5bf9\u4e8e\u7ebf\u7b26\u53f7\uff0c width() \u65b9\u6cd5\u8fd4\u56de\u7ebf\u5bbd\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5927\u5c0f\u548c\u5bbd\u5ea6\u4ee5\u6beb\u7c73\u4e3a\u5355\u4f4d\uff0c\u89d2\u5ea6\u4ee5\u5ea6\u4e3a\u5355\u4f4d\u3002","title":"6.8.4 \u4f7f\u7528\u7b26\u53f7"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#6841","text":"\u5982\u524d\u6240\u8ff0\uff0c\u7b26\u53f7\u5c42\uff08 QgsSymbolLayer \u7684\u5b50\u7c7b\uff09\u51b3\u5b9a\u8981\u7d20\u7684\u5916\u89c2\u3002\u6709\u4e00\u4e9b\u57fa\u672c\u7684\u7b26\u53f7\u56fe\u5c42\u7c7b\u7528\u4e8e\u4e00\u822c\u7528\u9014\u3002\u53ef\u4ee5\u5b9e\u73b0\u65b0\u7684\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\uff0c\u4efb\u610f\u5b9a\u5236\u8981\u7d20\u7684\u5448\u73b0\u65b9\u5f0f\u3002 layerType() \u65b9\u6cd5\u552f\u4e00\u6807\u8bc6\u7b26\u53f7\u56fe\u5c42\u7c7b\u2014\u2014\u57fa\u672c\u7c7b\u548c\u9ed8\u8ba4\u7c7b SimpleMarker \uff0c SimpleLine \u4ee5\u53ca SimpleFill \u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u83b7\u53d6\u53ef\u4ee5\u4e3a\u7b26\u53f7\u56fe\u5c42\u521b\u5efa\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\u7684\u5b8c\u6574\u5217\u8868\uff1a 1 2 3 4 5 from qgis.core import QgsSymbolLayerRegistry myRegistry = QgsApplication . symbolLayerRegistry () myMetadata = myRegistry . symbolLayerMetadata ( \"SimpleFill\" ) for item in myRegistry . symbolLayersForType ( QgsSymbol . Marker ): print ( item ) \u8f93\u51fa\uff1a 1 2 3 4 5 6 7 EllipseMarker FilledMarker FontMarker GeometryGenerator SimpleMarker SvgMarker VectorField QgsSymbolLayerRegistry \u7c7b\u7ba1\u7406\u4e00\u4e2a\u6240\u6709\u53ef\u7528\u7b26\u53f7\u5c42\u7c7b\u578b\u7684\u6570\u636e\u5e93\u3002 \u8bbf\u95ee\u7b26\u53f7\u56fe\u5c42\u6570\u636e\uff0c\u4f7f\u7528 properties() \u65b9\u6cd5\u8fd4\u56de\u5c5e\u6027\u7684\u952e\u503c\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u51b3\u5b9a\u5916\u89c2\u3002\u6bcf\u4e2a\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\u90fd\u6709\u4e00\u7ec4\u7279\u5b9a\u7684\u5c5e\u6027\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u901a\u7528\u7684\u65b9\u6cd5 color() \uff0c size() \uff0c angle() \u548c width() \u3002\u5f53\u7136\uff0c\u5c3a\u5bf8\u548c\u89d2\u5ea6\u4ec5\u9002\u7528\u4e8e\u6807\u8bb0\u7b26\u53f7\u56fe\u5c42\uff0c\u5bbd\u5ea6\u9002\u7528\u4e8e\u7ebf\u7b26\u53f7\u56fe\u5c42\u3002","title":"6.8.4.1 \u4f7f\u7528\u7b26\u53f7\u56fe\u5c42"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#6842","text":"\u60f3\u8c61\u4e00\u4e0b\uff0c\u4f60\u60f3\u8981\u81ea\u5b9a\u4e49\u6570\u636e\u7684\u5448\u73b0\u65b9\u5f0f\u3002\u4f60\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u7b26\u53f7\u56fe\u5c42\u7c7b\uff0c\u5b8c\u5168\u6309\u7167\u4f60\u7684\u610f\u613f\u7ed8\u5236\u8981\u7d20\u3002\u4ee5\u4e0b\u662f\u7ed8\u5236\u5177\u6709\u6307\u5b9a\u534a\u5f84\u7684\u7ea2\u8272\u5706\u5708\u7684\u6807\u8bb0\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 from qgis.core import QgsMarkerSymbolLayer from qgis.PyQt.QtGui import QColor class FooSymbolLayer ( QgsMarkerSymbolLayer ): def __init__ ( self , radius = 4.0 ): QgsMarkerSymbolLayer . __init__ ( self ) self . radius = radius self . color = QColor ( 255 , 0 , 0 ) def layerType ( self ): return \"FooMarker\" def properties ( self ): return { \"radius\" : str ( self . radius ) } def startRender ( self , context ): pass def stopRender ( self , context ): pass def renderPoint ( self , point , context ): # \u6e32\u67d3\u53d6\u51b3\u4e8e\u662f\u5426\u9009\u62e9\u4e86\u7b26\u53f7 (QGIS >= 1.5) color = context . selectionColor () if context . selected () else self . color p = context . renderContext () . painter () p . setPen ( color ) p . drawEllipse ( point , self . radius , self . radius ) def clone ( self ): return FooSymbolLayer ( self . radius ) layerType() \u65b9\u6cd5\u786e\u5b9a\u7b26\u53f7\u56fe\u5c42\u7684\u540d\u79f0\uff0c\u5b83\u5fc5\u987b\u5728\u6240\u6709\u7b26\u53f7\u5c42\u4e2d\u662f\u552f\u4e00\u7684\u3002 properties() \u65b9\u6cd5\u7528\u4e8e\u5c5e\u6027\u7684\u6301\u4e45\u5316\u3002 clone() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u7b26\u53f7\u56fe\u5c42\u7684\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u5c5e\u6027\u5b8c\u5168\u76f8\u540c\u3002\u6700\u540e\uff0c\u6e32\u67d3\u65b9\u6cd5\uff1a startRender() \u5728\u6e32\u67d3\u7b2c\u4e00\u4e2a\u8981\u7d20\u4e4b\u524d\u88ab\u8c03\u7528\uff0c stopRender() \u6e32\u67d3\u5b8c\u6210\u65f6\u88ab\u8c03\u7528\uff0c renderPoint() \u6e32\u67d3\u65f6\u88ab\u8c03\u7528\u3002\u70b9\u7684\u5750\u6807\u5df2\u7ecf\u8f6c\u6362\u4e3a\u8f93\u51fa\u5750\u6807\u3002 \u5bf9\u4e8e\u7ebf\u548c\u591a\u8fb9\u5f62\uff0c\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u6e32\u67d3\u65b9\u6cd5\uff1a\u4f60\u5c06\u4f7f\u7528 renderPolyline() \u63a5\u6536\u7ebf\u5217\u8868\uff0c renderPolygon() \u63a5\u6536\u5916\u73af\u4e0a\u7684\u70b9\u5217\u8868\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u548c\u5185\u73af\u5217\u8868\uff08\u6216None\uff09\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002 \u901a\u5e38\u53ef\u4ee5\u4fbf\u5229\u5730\u6dfb\u52a0\u7528\u4e8e\u8bbe\u7f6e\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\u5c5e\u6027\u7684GUI\uff0c\u4ee5\u5141\u8bb8\u7528\u6237\u81ea\u5b9a\u4e49\u5916\u89c2\uff1a\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u7528\u6237\u8bbe\u7f6e\u5706\u534a\u5f84\u3002\u4ee5\u4e0b\u4ee3\u7801\u5b9e\u73b0\u4e86\u8fd9\u6837\u7684\u63a7\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 from qgis.gui import QgsSymbolLayerWidget class FooSymbolLayerWidget ( QgsSymbolLayerWidget ): def __init__ ( self , parent = None ): QgsSymbolLayerWidget . __init__ ( self , parent ) self . layer = None # \u8bbe\u7f6e\u7b80\u5355\u7684UI self . label = QLabel ( \"Radius:\" ) self . spinRadius = QDoubleSpinBox () self . hbox = QHBoxLayout () self . hbox . addWidget ( self . label ) self . hbox . addWidget ( self . spinRadius ) self . setLayout ( self . hbox ) self . connect ( self . spinRadius , SIGNAL ( \"valueChanged(double)\" ), \\ self . radiusChanged ) def setSymbolLayer ( self , layer ): if layer . layerType () != \"FooMarker\" : return self . layer = layer self . spinRadius . setValue ( layer . radius ) def symbolLayer ( self ): return self . layer def radiusChanged ( self , value ): self . layer . radius = value self . emit ( SIGNAL ( \"changed()\" )) \u6b64\u7a97\u53e3\u63a7\u4ef6\u53ef\u4ee5\u5d4c\u5165\u5230\u7b26\u53f7\u5c5e\u6027\u5bf9\u8bdd\u6846\u4e2d\u3002\u5728\u7b26\u53f7\u5c5e\u6027\u5bf9\u8bdd\u6846\u4e2d\u9009\u62e9\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\u65f6\uff0c\u5b83\u4f1a\u521b\u5efa\u7b26\u53f7\u56fe\u5c42\u7684\u5b9e\u4f8b\u548c\u7b26\u53f7\u56fe\u7a97\u53e3\u63a7\u4ef6\u7684\u5b9e\u4f8b\u3002\u7136\u540e\u5b83\u8c03\u7528 setSymbolLayer() \u65b9\u6cd5\u5c06\u7b26\u53f7\u56fe\u5c42\u5206\u914d\u7ed9\u7a97\u53e3\u63a7\u4ef6\u3002\u5728\u8be5\u65b9\u6cd5\u4e2d\uff0c\u63a7\u4ef6\u5e94\u8be5\u66f4\u65b0UI\u4ee5\u53cd\u6620\u7b26\u53f7\u5c42\u7684\u5c5e\u6027\u3002 symbolLayer() \u65b9\u6cd5\u7528\u4e8e\u901a\u8fc7\u5c5e\u6027\u5bf9\u8bdd\u6846\u518d\u6b21\u68c0\u7d22\u7b26\u53f7\u56fe\u5c42\uff0c\u5c06\u5176\u7528\u4e8e\u7b26\u53f7\u3002 \u5728\u6bcf\u6b21\u66f4\u6539\u5c5e\u6027\u65f6\uff0c\u7a97\u53e3\u63a7\u4ef6\u90fd\u5e94\u53d1\u51fa changed() \u4fe1\u53f7\uff0c\u8ba9\u5c5e\u6027\u5bf9\u8bdd\u6846\u66f4\u65b0\u7b26\u53f7\u9884\u89c8\u3002 \u73b0\u5728\u6211\u4eec\u53ea\u7f3a\u5c11\u6700\u540e\u7684\u7c98\u5408\u5242\uff1a\u8ba9QGIS\u4e86\u89e3\u8fd9\u4e9b\u65b0\u7c7b\u3002\u8fd9\u662f\u901a\u8fc7\u5c06\u7b26\u53f7\u56fe\u5c42\u6dfb\u52a0\u5230\u6ce8\u518c\u8868\u6765\u5b8c\u6210\u7684\u3002\u4e5f\u53ef\u4ee5\u5728\u4e0d\u5c06\u5176\u6dfb\u52a0\u5230\u6ce8\u518c\u8868\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u7b26\u53f7\u56fe\u5c42\uff0c\u4f46\u67d0\u4e9b\u529f\u80fd\u4e0d\u8d77\u4f5c\u7528\uff1a\u4f8b\u5982\uff0c\u4f7f\u7528\u81ea\u5b9a\u4e49\u7b26\u53f7\u56fe\u5c42\u52a0\u8f7d\u9879\u76ee\u6587\u4ef6\u6216\u65e0\u6cd5\u5728GUI\u4e2d\u7f16\u8f91\u56fe\u5c42\u7684\u5c5e\u6027\u3002 \u6211\u4eec\u5fc5\u987b\u4e3a\u7b26\u53f7\u56fe\u5c42\u521b\u5efa\u5143\u6570\u636e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from qgis.core import QgsSymbol , QgsSymbolLayerAbstractMetadata , QgsSymbolLayerRegistry class FooSymbolLayerMetadata ( QgsSymbolLayerAbstractMetadata ): def __init__ ( self ): QgsSymbolLayerAbstractMetadata . __init__ ( self , \"FooMarker\" , QgsSymbol . Marker ) def createSymbolLayer ( self , props ): radius = float ( props [ \"radius\" ]) if \"radius\" in props else 4.0 return FooSymbolLayer ( radius ) def createSymbolLayer ( self , props ): radius = float ( props [ \"radius\" ]) if \"radius\" in props else 4.0 return FooSymbolLayer ( radius ) fslmetadata = FooSymbolLayerMetadata () QgsApplication . symbolLayerRegistry () . addSymbolLayerType ( fslmetadata ) \u4f60\u5e94\u8be5\u5c06\u56fe\u5c42\u7c7b\u578b\uff08\u4e0e\u56fe\u5c42\u8fd4\u56de\u7684\u76f8\u540c\uff09\u548c\u7b26\u53f7\u7c7b\u578b\uff08marker/line/fill\uff09\u4f20\u9012\u7ed9\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002 createSymbolLayer() \u65b9\u6cd5\u8d1f\u8d23\u4f7f\u7528props\u5b57\u5178\u4e2d\u6307\u5b9a\u7684\u5c5e\u6027\u521b\u5efa\u7b26\u53f7\u56fe\u5c42\u7684\u5b9e\u4f8b\u3002 createSymbolLayerWidget() \u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u6b64\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b\u7684\u8bbe\u7f6e\u63a7\u4ef6\u3002 \u6700\u540e\u4e00\u6b65\u662f\u5c06\u6b64\u7b26\u53f7\u56fe\u5c42\u6dfb\u52a0\u5230\u6ce8\u518c\u8868\u4e2d\u2014\u2014\u6211\u4eec\u5b8c\u6210\u4e86\u3002","title":"6.8.4.2 \u521b\u5efa\u81ea\u5b9a\u4e49\u7b26\u53f7\u56fe\u5c42\u7c7b\u578b"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#685","text":"\u5982\u679c\u8981\u81ea\u5b9a\u4e49\u5982\u4f55\u9009\u62e9\u7b26\u53f7\u5448\u73b0\u8981\u7d20\u7684\u89c4\u5219\uff0c\u5219\u521b\u5efa\u65b0\u7684\u6e32\u67d3\u5668\u53ef\u80fd\u5f88\u6709\u7528\u3002\u4f60\u53ef\u80fd\u5e0c\u671b\u505a\u4e00\u4e9b\u7528\u4f8b\uff1a\u7b26\u53f7\u7531\u5b57\u6bb5\u7ec4\u5408\u786e\u5b9a\uff0c\u7b26\u53f7\u5927\u5c0f\u6839\u636e\u5f53\u524d\u6bd4\u4f8b\u800c\u53d8\u5316\u7b49\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u663e\u793a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\uff0c\u5b83\u53ef\u4ee5\u521b\u5efa\u4e24\u4e2a\u6807\u8bb0\u7b26\u53f7\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u8981\u7d20\u968f\u673a\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import random from qgis.core import QgsWkbTypes , QgsSymbol , QgsFeatureRenderer class RandomRenderer ( QgsFeatureRenderer ): def __init__ ( self , syms = None ): QgsFeatureRenderer . __init__ ( self , \"RandomRenderer\" ) self . syms = syms if syms else [ QgsSymbol . defaultSymbol ( QgsWkbTypes . geometryType ( QgsWkbTypes . Point ))] def symbolForFeature ( self , feature ): return random . choice ( self . syms ) def startRender ( self , context , vlayer ): for s in self . syms : s . startRender ( context ) def stopRender ( self , context ): for s in self . syms : s . stopRender ( context ) def usedAttributes ( self ): return [] def clone ( self ): return RandomRenderer ( self . syms ) \u7236\u7c7b QgsFeatureRenderer \u7684\u6784\u9020\u51fd\u6570\u9700\u8981\u4e00\u4e2a\u6e32\u67d3\u5668\u540d\u79f0\uff08\u5728\u6e32\u67d3\u5668\u4e2d\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff09\u3002 symbolForFeature() \u65b9\u6cd5\u51b3\u5b9a\u4ec0\u4e48\u7b26\u53f7\u7528\u4e8e\u7279\u5b9a\u7684\u8981\u7d20\u3002 startRender() \u548c stopRender() \u8d1f\u8d23\u7b26\u53f7\u6e32\u67d3\u7684\u521d\u59cb\u5316/\u5b8c\u6210\u3002 usedAttributes() \u65b9\u6cd5\u8fd4\u56de\u6e32\u67d3\u5668\u7684\u5b57\u6bb5\u540d\u79f0\u5217\u8868\u3002\u6700\u540e\uff0c clone() \u65b9\u6cd5\u5e94\u8fd4\u56de\u6e32\u67d3\u5668\u7684\u526f\u672c\u3002 \u4e0e\u7b26\u53f7\u56fe\u5c42\u4e00\u6837\uff0c\u53ef\u4ee5\u9644\u52a0GUI\u914d\u7f6e\u6e32\u67d3\u5668\uff0c\u5b83\u5fc5\u987b\u6765\u6e90\u4e8e QgsRendererWidget \u3002\u4ee5\u4e0b\u793a\u4f8b\u4ee3\u7801\u521b\u5efa\u4e00\u4e2a\u5141\u8bb8\u7528\u6237\u8bbe\u7f6e\u7b2c\u4e00\u4e2a\u7b26\u53f7\u7684\u6309\u94ae 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from qgis.gui import QgsRendererWidget , QgsColorButton class RandomRendererWidget ( QgsRendererWidget ): def __init__ ( self , layer , style , renderer ): QgsRendererWidget . __init__ ( self , layer , style ) if renderer is None or renderer . type () != \"RandomRenderer\" : self . r = RandomRenderer () else : self . r = renderer # setup UI self . btn1 = QgsColorButton () self . btn1 . setColor ( self . r . syms [ 0 ] . color ()) self . vbox = QVBoxLayout () self . vbox . addWidget ( self . btn1 ) self . setLayout ( self . vbox ) self . connect ( self . btn1 , SIGNAL ( \"clicked()\" ), self . setColor1 ) def setColor1 ( self ): color = QColorDialog . getColor ( self . r . syms [ 0 ] . color (), self ) if not color . isValid (): return self . r . syms [ 0 ] . setColor ( color ) self . btn1 . setColor ( self . r . syms [ 0 ] . color ()) def renderer ( self ): return self . r \u6784\u9020\u51fd\u6570\u63a5\u6536\u5f53\u524d\u56fe\u5c42\uff08 QgsVectorLayer \uff09\uff0c\u5168\u5c40\u6837\u5f0f\uff08 QgsStyle \uff09\u548c\u5f53\u524d\u6e32\u67d3\u5668\u7684\u5b9e\u4f8b\u3002\u5982\u679c\u6ca1\u6709\u6e32\u67d3\u5668\u6216\u6e32\u67d3\u5668\u5177\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u5b83\u5c06\u88ab\u6211\u4eec\u7684\u65b0\u6e32\u67d3\u5668\u66ff\u6362\uff0c\u5426\u5219\u6211\u4eec\u5c06\u4f7f\u7528\u5f53\u524d\u6e32\u67d3\u5668\uff08\u5df2\u7ecf\u662f\u6211\u4eec\u9700\u8981\u7684\u7c7b\u578b\uff09\u3002\u5e94\u8be5\u66f4\u65b0\u7a97\u53e3\u63a7\u4ef6\u5185\u5bb9\u4ee5\u663e\u793a\u6e32\u67d3\u5668\u7684\u5f53\u524d\u72b6\u6001\u3002\u5f53\u63a5\u53d7\u6e32\u67d3\u5668\u5bf9\u8bdd\u6846\u65f6\uff0c\u5c06\u8c03\u7528\u7a97\u53e3\u63a7\u4ef6\u7684 renderer() \u65b9\u6cd5\u83b7\u53d6\u5f53\u524d\u6e32\u67d3\u5668\u2014\u2014\u5b83\u5c06\u88ab\u5206\u914d\u7ed9\u8be5\u56fe\u5c42\u3002 \u6700\u540e\u4e00\u4e2a\u7f3a\u5931\u7684\u662f\u6e32\u67d3\u5668\u5143\u6570\u636e\u548c\u6ce8\u518c\u8868\u4e2d\u7684\u6ce8\u518c\u9879\uff0c\u5426\u5219\u4f7f\u7528\u6e32\u67d3\u5668\u52a0\u8f7d\u56fe\u5c42\u5c06\u4e0d\u8d77\u4f5c\u7528\uff0c\u7528\u6237\u5c06\u65e0\u6cd5\u4ece\u6e32\u67d3\u5668\u5217\u8868\u4e2d\u9009\u62e9\u5b83\u3002 RandomRenderer \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from qgis.core import QgsRendererAbstractMetadata , QgsRendererRegistry , QgsApplication class RandomRendererMetadata ( QgsRendererAbstractMetadata ): def __init__ ( self ): QgsRendererAbstractMetadata . __init__ ( self , \"RandomRenderer\" , \"Random renderer\" ) def createRenderer ( self , element ): return RandomRenderer () def createRendererWidget ( self , layer , style , renderer ): return RandomRendererWidget ( layer , style , renderer ) rrmetadata = RandomRendererMetadata () QgsApplication . rendererRegistry () . addRenderer ( rrmetadata ) \u4e0e\u7b26\u53f7\u56fe\u5c42\u7c7b\u4f3c\uff0c\u62bd\u8c61\u5143\u6570\u636e\u6784\u9020\u51fd\u6570\u7b49\u5f85\u6e32\u67d3\u5668\u540d\u79f0\uff0c\u5bf9\u7528\u6237\u53ef\u89c1\u7684\u540d\u79f0\u4ee5\u53ca\u6e32\u67d3\u5668\u56fe\u6807\u7684\u53ef\u9009\u540d\u79f0\u3002 createRenderer() \u65b9\u6cd5\u4f20\u9012\u4e00\u4e2a QDomElement \u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u53ef\u7528\u4e8e\u4eceDOM\u6811\u6062\u590d\u6e32\u67d3\u5668\u7684\u72b6\u6001\u3002 createRendererWidget() \u65b9\u6cd5\u521b\u5efa\u914d\u7f6e\u63a7\u4ef6\u3002\u5982\u679c\u6e32\u67d3\u5668\u6ca1\u6709GUI\uff0c\u5b83\u4e0d\u5fc5\u5b58\u5728\u6216\u53ef\u4ee5\u8fd4\u56de None \u3002 \u8981\u5c06\u56fe\u6807\u4e0e\u6e32\u67d3\u5668\u5173\u8054\uff0c\u53ef\u4ee5\u5728 QgsRendererAbstractMetadata \u6784\u9020\u51fd\u6570\u4e2d\u5c06\u5176\u6307\u5b9a\u4e3a\u7b2c\u4e09\u4e2a\uff08\u53ef\u9009\uff09\u53c2\u6570 1 2 3 4 QgsRendererAbstractMetadata . __init__ ( self , \"RandomRenderer\" , \"Random renderer\" , QIcon ( QPixmap ( \"RandomRendererIcon.png\" , \"png\" ))) \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5143\u6570\u636e\u7c7b\u7684 setIcon \u65b9\u6cd5\u5173\u8054\u8be5\u56fe\u6807\u3002\u56fe\u6807\u53ef\u4ee5\u4ece\u6587\u4ef6\u52a0\u8f7d\uff08\u5982\u4e0a\u6240\u793a\uff09\uff0c\u4e5f\u53ef\u4ee5\u4ece Qt\u8d44\u6e90 \u52a0\u8f7d \uff08PyQt5\u5305\u542bPython\u7684.qrc\u7f16\u8bd1\u6587\u4ef6\uff09\u3002","title":"6.8.5 \u521b\u5efa\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668"},{"location":"6-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#69","text":"TODO: \u521b\u5efa/\u4fee\u6539\u7b26\u53f7 \u4f7f\u7528\u6837\u5f0f\uff08 QgsStyle \uff09 \u4f7f\u7528\u8272\u5e26\uff08 QgsColorRamp \uff09 \u63a2\u7d22\u7b26\u53f7\u56fe\u5c42\u548c\u6e32\u67d3\u5668\u6ce8\u518c\u8868","title":"6.9 \u66f4\u591a\u8bdd\u9898"},{"location":"7-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/","text":"7 \u51e0\u4f55\u5904\u7406 \u2693\ufe0e \u6b64\u9875\u9762\u4e0a\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 from qgis.core import ( QgsGeometry , QgsPoint , QgsPointXY , QgsWkbTypes , QgsProject , QgsFeatureRequest , QgsVectorLayer , QgsDistanceArea , QgsUnitTypes , QgsCoordinateTransform , QgsCoordinateReferenceSystem ) \u8868\u793a\u7a7a\u95f4\u8981\u7d20\u7684\u70b9\u3001\u7ebf\u548c\u591a\u8fb9\u5f62\u901a\u5e38\u79f0\u4e3a\u51e0\u4f55\u3002\u5728QGIS\u4e2d\uff0c\u5b83\u4eec\u7528 QgsGeometry \u7c7b\u6765\u8868\u793a \u3002 \u6709\u65f6\uff0c\u4e00\u79cd\u51e0\u4f55\u5b9e\u9645\u4e0a\u662f\u7b80\u5355\uff08\u5355\u90e8\u4ef6\uff09\u51e0\u4f55\u7684\u96c6\u5408\u3002\u53e6\u4e00\u79cd\u51e0\u4f55\u5f62\u72b6\u79f0\u4e3a\u591a\u90e8\u4ef6\u51e0\u4f55\u3002\u5982\u679c\u5b83\u53ea\u5305\u542b\u4e00\u79cd\u7c7b\u578b\u7684\u7b80\u5355\u51e0\u4f55\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u591a\u70b9\u3001\u591a\u7ebf\u6216\u591a\u591a\u8fb9\u5f62\u3002\u4f8b\u5982\uff0c\u7531\u591a\u4e2a\u5c9b\u7ec4\u6210\u7684\u56fd\u5bb6\u53ef\u4ee5\u8868\u793a\u4e3a\u591a\u591a\u8fb9\u5f62\u3002 \u51e0\u4f55\u7684\u5750\u6807\u53ef\u4ee5\u5728\u4efb\u4f55\u5750\u6807\u53c2\u8003\u7cfb\u7edf\uff08CRS\uff09\u4e2d\u3002\u4ece\u56fe\u5c42\u4e2d\u63d0\u53d6\u8981\u7d20\u65f6\uff0c\u5173\u8054\u7684\u51e0\u4f55\u56fe\u5f62\u5c06\u5728\u56fe\u5c42\u7684CRS\u4e2d\u5177\u6709\u5750\u6807\u3002 \u6709\u5173\u6240\u6709\u53ef\u8bbf\u95ee\u7684\u51e0\u4f55\u7ed3\u6784\u548c\u5173\u7cfb\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605 OGC\u7b80\u5355\u8981\u7d20\u8bbf\u95ee\u6807\u51c6 \uff0c\u4ee5\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\u3002 7.1 \u51e0\u4f55\u6784\u9020 \u2693\ufe0e PyQGIS\u63d0\u4f9b\u4e86\u51e0\u79cd\u521b\u5efa\u51e0\u4f55\u7684\u9009\u9879\uff1a \u5750\u6807 1 2 3 4 5 6 7 gPnt = QgsGeometry . fromPointXY ( QgsPointXY ( 1 , 1 )) print ( gPnt ) gLine = QgsGeometry . fromPolyline ([ QgsPoint ( 1 , 1 ), QgsPoint ( 2 , 2 )]) print ( gLine ) gPolygon = QgsGeometry . fromPolygonXY ([[ QgsPointXY ( 1 , 1 ), QgsPointXY ( 2 , 2 ), QgsPointXY ( 2 , 1 )]]) print ( gPolygon ) \u4f7f\u7528 QgsPoint \u7c7b\u6216 QgsPointXY \u7c7b\u521b\u5efa\u5750\u6807\u3002\u8fd9\u4e9b\u7c7b\u4e4b\u95f4\u7684\u533a\u522b\u5728\u4e8e QgsPoint \u652f\u6301M\u548cZ\u7ef4\u5ea6\u3002 \u6298\u7ebf\uff08Linestring\uff09\u7531\u4e00\u7cfb\u5217\u70b9\u8868\u793a\u3002 \u591a\u8fb9\u5f62\u7531\u7ebf\u73af\u5217\u8868\uff08\u5373\u95ed\u5408\u7684\u7ebf\u6bb5\uff09\u8868\u793a\u3002\u7b2c\u4e00\u4e2a\u73af\u662f\u5916\u73af\uff08\u8fb9\u754c\uff09\uff0c\u7b2c\u4e8c\u4e2a\u53ef\u9009\u9879\u7ebf\u73af\u662f\u591a\u8fb9\u5f62\u4e2d\u7684\u5b54\u3002\u8bf7\u6ce8\u610f\uff0c\u4e0e\u67d0\u4e9b\u7a0b\u5e8f\u4e0d\u540c\uff0cQGIS\u4f1a\u4e3a\u4f60\u95ed\u5408\u73af\uff0c\u56e0\u6b64\u65e0\u9700\u5c06\u7b2c\u4e00\u4e2a\u70b9\u590d\u5236\u4e3a\u6700\u540e\u4e00\u4e2a\u3002 \u591a\u90e8\u4ef6\u51e0\u4f55\u56fe\u5f62\u66f4\u8fdb\u4e00\u6b65\uff1a\u591a\u70b9\u662f\u4e00\u4e2a\u70b9\u5217\u8868\uff0c\u591a\u7ebf\u662f\u4e00\u4e2a\u7ebf\u5217\u8868\uff0c\u591a\u591a\u8fb9\u5f62\u662f\u4e00\u4e2a\u591a\u8fb9\u5f62\u5217\u8868\u3002 WKT 1 2 gem = QgsGeometry . fromWkt ( \"POINT(3 4)\" ) print ( geom ) WKB 1 2 3 4 5 6 g = QgsGeometry () wkb = bytes . fromhex ( \"010100000000000000000045400000000000001440\" ) g . fromWkb ( wkb ) #\u4f7f\u7528WKT\u6253\u5370\u51e0\u4f55 print ( g . asWkt ()) 7.2 \u8bbf\u95ee\u51e0\u4f55 \u2693\ufe0e \u9996\u5148\uff0c\u4f60\u5e94\u8be5\u627e\u51fa\u51e0\u4f55\u7c7b\u578b\u3002 wkbType() \u65b9\u6cd5\u662f\u5176\u4e2d\u4e00\u79cd\u65b9\u6cd5\u3002\u5b83\u4ece QgsWkbTypes.Type \u679a\u4e3e\u4e2d\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 1 2 3 4 5 6 7 8 9 if gPnt . wkbType () == QgsWkbTypes . Point : print ( gPnt . wkbType ()) # output: 1 for Point if gLine . wkbType () == QgsWkbTypes . LineString : print ( gLine . wkbType ()) # output: 2 for LineString if gPolygon . wkbType () == QgsWkbTypes . Polygon : print ( gPolygon . wkbType ()) # output: 3 for Polygon \u4f5c\u4e3a\u66ff\u4ee3\u65b9\u6848\uff0c\u53ef\u4ee5\u4f7f\u7528 type() \uff0c\u4ece QgsWkbTypes.GeometryType \u679a\u4e3e\u4e2d\u8fd4\u56de\u503c\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 displayString() \u51fd\u6570\u6765\u83b7\u53d6\u4eba\u7c7b\u53ef\u8bfb\u7684\u51e0\u4f55\u7c7b\u578b\u3002 1 2 3 4 5 6 print ( QgsWkbTypes . displayString ( gPnt . wkbType ())) # output: 'Point' print ( QgsWkbTypes . displayString ( gLine . wkbType ())) # output: 'LineString' print ( QgsWkbTypes . displayString ( gPolygon . wkbType ())) # output: 'Polygon' \u8fd8\u6709\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570 isMultipart() \u53ef\u4ee5\u786e\u5b9a\u51e0\u4f55\u662f\u5426\u662f\u591a\u90e8\u4ef6 \u3002 \u4ece\u51e0\u4f55\u4e2d\u63d0\u53d6\u4fe1\u606f\uff0c\u6bcf\u79cd\u77e2\u91cf\u7c7b\u578b\u90fd\u6709\u8bbf\u95ee\u5668\u51fd\u6570\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u8bbf\u95ee\u5668\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 6 gPnt . asPoint () # output: <QgsPointXY: POINT(1 1)> gLine . asPolyline () # output: [<QgsPointXY: POINT(1 1)>, <QgsPointXY: POINT(2 2)>] gPolygon . asPolygon () # output: [[<QgsPointXY: POINT(1 1)>, <QgsPointXY: POINT(2 2)>, <QgsPointXY: POINT(2 1)>, <QgsPointXY: POINT(1 1)>]] \u63d0\u793a \u5143\u7ec4\uff08x\uff0cy\uff09\u4e0d\u662f\u771f\u6b63\u7684\u5143\u7ec4\uff0c\u5b83\u4eec\u662f QgsPoint \u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528 x() \u548c y() \u65b9\u6cd5\u8bbf\u95ee\u8fd9\u4e9b\u503c\u3002 \u5bf9\u4e8e\u591a\u90e8\u4ef6\u51e0\u4f55\u4e5f\u6709\u7c7b\u4f3c\u7684\u8bbf\u95ee\u51fd\u6570\uff1a asMultiPoint() \uff0c asMultiPolyline() \u548c asMultiPolygon() \u3002 \u4e0d\u7528\u7ba1\u51e0\u4f55\u7684\u7c7b\u578b\uff0c\u76f4\u63a5\u904d\u5386\u6240\u6709\u51e0\u4f55\u662f\u53ef\u4ee5\u7684\uff0c\u4f8b\u5982\uff1a 1 2 3 4 5 6 7 geom = QgsGeometry . fromWkt ( 'MultiPoint( 0 0, 1 1, 2 2)' ) for part in geom . parts (): print ( part . asWkt ()) # Point (0 0) # Point (1 1) # Point (2 2) 1 2 3 4 5 geom = QgsGeometry . fromWkt ( 'LineString( 0 0, 10 10 )' ) for part in geom . parts (): print ( part . asWkt ()) # LineString (0 0, 10 10) \u4f7f\u7528 QgsGeometry.parts() \u65b9\u6cd5\u4fee\u6539\u6240\u6709\u51e0\u4f55\u3002 1 2 3 4 5 6 7 8 9 10 11 geom = QgsGeometry . fromWkt ( 'MultiPoint( 0 0, 1 1, 2 2)' ) for part in geom . parts (): part . transform ( QgsCoordinateTransform ( QgsCoordinateReferenceSystem ( \"EPSG:4326\" ), QgsCoordinateReferenceSystem ( \"EPSG:3111\" ), QgsProject . instance ()) ) print ( geom . asWkt ()) # MultiPoint ((-10334726.79314761981368065 -5360105.10101188533008099),(-10462133.82917750626802444 -5217484.34365727473050356),(-10589398.51346865110099316 -5072020.358805269934237)) 7.3 \u51e0\u4f55\u8c13\u8bcd\u4e0e\u64cd\u4f5c \u2693\ufe0e QGIS\u4f7f\u7528GEOS\u5e93\u8fdb\u884c\u9ad8\u7ea7\u51e0\u4f55\u64cd\u4f5c\uff0c\u5982\u51e0\u4f55\u8c13\u8bcd\uff08 contains() \uff0c intersects() \uff0c...\uff09\uff0c\u64cd\u4f5c\uff08 combine() \uff0c difference() \uff0c...\uff09\u3002\u5b83\u8fd8\u53ef\u4ee5\u8ba1\u7b97\u51e0\u4f55\u7684\u51e0\u4f55\u5c5e\u6027\uff0c\u4f8b\u5982\u9762\u79ef\uff08\u591a\u8fb9\u5f62\uff09\u6216\u957f\u5ea6\uff08\u591a\u8fb9\u5f62\u548c\u7ebf\uff09\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u7ed3\u5408\u904d\u5386\u6307\u5b9a\u56fe\u5c42\u8981\u7d20\uff0c\u5e76\u57fa\u4e8e\u5b83\u4eec\u7684\u51e0\u4f55\u6267\u884c\u4e00\u4e9b\u51e0\u4f55\u8ba1\u7b97\u7684\u793a\u4f8b\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u8ba1\u7b97\u5e76\u6253\u5370 countries \u56fe\u5c42\u4e2d\u6bcf\u4e2a\u56fd\u5bb6\u7684\u9762\u79ef\u548c\u5468\u957f\u3002 \u4ee5\u4e0b\u4ee3\u7801\u5047\u5b9a layer \u662f\u5177\u6709\u591a\u8fb9\u5f62\u8981\u7d20\u7c7b\u578b\u7684 QgsVectorLayer \u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # \u8bbf\u95ee'countries'\u56fe\u5c42 layer = QgsProject . instance () . mapLayersByName ( 'countries' )[ 0 ] # \u8fc7\u6ee4\u4ee5Z\u5f00\u5934\u7684\u56fd\u5bb6\uff0c\u7136\u540e\u83b7\u53d6\u5176\u8981\u7d20 query = '\"name\" LIKE \\' Z% \\' ' features = layer . getFeatures ( QgsFeatureRequest () . setFilterExpression ( query )) # \u73b0\u5728\u904d\u5386\u8981\u7d20\uff0c\u6267\u884c\u51e0\u4f55\u8ba1\u7b97\u5e76\u6253\u5370\u7ed3\u679c for f in features : geom = f . geometry () name = f . attribute ( 'NAME' ) print ( name ) print ( 'Area: ' , geom . area ()) print ( 'Perimeter: ' , geom . length ()) # Zambia # Area: 62.822790653431205 # Perimeter: 50.65232014052552 # Zimbabwe # Area: 33.41113559136521 # Perimeter: 26.608288555013935 \u73b0\u5728\uff0c\u4f60\u5df2\u7ecf\u8ba1\u7b97\u5e76\u6253\u5370\u4e86\u51e0\u4f55\u56fe\u5f62\u7684\u9762\u79ef\u548c\u5468\u957f\u3002\u4f46\u662f\uff0c\u4f60\u53ef\u80fd\u4f1a\u5f88\u5feb\u6ce8\u610f\u5230\u8fd9\u4e9b\u503c\u5f88\u5947\u602a\u3002\u8fd9\u662f\u56e0\u4e3a\u5f53\u4f7f\u7528 QgsGeometry \u7c7b\u4e2d\u7684 area() \u548c length() \u65b9\u6cd5\u8ba1\u7b97\u65f6\uff0c\u9762\u79ef\u548c\u5468\u957f\u4e0d\u4f1a\u8003\u8651CRS\u3002\u53ef\u4ee5\u4f7f\u7528\u66f4\u5f3a\u5927\u7684 QgsDistanceArea \u7c7b\u8ba1\u7b97\u9762\u79ef\u548c\u5468\u957f\uff0c\u5b83\u53ef\u4ee5\u6267\u884c\u57fa\u4e8e\u692d\u7403\u7684\u8ba1\u7b97\uff1a \u4ee5\u4e0b\u4ee3\u7801\u5047\u5b9a layer \u662f\u5177\u6709\u591a\u8fb9\u5f62\u8981\u7d20\u7c7b\u578b\u7684 QgsVectorLayer \u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 d = QgsDistanceArea () d . setEllipsoid ( 'WGS84' ) layer = QgsProject . instance () . mapLayersByName ( 'countries' )[ 0 ] # \u8fc7\u6ee4\u4ee5Z\u5f00\u5934\u7684\u56fd\u5bb6\uff0c\u7136\u540e\u83b7\u53d6\u5176\u8981\u7d20 query = '\"name\" LIKE \\' Z% \\' ' features = layer . getFeatures ( QgsFeatureRequest () . setFilterExpression ( query )) for f in features : geom = f . geometry () name = f . attribute ( 'NAME' ) print ( name ) print ( \"Perimeter (m):\" , d . measurePerimeter ( geom )) print ( \"Area (m2):\" , d . measureArea ( geom )) \uff09\uff09 # \u6253\u5370\uff08\u201c\u9762\u79ef\uff08m2\uff09\uff1a\u201d \uff0c d \u3002measureArea \uff08GEOM \uff09\uff09 # \u8ba1\u7b97\u5e76\u91cd\u65b0\u6253\u5370\u9762\u79ef\uff0c\u5355\u4f4d\u4e3a\u5e73\u65b9\u516c\u91cc print ( \"Area (km2):\" , d . convertAreaMeasurement ( d . measureArea ( geom ), QgsUnitTypes . AreaSquareKilometers )) # ambia # Perimeter (m): 5539361.250294596 # Area (m2): 751989035032.9031 # Area (km2): 751989.0350329031 # Zimbabwe # Perimeter (m): 2865021.332507607 # Area (m2): 389267821381.6009 # Area (km2): 389267.82138160086 \u6216\u8005\uff0c\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u548c\u65b9\u4f4d\u3002 1 2 3 4 5 6 7 8 9 d = QgsDistanceArea () d . setEllipsoid ( 'WGS84' ) # \u8ba9\u6211\u4eec\u521b\u9020\u4e24\u4e2a\u70b9 # \u5723\u8bde\u8001\u4eba\u662f\u4e00\u4e2a\u5de5\u4f5c\u72c2\uff0c\u4ed6\u9700\u8981\u653e\u4e2a\u6691\u5047\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4ed6\u5bb6\u79bb\u7279\u5185\u91cc\u8d39\u6709\u591a\u8fdc santa = QgsPointXY ( 25.847899 , 66.543456 ) tenerife = QgsPointXY ( - 16.5735 , 28.0443 ) print ( \"Distance in meters: \" , d . measureLine ( santa , tenerife )) \u4f60\u53ef\u4ee5\u5728QGIS\u4e2d\u627e\u5230\u8bb8\u591a\u7b97\u6cd5\u793a\u4f8b\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u6765\u5206\u6790\u548c\u8f6c\u6362\u77e2\u91cf\u6570\u636e\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4ee3\u7801\u7684\u94fe\u63a5\u3002 \u4f7f\u7528 QgsDistanceArea \u7c7b\u7684\u8ddd\u79bb\u548c\u9762\u79ef\uff1a \u8ddd\u79bb\u77e9\u9635\u7b97\u6cd5 \u7ebf\u5230\u591a\u8fb9\u5f62\u7b97\u6cd5","title":"7-\u51e0\u4f55\u5904\u7406"},{"location":"7-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/#7","text":"\u6b64\u9875\u9762\u4e0a\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 from qgis.core import ( QgsGeometry , QgsPoint , QgsPointXY , QgsWkbTypes , QgsProject , QgsFeatureRequest , QgsVectorLayer , QgsDistanceArea , QgsUnitTypes , QgsCoordinateTransform , QgsCoordinateReferenceSystem ) \u8868\u793a\u7a7a\u95f4\u8981\u7d20\u7684\u70b9\u3001\u7ebf\u548c\u591a\u8fb9\u5f62\u901a\u5e38\u79f0\u4e3a\u51e0\u4f55\u3002\u5728QGIS\u4e2d\uff0c\u5b83\u4eec\u7528 QgsGeometry \u7c7b\u6765\u8868\u793a \u3002 \u6709\u65f6\uff0c\u4e00\u79cd\u51e0\u4f55\u5b9e\u9645\u4e0a\u662f\u7b80\u5355\uff08\u5355\u90e8\u4ef6\uff09\u51e0\u4f55\u7684\u96c6\u5408\u3002\u53e6\u4e00\u79cd\u51e0\u4f55\u5f62\u72b6\u79f0\u4e3a\u591a\u90e8\u4ef6\u51e0\u4f55\u3002\u5982\u679c\u5b83\u53ea\u5305\u542b\u4e00\u79cd\u7c7b\u578b\u7684\u7b80\u5355\u51e0\u4f55\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u591a\u70b9\u3001\u591a\u7ebf\u6216\u591a\u591a\u8fb9\u5f62\u3002\u4f8b\u5982\uff0c\u7531\u591a\u4e2a\u5c9b\u7ec4\u6210\u7684\u56fd\u5bb6\u53ef\u4ee5\u8868\u793a\u4e3a\u591a\u591a\u8fb9\u5f62\u3002 \u51e0\u4f55\u7684\u5750\u6807\u53ef\u4ee5\u5728\u4efb\u4f55\u5750\u6807\u53c2\u8003\u7cfb\u7edf\uff08CRS\uff09\u4e2d\u3002\u4ece\u56fe\u5c42\u4e2d\u63d0\u53d6\u8981\u7d20\u65f6\uff0c\u5173\u8054\u7684\u51e0\u4f55\u56fe\u5f62\u5c06\u5728\u56fe\u5c42\u7684CRS\u4e2d\u5177\u6709\u5750\u6807\u3002 \u6709\u5173\u6240\u6709\u53ef\u8bbf\u95ee\u7684\u51e0\u4f55\u7ed3\u6784\u548c\u5173\u7cfb\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605 OGC\u7b80\u5355\u8981\u7d20\u8bbf\u95ee\u6807\u51c6 \uff0c\u4ee5\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\u3002","title":"7 \u51e0\u4f55\u5904\u7406"},{"location":"7-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/#71","text":"PyQGIS\u63d0\u4f9b\u4e86\u51e0\u79cd\u521b\u5efa\u51e0\u4f55\u7684\u9009\u9879\uff1a \u5750\u6807 1 2 3 4 5 6 7 gPnt = QgsGeometry . fromPointXY ( QgsPointXY ( 1 , 1 )) print ( gPnt ) gLine = QgsGeometry . fromPolyline ([ QgsPoint ( 1 , 1 ), QgsPoint ( 2 , 2 )]) print ( gLine ) gPolygon = QgsGeometry . fromPolygonXY ([[ QgsPointXY ( 1 , 1 ), QgsPointXY ( 2 , 2 ), QgsPointXY ( 2 , 1 )]]) print ( gPolygon ) \u4f7f\u7528 QgsPoint \u7c7b\u6216 QgsPointXY \u7c7b\u521b\u5efa\u5750\u6807\u3002\u8fd9\u4e9b\u7c7b\u4e4b\u95f4\u7684\u533a\u522b\u5728\u4e8e QgsPoint \u652f\u6301M\u548cZ\u7ef4\u5ea6\u3002 \u6298\u7ebf\uff08Linestring\uff09\u7531\u4e00\u7cfb\u5217\u70b9\u8868\u793a\u3002 \u591a\u8fb9\u5f62\u7531\u7ebf\u73af\u5217\u8868\uff08\u5373\u95ed\u5408\u7684\u7ebf\u6bb5\uff09\u8868\u793a\u3002\u7b2c\u4e00\u4e2a\u73af\u662f\u5916\u73af\uff08\u8fb9\u754c\uff09\uff0c\u7b2c\u4e8c\u4e2a\u53ef\u9009\u9879\u7ebf\u73af\u662f\u591a\u8fb9\u5f62\u4e2d\u7684\u5b54\u3002\u8bf7\u6ce8\u610f\uff0c\u4e0e\u67d0\u4e9b\u7a0b\u5e8f\u4e0d\u540c\uff0cQGIS\u4f1a\u4e3a\u4f60\u95ed\u5408\u73af\uff0c\u56e0\u6b64\u65e0\u9700\u5c06\u7b2c\u4e00\u4e2a\u70b9\u590d\u5236\u4e3a\u6700\u540e\u4e00\u4e2a\u3002 \u591a\u90e8\u4ef6\u51e0\u4f55\u56fe\u5f62\u66f4\u8fdb\u4e00\u6b65\uff1a\u591a\u70b9\u662f\u4e00\u4e2a\u70b9\u5217\u8868\uff0c\u591a\u7ebf\u662f\u4e00\u4e2a\u7ebf\u5217\u8868\uff0c\u591a\u591a\u8fb9\u5f62\u662f\u4e00\u4e2a\u591a\u8fb9\u5f62\u5217\u8868\u3002 WKT 1 2 gem = QgsGeometry . fromWkt ( \"POINT(3 4)\" ) print ( geom ) WKB 1 2 3 4 5 6 g = QgsGeometry () wkb = bytes . fromhex ( \"010100000000000000000045400000000000001440\" ) g . fromWkb ( wkb ) #\u4f7f\u7528WKT\u6253\u5370\u51e0\u4f55 print ( g . asWkt ())","title":"7.1 \u51e0\u4f55\u6784\u9020"},{"location":"7-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/#72","text":"\u9996\u5148\uff0c\u4f60\u5e94\u8be5\u627e\u51fa\u51e0\u4f55\u7c7b\u578b\u3002 wkbType() \u65b9\u6cd5\u662f\u5176\u4e2d\u4e00\u79cd\u65b9\u6cd5\u3002\u5b83\u4ece QgsWkbTypes.Type \u679a\u4e3e\u4e2d\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 1 2 3 4 5 6 7 8 9 if gPnt . wkbType () == QgsWkbTypes . Point : print ( gPnt . wkbType ()) # output: 1 for Point if gLine . wkbType () == QgsWkbTypes . LineString : print ( gLine . wkbType ()) # output: 2 for LineString if gPolygon . wkbType () == QgsWkbTypes . Polygon : print ( gPolygon . wkbType ()) # output: 3 for Polygon \u4f5c\u4e3a\u66ff\u4ee3\u65b9\u6848\uff0c\u53ef\u4ee5\u4f7f\u7528 type() \uff0c\u4ece QgsWkbTypes.GeometryType \u679a\u4e3e\u4e2d\u8fd4\u56de\u503c\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 displayString() \u51fd\u6570\u6765\u83b7\u53d6\u4eba\u7c7b\u53ef\u8bfb\u7684\u51e0\u4f55\u7c7b\u578b\u3002 1 2 3 4 5 6 print ( QgsWkbTypes . displayString ( gPnt . wkbType ())) # output: 'Point' print ( QgsWkbTypes . displayString ( gLine . wkbType ())) # output: 'LineString' print ( QgsWkbTypes . displayString ( gPolygon . wkbType ())) # output: 'Polygon' \u8fd8\u6709\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570 isMultipart() \u53ef\u4ee5\u786e\u5b9a\u51e0\u4f55\u662f\u5426\u662f\u591a\u90e8\u4ef6 \u3002 \u4ece\u51e0\u4f55\u4e2d\u63d0\u53d6\u4fe1\u606f\uff0c\u6bcf\u79cd\u77e2\u91cf\u7c7b\u578b\u90fd\u6709\u8bbf\u95ee\u5668\u51fd\u6570\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u8bbf\u95ee\u5668\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 6 gPnt . asPoint () # output: <QgsPointXY: POINT(1 1)> gLine . asPolyline () # output: [<QgsPointXY: POINT(1 1)>, <QgsPointXY: POINT(2 2)>] gPolygon . asPolygon () # output: [[<QgsPointXY: POINT(1 1)>, <QgsPointXY: POINT(2 2)>, <QgsPointXY: POINT(2 1)>, <QgsPointXY: POINT(1 1)>]] \u63d0\u793a \u5143\u7ec4\uff08x\uff0cy\uff09\u4e0d\u662f\u771f\u6b63\u7684\u5143\u7ec4\uff0c\u5b83\u4eec\u662f QgsPoint \u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528 x() \u548c y() \u65b9\u6cd5\u8bbf\u95ee\u8fd9\u4e9b\u503c\u3002 \u5bf9\u4e8e\u591a\u90e8\u4ef6\u51e0\u4f55\u4e5f\u6709\u7c7b\u4f3c\u7684\u8bbf\u95ee\u51fd\u6570\uff1a asMultiPoint() \uff0c asMultiPolyline() \u548c asMultiPolygon() \u3002 \u4e0d\u7528\u7ba1\u51e0\u4f55\u7684\u7c7b\u578b\uff0c\u76f4\u63a5\u904d\u5386\u6240\u6709\u51e0\u4f55\u662f\u53ef\u4ee5\u7684\uff0c\u4f8b\u5982\uff1a 1 2 3 4 5 6 7 geom = QgsGeometry . fromWkt ( 'MultiPoint( 0 0, 1 1, 2 2)' ) for part in geom . parts (): print ( part . asWkt ()) # Point (0 0) # Point (1 1) # Point (2 2) 1 2 3 4 5 geom = QgsGeometry . fromWkt ( 'LineString( 0 0, 10 10 )' ) for part in geom . parts (): print ( part . asWkt ()) # LineString (0 0, 10 10) \u4f7f\u7528 QgsGeometry.parts() \u65b9\u6cd5\u4fee\u6539\u6240\u6709\u51e0\u4f55\u3002 1 2 3 4 5 6 7 8 9 10 11 geom = QgsGeometry . fromWkt ( 'MultiPoint( 0 0, 1 1, 2 2)' ) for part in geom . parts (): part . transform ( QgsCoordinateTransform ( QgsCoordinateReferenceSystem ( \"EPSG:4326\" ), QgsCoordinateReferenceSystem ( \"EPSG:3111\" ), QgsProject . instance ()) ) print ( geom . asWkt ()) # MultiPoint ((-10334726.79314761981368065 -5360105.10101188533008099),(-10462133.82917750626802444 -5217484.34365727473050356),(-10589398.51346865110099316 -5072020.358805269934237))","title":"7.2 \u8bbf\u95ee\u51e0\u4f55"},{"location":"7-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/#73","text":"QGIS\u4f7f\u7528GEOS\u5e93\u8fdb\u884c\u9ad8\u7ea7\u51e0\u4f55\u64cd\u4f5c\uff0c\u5982\u51e0\u4f55\u8c13\u8bcd\uff08 contains() \uff0c intersects() \uff0c...\uff09\uff0c\u64cd\u4f5c\uff08 combine() \uff0c difference() \uff0c...\uff09\u3002\u5b83\u8fd8\u53ef\u4ee5\u8ba1\u7b97\u51e0\u4f55\u7684\u51e0\u4f55\u5c5e\u6027\uff0c\u4f8b\u5982\u9762\u79ef\uff08\u591a\u8fb9\u5f62\uff09\u6216\u957f\u5ea6\uff08\u591a\u8fb9\u5f62\u548c\u7ebf\uff09\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u7ed3\u5408\u904d\u5386\u6307\u5b9a\u56fe\u5c42\u8981\u7d20\uff0c\u5e76\u57fa\u4e8e\u5b83\u4eec\u7684\u51e0\u4f55\u6267\u884c\u4e00\u4e9b\u51e0\u4f55\u8ba1\u7b97\u7684\u793a\u4f8b\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u8ba1\u7b97\u5e76\u6253\u5370 countries \u56fe\u5c42\u4e2d\u6bcf\u4e2a\u56fd\u5bb6\u7684\u9762\u79ef\u548c\u5468\u957f\u3002 \u4ee5\u4e0b\u4ee3\u7801\u5047\u5b9a layer \u662f\u5177\u6709\u591a\u8fb9\u5f62\u8981\u7d20\u7c7b\u578b\u7684 QgsVectorLayer \u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # \u8bbf\u95ee'countries'\u56fe\u5c42 layer = QgsProject . instance () . mapLayersByName ( 'countries' )[ 0 ] # \u8fc7\u6ee4\u4ee5Z\u5f00\u5934\u7684\u56fd\u5bb6\uff0c\u7136\u540e\u83b7\u53d6\u5176\u8981\u7d20 query = '\"name\" LIKE \\' Z% \\' ' features = layer . getFeatures ( QgsFeatureRequest () . setFilterExpression ( query )) # \u73b0\u5728\u904d\u5386\u8981\u7d20\uff0c\u6267\u884c\u51e0\u4f55\u8ba1\u7b97\u5e76\u6253\u5370\u7ed3\u679c for f in features : geom = f . geometry () name = f . attribute ( 'NAME' ) print ( name ) print ( 'Area: ' , geom . area ()) print ( 'Perimeter: ' , geom . length ()) # Zambia # Area: 62.822790653431205 # Perimeter: 50.65232014052552 # Zimbabwe # Area: 33.41113559136521 # Perimeter: 26.608288555013935 \u73b0\u5728\uff0c\u4f60\u5df2\u7ecf\u8ba1\u7b97\u5e76\u6253\u5370\u4e86\u51e0\u4f55\u56fe\u5f62\u7684\u9762\u79ef\u548c\u5468\u957f\u3002\u4f46\u662f\uff0c\u4f60\u53ef\u80fd\u4f1a\u5f88\u5feb\u6ce8\u610f\u5230\u8fd9\u4e9b\u503c\u5f88\u5947\u602a\u3002\u8fd9\u662f\u56e0\u4e3a\u5f53\u4f7f\u7528 QgsGeometry \u7c7b\u4e2d\u7684 area() \u548c length() \u65b9\u6cd5\u8ba1\u7b97\u65f6\uff0c\u9762\u79ef\u548c\u5468\u957f\u4e0d\u4f1a\u8003\u8651CRS\u3002\u53ef\u4ee5\u4f7f\u7528\u66f4\u5f3a\u5927\u7684 QgsDistanceArea \u7c7b\u8ba1\u7b97\u9762\u79ef\u548c\u5468\u957f\uff0c\u5b83\u53ef\u4ee5\u6267\u884c\u57fa\u4e8e\u692d\u7403\u7684\u8ba1\u7b97\uff1a \u4ee5\u4e0b\u4ee3\u7801\u5047\u5b9a layer \u662f\u5177\u6709\u591a\u8fb9\u5f62\u8981\u7d20\u7c7b\u578b\u7684 QgsVectorLayer \u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 d = QgsDistanceArea () d . setEllipsoid ( 'WGS84' ) layer = QgsProject . instance () . mapLayersByName ( 'countries' )[ 0 ] # \u8fc7\u6ee4\u4ee5Z\u5f00\u5934\u7684\u56fd\u5bb6\uff0c\u7136\u540e\u83b7\u53d6\u5176\u8981\u7d20 query = '\"name\" LIKE \\' Z% \\' ' features = layer . getFeatures ( QgsFeatureRequest () . setFilterExpression ( query )) for f in features : geom = f . geometry () name = f . attribute ( 'NAME' ) print ( name ) print ( \"Perimeter (m):\" , d . measurePerimeter ( geom )) print ( \"Area (m2):\" , d . measureArea ( geom )) \uff09\uff09 # \u6253\u5370\uff08\u201c\u9762\u79ef\uff08m2\uff09\uff1a\u201d \uff0c d \u3002measureArea \uff08GEOM \uff09\uff09 # \u8ba1\u7b97\u5e76\u91cd\u65b0\u6253\u5370\u9762\u79ef\uff0c\u5355\u4f4d\u4e3a\u5e73\u65b9\u516c\u91cc print ( \"Area (km2):\" , d . convertAreaMeasurement ( d . measureArea ( geom ), QgsUnitTypes . AreaSquareKilometers )) # ambia # Perimeter (m): 5539361.250294596 # Area (m2): 751989035032.9031 # Area (km2): 751989.0350329031 # Zimbabwe # Perimeter (m): 2865021.332507607 # Area (m2): 389267821381.6009 # Area (km2): 389267.82138160086 \u6216\u8005\uff0c\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u548c\u65b9\u4f4d\u3002 1 2 3 4 5 6 7 8 9 d = QgsDistanceArea () d . setEllipsoid ( 'WGS84' ) # \u8ba9\u6211\u4eec\u521b\u9020\u4e24\u4e2a\u70b9 # \u5723\u8bde\u8001\u4eba\u662f\u4e00\u4e2a\u5de5\u4f5c\u72c2\uff0c\u4ed6\u9700\u8981\u653e\u4e2a\u6691\u5047\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4ed6\u5bb6\u79bb\u7279\u5185\u91cc\u8d39\u6709\u591a\u8fdc santa = QgsPointXY ( 25.847899 , 66.543456 ) tenerife = QgsPointXY ( - 16.5735 , 28.0443 ) print ( \"Distance in meters: \" , d . measureLine ( santa , tenerife )) \u4f60\u53ef\u4ee5\u5728QGIS\u4e2d\u627e\u5230\u8bb8\u591a\u7b97\u6cd5\u793a\u4f8b\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u6765\u5206\u6790\u548c\u8f6c\u6362\u77e2\u91cf\u6570\u636e\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4ee3\u7801\u7684\u94fe\u63a5\u3002 \u4f7f\u7528 QgsDistanceArea \u7c7b\u7684\u8ddd\u79bb\u548c\u9762\u79ef\uff1a \u8ddd\u79bb\u77e9\u9635\u7b97\u6cd5 \u7ebf\u5230\u591a\u8fb9\u5f62\u7b97\u6cd5","title":"7.3 \u51e0\u4f55\u8c13\u8bcd\u4e0e\u64cd\u4f5c"},{"location":"8-%E6%8A%95%E5%BD%B1%E6%94%AF%E6%8C%81/","text":"8 \u6295\u5f71\u652f\u6301 \u2693\ufe0e \u6b64\u9875\u9762\u4e0a\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 from qgis.core import ( QgsCoordinateReferenceSystem , QgsCoordinateTransform , QgsProject , QgsPointXY , ) 8.1 \u5750\u6807\u53c2\u8003\u7cfb\u7edf \u2693\ufe0e \u5750\u6807\u53c2\u8003\u7cfb\u7edf\uff08CRS\uff09\u7531 QgsCoordinateReferenceSystem \u7c7b\u5c01\u88c5 \u3002\u53ef\u4ee5\u901a\u8fc7\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u521b\u5efa\u6b64\u7c7b\u7684\u5b9e\u4f8b\uff1a ID 1 2 3 4 # WGS84\uff1a4326 crs = QgsCoordinateReferenceSystem ( \"EPSG:4326\" ) print ( crs . isValid ()) # True QGIS\u652f\u6301\u4e0d\u540c\u7684CRS\u8bc6\u522b\u7b26\uff0c\u652f\u6301\u4ee5\u4e0b\u683c\u5f0f\uff1a EPSG:<code> \u2014\u2014EPSG\u7ec4\u7ec7\u5206\u914d\u7684ID\u2014\u2014\u4f7f\u7528 createFromOgcWms() POSTGIS:<srid> \u2014\u2014PostGIS\u6570\u636e\u5e93\u4f7f\u7528\u7684ID\u2014\u2014\u4f7f\u7528 createFromSrid() INTERNAL:<srsid> \u2014\u2014QGIS\u5185\u90e8\u6570\u636e\u5e93\u4e2d\u4f7f\u7528\u7684ID\uff0c\u4f7f\u7528 createFromSrsId() PROJ:<proj> \u2014\u2014\u4f7f\u7528 createFromProj() WKT:<wkt> \u2014\u2014\u4f7f\u7528 createFromWkt() \u5982\u679c\u672a\u6307\u5b9a\u524d\u7f00\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528WKT\u5b9a\u4e49\u3002 \u901a\u8fc7WKT\u6307\u5b9aCRS 1 2 3 4 5 6 wkt = 'GEOGCS[\"WGS84\", DATUM[\"WGS84\", SPHEROID[\"WGS84\", 6378137.0, 298.257223563]],' \\ 'PRIMEM[\"Greenwich\", 0.0], UNIT[\"degree\",0.017453292519943295],' \\ 'AXIS[\"Longitude\",EAST], AXIS[\"Latitude\",NORTH]]' crs = QgsCoordinateReferenceSystem ( wkt ) print ( crs . isValid ()) # True \u521b\u5efa\u4e00\u4e2a\u65e0\u6548\u7684CRS\uff0c\u7136\u540e\u4f7f\u7528\u5176\u4e2d\u4e00\u4e2a create* \u51fd\u6570\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528Proj\u5b57\u7b26\u4e32\u521d\u59cb\u5316\u6295\u5f71\u3002 1 2 3 4 crs = QgsCoordinateReferenceSystem () crs . createFromProj ( \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\" ) print ( crs . isValid ()) # True \u68c0\u67e5CRS\u7684\u521b\u5efa\uff08\u5373\u5728\u6570\u636e\u5e93\u4e2d\u67e5\u627e\uff09\u662f\u5426\u6210\u529f\u662f\u660e\u667a\u7684\uff1a isValid() \u5fc5\u987b\u8fd4\u56de True \u3002 \u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e\u7a7a\u95f4\u53c2\u8003\u7cfb\u7edf\u7684\u521d\u59cb\u5316\uff0cQGIS\u9700\u8981\u5728\u5176\u5185\u90e8\u6570\u636e\u5e93 srs.db \u4e2d\u67e5\u627e\u9002\u5f53\u7684\u503c\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u9700\u8981\u4f7f\u7528 QgsApplication.setPrefixPath() \u6b63\u786e\u8bbe\u7f6e\u8def\u5f84 \uff0c\u5426\u5219\u5c06\u65e0\u6cd5\u627e\u5230\u6570\u636e\u5e93\u3002\u5982\u679c\u4f60\u5728QGIS Python\u63a7\u5236\u53f0\u4e2d\u8fd0\u884c\u547d\u4ee4\u6216\u5f00\u53d1\u63d2\u4ef6\uff0c\u5219\u65e0\u9700\u5173\u6ce8\uff1a\u4e00\u5207\u90fd\u5df2\u7ecf\u4e3a\u4f60\u51c6\u5907\u597d\u4e86\u3002 \u8bbf\u95ee\u7a7a\u95f4\u53c2\u8003\u7cfb\u7edf\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 crs = QgsCoordinateReferenceSystem ( 4326 ) print ( \"QGIS CRS ID:\" , crs . srsid ()) print ( \"PostGIS SRID:\" , crs . postgisSrid ()) print ( \"Description:\" , crs . description ()) print ( \"Projection Acronym:\" , crs . projectionAcronym ()) print ( \"Ellipsoid Acronym:\" , crs . ellipsoidAcronym ()) print ( \"Proj4 String:\" , crs . toProj4 ()) # \u68c0\u67e5\u662f\u5730\u7406\u5750\u6807\u7cfb\u7edf\u8fd8\u662f\u6295\u5f71\u5750\u6807\u7cfb\u7edf print ( \"Is geographic:\" , crs . isGeographic ()) # \u68c0\u67e5CRS\u7684\u5730\u56fe\u5355\u4f4d\u7c7b\u578b\uff08\u5728QGis::units\u679a\u4e3e\u4e2d\u5b9a\u4e49\uff09 print ( \"Map units:\" , crs . mapUnits ()) \u8f93\u51fa: 1 2 3 4 5 6 7 8 QGIS CRS ID : 3452 PostGIS SRID : 4326 Description : WGS 84 Projection Acronym : longlat Ellipsoid Acronym : WGS84 Proj4 String : + proj = longlat + datum = WGS84 + no_defs Is geographic : True Map units : 6 8.2 \u5750\u6807\u53c2\u8003\u7cfb\u7edf\u8f6c\u6362 \u2693\ufe0e \u4f60\u53ef\u4ee5\u4f7f\u7528 QgsCoordinateTransform \u7c7b\u5728\u4e0d\u540c\u7684\u7a7a\u95f4\u53c2\u8003\u7cfb\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\u4f7f\u7528\u5b83\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u521b\u5efa\u539f\u59cb\u548c\u76ee\u6807CRS\uff0c\u5e76\u5728\u5f53\u524d\u9879\u76ee\u4e2d\u6784\u9020 QgsCoordinateTransform \u5b9e\u4f8b\u3002\u7136\u540e\u53ea\u9700\u53cd\u590d\u8c03\u7528 transform() \u51fd\u6570\u8fdb\u884c\u8f6c\u6362\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f1a\u6b63\u5411\u8f6c\u6362\uff0c\u4f46\u4e5f\u53ef\u4ee5\u9006\u5411\u8f6c\u6362\u3002 1 2 3 4 5 6 7 8 9 10 11 crsSrc = QgsCoordinateReferenceSystem ( 4326 ) # WGS 84 crsDest = QgsCoordinateReferenceSystem ( 32633 ) # WGS 84 / UTM zone 33N xform = QgsCoordinateTransform ( crsSrc , crsDest , QgsProject . instance ()) # \u6b63\u5411\u8f6c\u6362: src -> dest pt1 = xform . transform ( QgsPointXY ( 18 , 5 )) print ( \"Transformed point:\" , pt1 ) # \u9006\u5411\u8f6c\u6362: dest -> src pt2 = xform . transform ( pt1 , QgsCoordinateTransform . ReverseTransform ) print ( \"Transformed back:\" , pt2 ) \u8f93\u51fa: 1 2 Transformed point : < QgsPointXY : POINT ( 832713.79873844375833869 553423.98688333143945783 ) > Transformed back : < QgsPointXY : POINT ( 18 5 ) >","title":"8-\u6295\u5f71\u652f\u6301"},{"location":"8-%E6%8A%95%E5%BD%B1%E6%94%AF%E6%8C%81/#8","text":"\u6b64\u9875\u9762\u4e0a\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 from qgis.core import ( QgsCoordinateReferenceSystem , QgsCoordinateTransform , QgsProject , QgsPointXY , )","title":"8 \u6295\u5f71\u652f\u6301"},{"location":"8-%E6%8A%95%E5%BD%B1%E6%94%AF%E6%8C%81/#81","text":"\u5750\u6807\u53c2\u8003\u7cfb\u7edf\uff08CRS\uff09\u7531 QgsCoordinateReferenceSystem \u7c7b\u5c01\u88c5 \u3002\u53ef\u4ee5\u901a\u8fc7\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u521b\u5efa\u6b64\u7c7b\u7684\u5b9e\u4f8b\uff1a ID 1 2 3 4 # WGS84\uff1a4326 crs = QgsCoordinateReferenceSystem ( \"EPSG:4326\" ) print ( crs . isValid ()) # True QGIS\u652f\u6301\u4e0d\u540c\u7684CRS\u8bc6\u522b\u7b26\uff0c\u652f\u6301\u4ee5\u4e0b\u683c\u5f0f\uff1a EPSG:<code> \u2014\u2014EPSG\u7ec4\u7ec7\u5206\u914d\u7684ID\u2014\u2014\u4f7f\u7528 createFromOgcWms() POSTGIS:<srid> \u2014\u2014PostGIS\u6570\u636e\u5e93\u4f7f\u7528\u7684ID\u2014\u2014\u4f7f\u7528 createFromSrid() INTERNAL:<srsid> \u2014\u2014QGIS\u5185\u90e8\u6570\u636e\u5e93\u4e2d\u4f7f\u7528\u7684ID\uff0c\u4f7f\u7528 createFromSrsId() PROJ:<proj> \u2014\u2014\u4f7f\u7528 createFromProj() WKT:<wkt> \u2014\u2014\u4f7f\u7528 createFromWkt() \u5982\u679c\u672a\u6307\u5b9a\u524d\u7f00\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528WKT\u5b9a\u4e49\u3002 \u901a\u8fc7WKT\u6307\u5b9aCRS 1 2 3 4 5 6 wkt = 'GEOGCS[\"WGS84\", DATUM[\"WGS84\", SPHEROID[\"WGS84\", 6378137.0, 298.257223563]],' \\ 'PRIMEM[\"Greenwich\", 0.0], UNIT[\"degree\",0.017453292519943295],' \\ 'AXIS[\"Longitude\",EAST], AXIS[\"Latitude\",NORTH]]' crs = QgsCoordinateReferenceSystem ( wkt ) print ( crs . isValid ()) # True \u521b\u5efa\u4e00\u4e2a\u65e0\u6548\u7684CRS\uff0c\u7136\u540e\u4f7f\u7528\u5176\u4e2d\u4e00\u4e2a create* \u51fd\u6570\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528Proj\u5b57\u7b26\u4e32\u521d\u59cb\u5316\u6295\u5f71\u3002 1 2 3 4 crs = QgsCoordinateReferenceSystem () crs . createFromProj ( \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\" ) print ( crs . isValid ()) # True \u68c0\u67e5CRS\u7684\u521b\u5efa\uff08\u5373\u5728\u6570\u636e\u5e93\u4e2d\u67e5\u627e\uff09\u662f\u5426\u6210\u529f\u662f\u660e\u667a\u7684\uff1a isValid() \u5fc5\u987b\u8fd4\u56de True \u3002 \u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e\u7a7a\u95f4\u53c2\u8003\u7cfb\u7edf\u7684\u521d\u59cb\u5316\uff0cQGIS\u9700\u8981\u5728\u5176\u5185\u90e8\u6570\u636e\u5e93 srs.db \u4e2d\u67e5\u627e\u9002\u5f53\u7684\u503c\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u9700\u8981\u4f7f\u7528 QgsApplication.setPrefixPath() \u6b63\u786e\u8bbe\u7f6e\u8def\u5f84 \uff0c\u5426\u5219\u5c06\u65e0\u6cd5\u627e\u5230\u6570\u636e\u5e93\u3002\u5982\u679c\u4f60\u5728QGIS Python\u63a7\u5236\u53f0\u4e2d\u8fd0\u884c\u547d\u4ee4\u6216\u5f00\u53d1\u63d2\u4ef6\uff0c\u5219\u65e0\u9700\u5173\u6ce8\uff1a\u4e00\u5207\u90fd\u5df2\u7ecf\u4e3a\u4f60\u51c6\u5907\u597d\u4e86\u3002 \u8bbf\u95ee\u7a7a\u95f4\u53c2\u8003\u7cfb\u7edf\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 crs = QgsCoordinateReferenceSystem ( 4326 ) print ( \"QGIS CRS ID:\" , crs . srsid ()) print ( \"PostGIS SRID:\" , crs . postgisSrid ()) print ( \"Description:\" , crs . description ()) print ( \"Projection Acronym:\" , crs . projectionAcronym ()) print ( \"Ellipsoid Acronym:\" , crs . ellipsoidAcronym ()) print ( \"Proj4 String:\" , crs . toProj4 ()) # \u68c0\u67e5\u662f\u5730\u7406\u5750\u6807\u7cfb\u7edf\u8fd8\u662f\u6295\u5f71\u5750\u6807\u7cfb\u7edf print ( \"Is geographic:\" , crs . isGeographic ()) # \u68c0\u67e5CRS\u7684\u5730\u56fe\u5355\u4f4d\u7c7b\u578b\uff08\u5728QGis::units\u679a\u4e3e\u4e2d\u5b9a\u4e49\uff09 print ( \"Map units:\" , crs . mapUnits ()) \u8f93\u51fa: 1 2 3 4 5 6 7 8 QGIS CRS ID : 3452 PostGIS SRID : 4326 Description : WGS 84 Projection Acronym : longlat Ellipsoid Acronym : WGS84 Proj4 String : + proj = longlat + datum = WGS84 + no_defs Is geographic : True Map units : 6","title":"8.1 \u5750\u6807\u53c2\u8003\u7cfb\u7edf"},{"location":"8-%E6%8A%95%E5%BD%B1%E6%94%AF%E6%8C%81/#82","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 QgsCoordinateTransform \u7c7b\u5728\u4e0d\u540c\u7684\u7a7a\u95f4\u53c2\u8003\u7cfb\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\u4f7f\u7528\u5b83\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u521b\u5efa\u539f\u59cb\u548c\u76ee\u6807CRS\uff0c\u5e76\u5728\u5f53\u524d\u9879\u76ee\u4e2d\u6784\u9020 QgsCoordinateTransform \u5b9e\u4f8b\u3002\u7136\u540e\u53ea\u9700\u53cd\u590d\u8c03\u7528 transform() \u51fd\u6570\u8fdb\u884c\u8f6c\u6362\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f1a\u6b63\u5411\u8f6c\u6362\uff0c\u4f46\u4e5f\u53ef\u4ee5\u9006\u5411\u8f6c\u6362\u3002 1 2 3 4 5 6 7 8 9 10 11 crsSrc = QgsCoordinateReferenceSystem ( 4326 ) # WGS 84 crsDest = QgsCoordinateReferenceSystem ( 32633 ) # WGS 84 / UTM zone 33N xform = QgsCoordinateTransform ( crsSrc , crsDest , QgsProject . instance ()) # \u6b63\u5411\u8f6c\u6362: src -> dest pt1 = xform . transform ( QgsPointXY ( 18 , 5 )) print ( \"Transformed point:\" , pt1 ) # \u9006\u5411\u8f6c\u6362: dest -> src pt2 = xform . transform ( pt1 , QgsCoordinateTransform . ReverseTransform ) print ( \"Transformed back:\" , pt2 ) \u8f93\u51fa: 1 2 Transformed point : < QgsPointXY : POINT ( 832713.79873844375833869 553423.98688333143945783 ) > Transformed back : < QgsPointXY : POINT ( 18 5 ) >","title":"8.2 \u5750\u6807\u53c2\u8003\u7cfb\u7edf\u8f6c\u6362"},{"location":"9-%E4%BD%BF%E7%94%A8%E5%9C%B0%E5%9B%BE%E7%94%BB%E5%B8%83/","text":"\u672c\u8282\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from qgis.PyQt.QtGui import ( QColor , ) from qgis.PyQt.QtCore import Qt , QRectF from qgis.core import ( QgsVectorLayer , QgsPoint , QgsPointXY , QgsProject , QgsGeometry , QgsMapRendererJob , ) from qgis.gui import ( QgsMapCanvas , QgsVertexMarker , QgsMapCanvasItem , QgsRubberBand , ) 9 \u4f7f\u7528\u5730\u56fe\u753b\u5e03 \u2693\ufe0e \u5730\u56fe\u753b\u5e03\u63a7\u4ef6\u53ef\u80fd\u662fQGIS\u4e2d\u6700\u91cd\u8981\u7684\u63a7\u4ef6\uff0c\u56e0\u4e3a\u5b83\u663e\u793a\u4e86\u7531\u91cd\u53e0\u5730\u56fe\u56fe\u5c42\u7ec4\u6210\u7684\u5730\u56fe\uff0c\u5e76\u5141\u8bb8\u4e0e\u5730\u56fe\u548c\u56fe\u5c42\u8fdb\u884c\u4ea4\u4e92\u3002\u753b\u5e03\u59cb\u7ec8\u663e\u793a\u7531\u5f53\u524d\u753b\u5e03\u8303\u56f4\u5b9a\u4e49\u5730\u56fe\u7684\u4e00\u90e8\u5206\u3002\u901a\u8fc7\u4f7f\u7528**\u5730\u56fe\u5de5\u5177**\u5b8c\u6210\u4ea4\u4e92\uff1a\u6709\u5e73\u79fb\uff0c\u7f29\u653e\uff0c\u8bc6\u522b\u56fe\u5c42\uff0c\u6d4b\u91cf\uff0c\u77e2\u91cf\u7f16\u8f91\u7b49\u5de5\u5177\u3002\u4e0e\u5176\u4ed6\u56fe\u5f62\u7a0b\u5e8f\u7c7b\u4f3c\uff0c\u603b\u6709\u4e00\u4e2a\u5de5\u5177\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u53ef\u7528\u5de5\u5177\u4e4b\u95f4\u5207\u6362\u3002 \u5730\u56fe\u753b\u5e03\u7531 qgis.gui \u6a21\u5757\u4e2d\u7684 QgsMapCanvas \u7c7b\u5b9e\u73b0\u3002\u8be5\u7c7b\u57fa\u4e8eQt Graphics View\u6846\u67b6\u3002\u8be5\u6846\u67b6\u901a\u5e38\u63d0\u4f9b\u573a\u666f\u548c\u89c6\u56fe\uff0c\u5176\u4e2d\u653e\u7f6e\u81ea\u5b9a\u4e49\u56fe\u5f62\u9879\uff0c\u5e76\u4e14\u7528\u6237\u53ef\u4ee5\u4e0e\u5b83\u4eec\u4ea4\u4e92\u3002\u6211\u4eec\u5047\u8bbe\u4f60\u5bf9Qt\u8db3\u591f\u719f\u6089\uff0c\u4e86\u89e3\u56fe\u5f62\u573a\u666f\uff0c\u89c6\u56fe\u548c\u9879\u7684\u6982\u5ff5\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u9605\u8bfb \u6846\u67b6\u6982\u8ff0 \u3002 \u65e0\u8bba\u4f55\u65f6\u5e73\u79fb\uff0c\u653e\u5927/\u7f29\u5c0f\uff08\u6216\u89e6\u53d1\u5237\u65b0\u7684\u5176\u4ed6\u64cd\u4f5c\uff09\u5730\u56fe\uff0c\u5730\u56fe\u90fd\u4f1a\u5728\u5f53\u524d\u8303\u56f4\u5185\u518d\u6b21\u6e32\u67d3\u3002\u56fe\u5c42\u5c06\u6e32\u67d3\u4e3a\u56fe\u50cf\uff08\u4f7f\u7528 QgsMapRendererJob \u7c7b\uff09\uff0c\u5e76\u663e\u793a\u5728\u753b\u5e03\u4e0a\u3002 QgsMapCanvas \u7c7b\u8fd8\u63a7\u5236\u6e32\u67d3\u56fe\u7684\u5237\u65b0\u3002\u9664\u4e86\u4f5c\u4e3a\u80cc\u666f\u7684\u9879\uff0c\u53ef\u80fd\u8fd8\u6709\u66f4\u591a\u7684**\u5730\u56fe\u753b\u5e03\u9879**\u3002 \u5178\u578b\u7684\u5730\u56fe\u753b\u5e03\u9879\u662f\u6a61\u76ae\u6761\uff08\u7528\u4e8e\u6d4b\u91cf\uff0c\u77e2\u91cf\u7f16\u8f91\u7b49\uff09\u6216\u9876\u70b9\u6807\u8bb0\u3002\u753b\u5e03\u9879\u901a\u5e38\u7528\u4e8e\u7ed9\u5730\u56fe\u5de5\u5177\u63d0\u4f9b\u89c6\u89c9\u53cd\u9988\uff0c\u4f8b\u5982\uff0c\u5728\u521b\u5efa\u65b0\u591a\u8fb9\u5f62\u65f6\uff0c\u5730\u56fe\u5de5\u5177\u4f1a\u521b\u5efa\u4e00\u4e2a\u6a61\u76ae\u6761\u753b\u5e03\u9879\uff0c\u663e\u793a\u591a\u8fb9\u5f62\u7684\u5f53\u524d\u5f62\u72b6\u3002\u6240\u6709\u5730\u56fe\u753b\u5e03\u9879\u90fd\u662f QgsMapCanvasItem \u7684\u5b50\u7c7b\uff0c\u5b83\u4e3a\u57fa\u7c7b QGraphicsItem \u5bf9\u8c61\u6dfb\u52a0\u4e86\u66f4\u591a\u529f\u80fd\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u5730\u56fe\u753b\u5e03\u67b6\u6784\u5305\u542b\u4e09\u4e2a\u6982\u5ff5\uff1a \u5730\u56fe\u753b\u5e03\u2014\u2014\u7528\u4e8e\u6d4f\u89c8\u5730\u56fe \u5730\u56fe\u753b\u5e03\u9879\u2014\u2014\u53ef\u4ee5\u5728\u5730\u56fe\u753b\u5e03\u4e0a\u663e\u793a\u7684\u5176\u4ed6\u9879 \u5730\u56fe\u5de5\u5177\u2014\u2014\u7528\u4e8e\u4e0e\u5730\u56fe\u753b\u5e03\u4ea4\u4e92 9.1 \u5d4c\u5165\u5730\u56fe\u753b\u5e03 \u2693\ufe0e \u5730\u56fe\u753b\u5e03\u662f\u4e00\u4e2a\u63a7\u4ef6\uff0c\u5c31\u50cf\u4efb\u4f55\u5176\u4ed6Qt\u63a7\u4ef6\u4e00\u6837\uff0c\u56e0\u6b64\u4f7f\u7528\u5b83\u5c31\u50cf\u521b\u5efa\u548c\u663e\u793a\u5b83\u4e00\u6837\u7b80\u5355 1 2 canvas = QgsMapCanvas () canvas . show () \u8fd9\u5c06\u751f\u6210\u4e00\u4e2a\u5e26\u6709\u5730\u56fe\u753b\u5e03\u7684\u72ec\u7acb\u7a97\u53e3\u3002\u5b83\u4e5f\u53ef\u4ee5\u5d4c\u5165\u5230\u73b0\u6709\u7684\u63a7\u4ef6\u6216\u7a97\u53e3\u4e2d\u3002\u4f7f\u7528 .ui \u6587\u4ef6\u548cQt\u8bbe\u8ba1\u5e08\u65f6\uff0c\u5728\u8868\u5355\u4e0a\u653e\u7f6e\u4e00\u4e2a QWidget \u5e76\u5c06\u5176\u63d0\u5347\u4e3a\u65b0\u7c7b\uff1a\u8bbe\u7f6e QgsMapCanvas \u4e3a\u7c7b\u540d\u5e76\u8bbe\u7f6e qgis.gui \u4e3a\u5934\u6587\u4ef6\u3002 pyuic5 \u5de5\u5177\u5c06\u641e\u5b9a\u5b83\uff08\u8bd1\u8005\u6ce8\uff1a\u7f16\u8bd1\u4e3apy\u811a\u672c\u6587\u4ef6\uff09\u3002\u8fd9\u662f\u5d4c\u5165\u753b\u5e03\u7684\u4e00\u79cd\u975e\u5e38\u65b9\u4fbf\u7684\u65b9\u6cd5\u3002\u53e6\u4e00\u79cd\u53ef\u80fd\u6027\u662f\u624b\u52a8\u7f16\u5199\u4ee3\u7801\u6784\u9020\u5730\u56fe\u753b\u5e03\u548c\u5176\u4ed6\u63a7\u4ef6\uff08\u4f5c\u4e3a\u4e3b\u7a97\u53e3\u6216\u5bf9\u8bdd\u6846\u7684\u5b50\u7a97\u53e3\uff09\u5e76\u521b\u5efa\u5e03\u5c40\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5730\u56fe\u753b\u5e03\u5177\u6709\u9ed1\u8272\u80cc\u666f\uff0c\u4e0d\u4f7f\u7528\u6d88\u9664\u952f\u9f7f\u3002\u8bbe\u7f6e\u767d\u8272\u80cc\u666f\u5e76\u542f\u7528\u6297\u952f\u9f7f\u6765\u5b9e\u73b0\u5e73\u6ed1\u6e32\u67d3 1 2 canvas . setCanvasColor ( Qt . white ) canvas . enableAntiAliasing ( True ) \uff08\u5982\u679c\u4f60\u60f3\u77e5\u9053\uff0c Qt \u6765\u81ea PyQt.QtCore \u6a21\u5757\uff0c\u5e76\u4e14 Qt.white \u662f\u9884\u5b9a\u4e49\u7684 QColor \u5b9e\u4f8b\u4e4b\u4e00\u3002\uff09 \u73b0\u5728\u662f\u65f6\u5019\u6dfb\u52a0\u4e00\u4e9b\u5730\u56fe\u56fe\u5c42\u4e86\u3002\u6211\u4eec\u9996\u5148\u6253\u5f00\u4e00\u4e2a\u56fe\u5c42\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u5f53\u524d\u9879\u76ee\u4e2d\u3002\u7136\u540e\u6211\u4eec\u5c06\u8bbe\u7f6e\u753b\u5e03\u8303\u56f4\u5e76\u8bbe\u7f6e\u753b\u5e03\u7684\u56fe\u5c42\u5217\u8868 1 2 3 4 5 6 7 8 9 10 11 12 vlayer = QgsVectorLayer ( \"testdata/airports.shp\" , \"Airports layer\" , \"ogr\" ) if not vlayer . isValid (): print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) # \u5c06\u56fe\u5c42\u6dfb\u52a0\u5230\u6ce8\u518c\u8868 QgsProject . instance () . addMapLayer ( vlayer ) # \u7f29\u653e\u5230\u56fe\u5c42 canvas . setExtent ( vlayer . extent ()) # \u8bbe\u7f6e\u5730\u56fe\u753b\u5e03\u7684\u56fe\u5c42\u96c6 canvas . setLayers ([ vlayer ]) \u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\u540e\uff0c\u753b\u5e03\u5c06\u663e\u793a\u5df2\u52a0\u8f7d\u7684\u56fe\u5c42\u3002 9.2 \u6a61\u76ae\u6761\u548c\u9876\u70b9\u6807\u8bb0 \u2693\ufe0e \u5728\u753b\u5e03\u4e0a\u7684\u5730\u56fe\u9876\u90e8\u663e\u793a\u4e00\u4e9b\u5176\u4ed6\u6570\u636e\uff0c\u4f7f\u7528\u5730\u56fe\u753b\u5e03\u9879\u3002\u53ef\u4ee5\u521b\u5efa\u81ea\u5b9a\u4e49\u753b\u5e03\u9879\u7c7b\uff08\u5982\u4e0b\u6240\u8ff0\uff09\uff0c\u4f46\u4e3a\u65b9\u4fbf\u8d77\u89c1\uff0c\u6709\u4e24\u4e2a\u6709\u7528\u7684\u753b\u5e03\u9879\u7c7b\uff1a QgsRubberBand \u7528\u4e8e\u7ed8\u5236\u6298\u7ebf\u6216\u591a\u8fb9\u5f62\uff0c QgsVertexMarker \u7ed8\u5236\u70b9\u3002\u5b83\u4eec\u90fd\u4f7f\u7528\u5730\u56fe\u5750\u6807\uff0c\u56e0\u6b64\u5728\u5e73\u79fb\u6216\u7f29\u653e\u753b\u5e03\u65f6\u4f1a\u81ea\u52a8\u79fb\u52a8/\u7f29\u653e\u5f62\u72b6\u3002 \u663e\u793a\u6298\u7ebf 1 2 3 r = QgsRubberBand ( canvas , False ) # False = \u4e0d\u662f\u591a\u8fb9\u5f62 points = [ QgsPointXY ( - 100 , 45 ), QgsPointXY ( 10 , 60 ), QgsPointXY ( 120 , 45 )] r . setToGeometry ( QgsGeometry . fromPolyline ( points ), None ) \u663e\u793a\u591a\u8fb9\u5f62 1 2 3 r = QgsRubberBand ( canvas , True ) # True = \u662f\u591a\u8fb9\u5f62 points = [[ QgsPointXY ( - 100 , 35 ), QgsPointXY ( 10 , 50 ), QgsPointXY ( 120 , 35 )]] r . setToGeometry ( QgsGeometry . fromPolygonXY ( points ), None ) \u8bf7\u6ce8\u610f\uff0c\u591a\u8fb9\u5f62\u7684\u70b9\u4e0d\u662f\u666e\u901a\u5217\u8868\uff1a\u5b9e\u9645\u4e0a\uff0c\u5b83\u662f\u5305\u542b\u591a\u8fb9\u5f62\u7ebf\u73af\u7684\u73af\u5217\u8868\uff1a\u7b2c\u4e00\u4e2a\u73af\u662f\u5916\u8fb9\u6846\uff0c\u7b2c\u4e8c\u4e2a\uff08\u53ef\u9009\uff09\u73af\u5bf9\u5e94\u4e8e\u591a\u8fb9\u5f62\u4e2d\u7684\u5b54\u3002 \u6a61\u76ae\u6761\u5141\u8bb8\u4e00\u4e9b\u5b9a\u5236\uff0c\u5373\u6539\u53d8\u5b83\u4eec\u7684\u989c\u8272\u548c\u7ebf\u5bbd 1 2 r . setColor ( QColor ( 0 , 0 , 255 )) r . setWidth ( 3 ) \u753b\u5e03\u9879\u7ed1\u5b9a\u5230\u753b\u5e03\u573a\u666f\u3002\u8981\u6682\u65f6\u9690\u85cf\u5b83\u4eec\uff08\u5e76\u518d\u6b21\u663e\u793a\u5b83\u4eec\uff09\uff0c\u8bf7\u4f7f\u7528 hide() \u548c show() \u7ec4\u5408\u3002\u5b8c\u5168\u5220\u9664\u8be5\u9879\uff0c\u4f60\u5fc5\u987b\u5c06\u5176\u4ece\u753b\u5e03\u7684\u573a\u666f\u4e2d\u5220\u9664 1 canvas . scene () . removeItem ( r ) \uff08\u5728C ++\u4e2d\uff0c\u53ef\u4ee5\u53ea\u5220\u9664\u8be5\u9879\uff0c\u4f46\u662f\u5728Python del r \u4e2d \u53ea\u5220\u9664\u5f15\u7528\uff0c\u5e76\u4e14\u8be5\u5bf9\u8c61\u4ecd\u7136\u5b58\u5728\uff0c\u56e0\u4e3a\u5b83\u7531\u753b\u5e03\u62e5\u6709\uff09 \u6a61\u76ae\u6761\u4e5f\u53ef\u7528\u4e8e\u7ed8\u5236\u70b9\uff0c\u4f46 QgsVertexMarker \u7c7b\u66f4\u9002\u5408\u4e8e\u6b64\uff08 QgsRubberBand \u4ec5\u5728\u6240\u9700\u70b9\u5468\u56f4\u7ed8\u5236\u4e00\u4e2a\u77e9\u5f62\uff09\u3002 \u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528\u9876\u70b9\u6807\u8bb0\uff1a 1 2 m = QgsVertexMarker ( canvas ) m . setCenter ( QgsPointXY ( 10 , 40 )) \u8fd9\u5c06\u5728\u4f4d\u7f6e**[10,45]**\u4e0a\u7ed8\u5236\u4e00\u4e2a\u7ea2\u5341\u5b57\u3002\u53ef\u4ee5\u81ea\u5b9a\u4e49\u56fe\u6807\u7c7b\u578b\uff0c\u5927\u5c0f\uff0c\u989c\u8272\u548c\u5bbd\u5ea6 1 2 3 4 m . setColor ( QColor ( 0 , 255 , 0 )) m . setIconSize ( 5 ) m . setIconType ( QgsVertexMarker . ICON_BOX ) # or ICON_CROSS, ICON_X m . setPenWidth ( 3 ) \u4e34\u65f6\u9690\u85cf\u9876\u70b9\u6807\u8bb0\u5e76\u4ece\u753b\u5e03\u4e2d\u5220\u9664\u5b83\u4eec\uff0c\u4f7f\u7528\u4e0e\u6a61\u76ae\u6761\u76f8\u540c\u7684\u65b9\u6cd5\u3002 9.3 \u5728\u753b\u5e03\u4e2d\u4f7f\u7528\u5730\u56fe\u5de5\u5177 \u2693\ufe0e \u4ee5\u4e0b\u793a\u4f8b\u6784\u9020\u4e00\u4e2a\u7a97\u53e3\uff0c\u5176\u4e2d\u5305\u542b\u7528\u4e8e\u5730\u56fe\u5e73\u79fb\u548c\u7f29\u653e\u7684\u5730\u56fe\u753b\u5e03\u548c\u57fa\u672c\u5730\u56fe\u5de5\u5177\u3002\u6fc0\u6d3b\u6bcf\u4e2a\u5de5\u5177\uff1a\u5e73\u79fb\u5de5\u5177 QgsMapToolPan \uff0c\u653e\u5927\u7f29\u5c0f\u5de5\u5177 QgsMapToolZoom \u3002\u8bbe\u7f6e\u4e3a\u53ef\u88ab\u9009\u4e2d\uff0c\u5141\u8bb8\u81ea\u52a8\u5904\u7406\u9009\u4e2d/\u672a\u9009\u4e2d\u7684\u64cd\u4f5c\u72b6\u6001\u2014\u2014\u5f53\u6fc0\u6d3b\u5730\u56fe\u5de5\u5177\u65f6\uff0c\u4e00\u4e2a\u5de5\u5177\u88ab\u9009\u4e2d\u65f6\uff0c\u53d6\u6d88\u9009\u4e2d\u4e0a\u4e00\u4e2a\u5de5\u5177\u3002\u4f7f\u7528 setMapTool() \u65b9\u6cd5\u6fc0\u6d3b\u5730\u56fe\u5de5\u5177\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 from qgis.gui import * from qgis.PyQt.QtWidgets import QAction , QMainWindow from qgis.PyQt.QtCore import Qt class MyWnd ( QMainWindow ): def __init__ ( self , layer ): QMainWindow . __init__ ( self ) self . canvas = QgsMapCanvas () self . canvas . setCanvasColor ( Qt . white ) self . canvas . setExtent ( layer . extent ()) self . canvas . setLayers ([ layer ]) self . setCentralWidget ( self . canvas ) self . actionZoomIn = QAction ( \"Zoom in\" , self ) self . actionZoomOut = QAction ( \"Zoom out\" , self ) self . actionPan = QAction ( \"Pan\" , self ) self . actionZoomIn . setCheckable ( True ) self . actionZoomOut . setCheckable ( True ) self . actionPan . setCheckable ( True ) self . actionZoomIn . triggered . connect ( self . zoomIn ) self . actionZoomOut . triggered . connect ( self . zoomOut ) self . actionPan . triggered . connect ( self . pan ) self . toolbar = self . addToolBar ( \"Canvas actions\" ) self . toolbar . addAction ( self . actionZoomIn ) self . toolbar . addAction ( self . actionZoomOut ) self . toolbar . addAction ( self . actionPan ) # \u521b\u5efa\u5730\u56fe\u5de5\u5177 self . toolPan = QgsMapToolPan ( self . canvas ) self . toolPan . setAction ( self . actionPan ) self . toolZoomIn = QgsMapToolZoom ( self . canvas , False ) # false = in self . toolZoomIn . setAction ( self . actionZoomIn ) self . toolZoomOut = QgsMapToolZoom ( self . canvas , True ) # true = out self . toolZoomOut . setAction ( self . actionZoomOut ) self . pan () def zoomIn ( self ): self . canvas . setMapTool ( self . toolZoomIn ) def zoomOut ( self ): self . canvas . setMapTool ( self . toolZoomOut ) def pan ( self ): self . canvas . setMapTool ( self . toolPan ) \u4f60\u53ef\u4ee5\u5728Python\u63a7\u5236\u53f0\u7f16\u8f91\u5668\u4e2d\u5c1d\u8bd5\u4e0a\u8ff0\u4ee3\u7801\u3002\u8c03\u7528\u753b\u5e03\u7a97\u53e3\uff0c\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\u4ee5\u5b9e\u4f8b\u5316 MyWnd \u7c7b\u3002\u5b83\u4eec\u5c06\u5728\u65b0\u521b\u5efa\u7684\u753b\u5e03\u4e0a\u6e32\u67d3\u5f53\u524d\u9009\u5b9a\u7684\u56fe\u5c42 1 2 w = MyWnd ( iface . activeLayer ()) w . show () 9.3.1 \u4f7f\u7528QgsMapToolIdentifyFeature\u9009\u62e9\u8981\u7d20 \u2693\ufe0e \u4f60\u53ef\u4ee5\u4f7f\u7528\u5730\u56fe\u5de5\u5177 QgsMapToolIdentifyFeature \u4e3a\u7528\u6237\u9009\u62e9\u4e00\u4e2a\u8981\u7d20\uff0c\u8fd9\u4e2a\u8981\u7d20\u5c06\u88ab\u4f20\u9012\u7ed9\u56de\u8c03\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def callback ( feature ): \"\"\"\u5f53\u7528\u6237\u9009\u62e9\u8981\u7d20\u540e\u88ab\u8c03\u7528\"\"\" print ( \"You clicked on feature {} \" . format ( feature . id ())) canvas = iface . mapCanvas () feature_identifier = QgsMapToolIdentifyFeature ( canvas ) # \u8868\u793a\u88ab\u9009\u62e9\u7684\u56fe\u5c42 feature_identifier . setLayer ( vlayer ) # \u5f53\u7528\u6237\u8bc6\u522b\u8981\u7d20\u65f6\u89e6\u53d1\u69fd\u51fd\u6570\uff0c\u4f7f\u7528\u56de\u8c03\u51fd\u6570 feature_identifier . featureIdentified . connect ( callback ) # \u6fc0\u6d3b\u8fd9\u4e2a\u5730\u56fe\u5de5\u5177 canvas . setMapTool ( feature_identifier ) 9.4 \u7f16\u5199\u81ea\u5b9a\u4e49\u5730\u56fe\u5de5\u5177 \u2693\ufe0e \u4f60\u53ef\u4ee5\u7f16\u5199\u81ea\u5b9a\u4e49\u5de5\u5177\uff0c\u6765\u5b9e\u73b0\u7528\u6237\u5728\u753b\u5e03\u4e0a\u6267\u884c\u81ea\u5b9a\u4e49\u884c\u4e3a\u7684\u64cd\u4f5c\u3002 \u5730\u56fe\u5de5\u5177\u5e94\u7ee7\u627f\u81ea QgsMapTool \u7c7b\u6216\u4efb\u4f55\u6d3e\u751f\u7c7b\uff0c\u5e76\u4f7f\u7528 setMapTool() \u5728\u753b\u5e03\u4e2d\u9009\u62e9\u4e3a\u6fc0\u6d3b\u5de5\u5177\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u5730\u56fe\u5de5\u5177\u793a\u4f8b\uff0c\u5b83\u5141\u8bb8\u901a\u8fc7\u5728\u753b\u5e03\u4e0a\u5355\u51fb\u5e76\u62d6\u52a8\u6765\u5b9a\u4e49\u77e9\u5f62\u8303\u56f4\u3002\u5b9a\u4e49\u77e9\u5f62\u540e\uff0c\u5b83\u4f1a\u5728\u63a7\u5236\u53f0\u4e2d\u6253\u5370\u5176\u8fb9\u754c\u5750\u6807\u3002\u5b83\u4f7f\u7528\u524d\u9762\u63cf\u8ff0\u7684\u6a61\u76ae\u6761\u5143\u7d20\u6765\u663e\u793a\u6240\u5b9a\u4e49\u7684\u77e9\u5f62\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 class RectangleMapTool ( QgsMapToolEmitPoint ): def __init__ ( self , canvas ): self . canvas = canvas QgsMapToolEmitPoint . __init__ ( self , self . canvas ) self . rubberBand = QgsRubberBand ( self . canvas , True ) self . rubberBand . setColor ( Qt . red ) self . rubberBand . setWidth ( 1 ) self . reset () def reset ( self ): self . startPoint = self . endPoint = None self . isEmittingPoint = False self . rubberBand . reset ( True ) def canvasPressEvent ( self , e ): self . startPoint = self . toMapCoordinates ( e . pos ()) self . endPoint = self . startPoint self . isEmittingPoint = True self . showRect ( self . startPoint , self . endPoint ) def canvasReleaseEvent ( self , e ): self . isEmittingPoint = False r = self . rectangle () if r is not None : print ( \"Rectangle:\" , r . xMinimum (), r . yMinimum (), r . xMaximum (), r . yMaximum () ) def canvasMoveEvent ( self , e ): if not self . isEmittingPoint : return self . endPoint = self . toMapCoordinates ( e . pos ()) self . showRect ( self . startPoint , self . endPoint ) def showRect ( self , startPoint , endPoint ): self . rubberBand . reset ( QGis . Polygon ) if startPoint . x () == endPoint . x () or startPoint . y () == endPoint . y (): return point1 = QgsPoint ( startPoint . x (), startPoint . y ()) point2 = QgsPoint ( startPoint . x (), endPoint . y ()) point3 = QgsPoint ( endPoint . x (), endPoint . y ()) point4 = QgsPoint ( endPoint . x (), startPoint . y ()) self . rubberBand . addPoint ( point1 , False ) self . rubberBand . addPoint ( point2 , False ) self . rubberBand . addPoint ( point3 , False ) self . rubberBand . addPoint ( point4 , True ) # true to update canvas self . rubberBand . show () def rectangle ( self ): if self . startPoint is None or self . endPoint is None : return None elif ( self . startPoint . x () == self . endPoint . x () or \\ self . startPoint . y () == self . endPoint . y ()): return None return QgsRectangle ( self . startPoint , self . endPoint ) def deactivate ( self ): QgsMapTool . deactivate ( self ) self . deactivated . emit () 9.5 \u7f16\u5199\u81ea\u5b9a\u4e49\u5730\u56fe\u753b\u5e03\u9879 \u2693\ufe0e \u8fd9\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u753b\u5e03\u9879\u7684\u793a\u4f8b\uff0c\u8be5\u753b\u5e03\u9879\u7ed8\u5236\u4e86\u4e00\u4e2a\u5706\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class CircleCanvasItem ( QgsMapCanvasItem ): def __init__ ( self , canvas ): super () . __init__ ( canvas ) self . center = QgsPoint ( 0 , 0 ) self . size = 100 def setCenter ( self , center ): self . center = center def center ( self ): return self . center def setSize ( self , size ): self . size = size def size ( self ): return self . size def boundingRect ( self ): return QRectF ( self . center . x () - self . size / 2 , self . center . y () - self . size / 2 , self . center . x () + self . size / 2 , self . center . y () + self . size / 2 ) def paint ( self , painter , option , widget ): path = QPainterPath () path . moveTo ( self . center . x (), self . center . y ()); path . arcTo ( self . boundingRect (), 0.0 , 360.0 ) painter . fillPath ( path , QColor ( \"red\" )) # \u4f7f\u7528\u81ea\u5b9a\u4e49\u9879: item = CircleCanvasItem ( iface . mapCanvas ()) item . setCenter ( QgsPointXY ( 200 , 200 )) item . setSize ( 80 )","title":"9-\u4f7f\u7528\u5730\u56fe\u753b\u5e03"},{"location":"9-%E4%BD%BF%E7%94%A8%E5%9C%B0%E5%9B%BE%E7%94%BB%E5%B8%83/#9","text":"\u5730\u56fe\u753b\u5e03\u63a7\u4ef6\u53ef\u80fd\u662fQGIS\u4e2d\u6700\u91cd\u8981\u7684\u63a7\u4ef6\uff0c\u56e0\u4e3a\u5b83\u663e\u793a\u4e86\u7531\u91cd\u53e0\u5730\u56fe\u56fe\u5c42\u7ec4\u6210\u7684\u5730\u56fe\uff0c\u5e76\u5141\u8bb8\u4e0e\u5730\u56fe\u548c\u56fe\u5c42\u8fdb\u884c\u4ea4\u4e92\u3002\u753b\u5e03\u59cb\u7ec8\u663e\u793a\u7531\u5f53\u524d\u753b\u5e03\u8303\u56f4\u5b9a\u4e49\u5730\u56fe\u7684\u4e00\u90e8\u5206\u3002\u901a\u8fc7\u4f7f\u7528**\u5730\u56fe\u5de5\u5177**\u5b8c\u6210\u4ea4\u4e92\uff1a\u6709\u5e73\u79fb\uff0c\u7f29\u653e\uff0c\u8bc6\u522b\u56fe\u5c42\uff0c\u6d4b\u91cf\uff0c\u77e2\u91cf\u7f16\u8f91\u7b49\u5de5\u5177\u3002\u4e0e\u5176\u4ed6\u56fe\u5f62\u7a0b\u5e8f\u7c7b\u4f3c\uff0c\u603b\u6709\u4e00\u4e2a\u5de5\u5177\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u53ef\u7528\u5de5\u5177\u4e4b\u95f4\u5207\u6362\u3002 \u5730\u56fe\u753b\u5e03\u7531 qgis.gui \u6a21\u5757\u4e2d\u7684 QgsMapCanvas \u7c7b\u5b9e\u73b0\u3002\u8be5\u7c7b\u57fa\u4e8eQt Graphics View\u6846\u67b6\u3002\u8be5\u6846\u67b6\u901a\u5e38\u63d0\u4f9b\u573a\u666f\u548c\u89c6\u56fe\uff0c\u5176\u4e2d\u653e\u7f6e\u81ea\u5b9a\u4e49\u56fe\u5f62\u9879\uff0c\u5e76\u4e14\u7528\u6237\u53ef\u4ee5\u4e0e\u5b83\u4eec\u4ea4\u4e92\u3002\u6211\u4eec\u5047\u8bbe\u4f60\u5bf9Qt\u8db3\u591f\u719f\u6089\uff0c\u4e86\u89e3\u56fe\u5f62\u573a\u666f\uff0c\u89c6\u56fe\u548c\u9879\u7684\u6982\u5ff5\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u9605\u8bfb \u6846\u67b6\u6982\u8ff0 \u3002 \u65e0\u8bba\u4f55\u65f6\u5e73\u79fb\uff0c\u653e\u5927/\u7f29\u5c0f\uff08\u6216\u89e6\u53d1\u5237\u65b0\u7684\u5176\u4ed6\u64cd\u4f5c\uff09\u5730\u56fe\uff0c\u5730\u56fe\u90fd\u4f1a\u5728\u5f53\u524d\u8303\u56f4\u5185\u518d\u6b21\u6e32\u67d3\u3002\u56fe\u5c42\u5c06\u6e32\u67d3\u4e3a\u56fe\u50cf\uff08\u4f7f\u7528 QgsMapRendererJob \u7c7b\uff09\uff0c\u5e76\u663e\u793a\u5728\u753b\u5e03\u4e0a\u3002 QgsMapCanvas \u7c7b\u8fd8\u63a7\u5236\u6e32\u67d3\u56fe\u7684\u5237\u65b0\u3002\u9664\u4e86\u4f5c\u4e3a\u80cc\u666f\u7684\u9879\uff0c\u53ef\u80fd\u8fd8\u6709\u66f4\u591a\u7684**\u5730\u56fe\u753b\u5e03\u9879**\u3002 \u5178\u578b\u7684\u5730\u56fe\u753b\u5e03\u9879\u662f\u6a61\u76ae\u6761\uff08\u7528\u4e8e\u6d4b\u91cf\uff0c\u77e2\u91cf\u7f16\u8f91\u7b49\uff09\u6216\u9876\u70b9\u6807\u8bb0\u3002\u753b\u5e03\u9879\u901a\u5e38\u7528\u4e8e\u7ed9\u5730\u56fe\u5de5\u5177\u63d0\u4f9b\u89c6\u89c9\u53cd\u9988\uff0c\u4f8b\u5982\uff0c\u5728\u521b\u5efa\u65b0\u591a\u8fb9\u5f62\u65f6\uff0c\u5730\u56fe\u5de5\u5177\u4f1a\u521b\u5efa\u4e00\u4e2a\u6a61\u76ae\u6761\u753b\u5e03\u9879\uff0c\u663e\u793a\u591a\u8fb9\u5f62\u7684\u5f53\u524d\u5f62\u72b6\u3002\u6240\u6709\u5730\u56fe\u753b\u5e03\u9879\u90fd\u662f QgsMapCanvasItem \u7684\u5b50\u7c7b\uff0c\u5b83\u4e3a\u57fa\u7c7b QGraphicsItem \u5bf9\u8c61\u6dfb\u52a0\u4e86\u66f4\u591a\u529f\u80fd\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u5730\u56fe\u753b\u5e03\u67b6\u6784\u5305\u542b\u4e09\u4e2a\u6982\u5ff5\uff1a \u5730\u56fe\u753b\u5e03\u2014\u2014\u7528\u4e8e\u6d4f\u89c8\u5730\u56fe \u5730\u56fe\u753b\u5e03\u9879\u2014\u2014\u53ef\u4ee5\u5728\u5730\u56fe\u753b\u5e03\u4e0a\u663e\u793a\u7684\u5176\u4ed6\u9879 \u5730\u56fe\u5de5\u5177\u2014\u2014\u7528\u4e8e\u4e0e\u5730\u56fe\u753b\u5e03\u4ea4\u4e92","title":"9 \u4f7f\u7528\u5730\u56fe\u753b\u5e03"},{"location":"9-%E4%BD%BF%E7%94%A8%E5%9C%B0%E5%9B%BE%E7%94%BB%E5%B8%83/#91","text":"\u5730\u56fe\u753b\u5e03\u662f\u4e00\u4e2a\u63a7\u4ef6\uff0c\u5c31\u50cf\u4efb\u4f55\u5176\u4ed6Qt\u63a7\u4ef6\u4e00\u6837\uff0c\u56e0\u6b64\u4f7f\u7528\u5b83\u5c31\u50cf\u521b\u5efa\u548c\u663e\u793a\u5b83\u4e00\u6837\u7b80\u5355 1 2 canvas = QgsMapCanvas () canvas . show () \u8fd9\u5c06\u751f\u6210\u4e00\u4e2a\u5e26\u6709\u5730\u56fe\u753b\u5e03\u7684\u72ec\u7acb\u7a97\u53e3\u3002\u5b83\u4e5f\u53ef\u4ee5\u5d4c\u5165\u5230\u73b0\u6709\u7684\u63a7\u4ef6\u6216\u7a97\u53e3\u4e2d\u3002\u4f7f\u7528 .ui \u6587\u4ef6\u548cQt\u8bbe\u8ba1\u5e08\u65f6\uff0c\u5728\u8868\u5355\u4e0a\u653e\u7f6e\u4e00\u4e2a QWidget \u5e76\u5c06\u5176\u63d0\u5347\u4e3a\u65b0\u7c7b\uff1a\u8bbe\u7f6e QgsMapCanvas \u4e3a\u7c7b\u540d\u5e76\u8bbe\u7f6e qgis.gui \u4e3a\u5934\u6587\u4ef6\u3002 pyuic5 \u5de5\u5177\u5c06\u641e\u5b9a\u5b83\uff08\u8bd1\u8005\u6ce8\uff1a\u7f16\u8bd1\u4e3apy\u811a\u672c\u6587\u4ef6\uff09\u3002\u8fd9\u662f\u5d4c\u5165\u753b\u5e03\u7684\u4e00\u79cd\u975e\u5e38\u65b9\u4fbf\u7684\u65b9\u6cd5\u3002\u53e6\u4e00\u79cd\u53ef\u80fd\u6027\u662f\u624b\u52a8\u7f16\u5199\u4ee3\u7801\u6784\u9020\u5730\u56fe\u753b\u5e03\u548c\u5176\u4ed6\u63a7\u4ef6\uff08\u4f5c\u4e3a\u4e3b\u7a97\u53e3\u6216\u5bf9\u8bdd\u6846\u7684\u5b50\u7a97\u53e3\uff09\u5e76\u521b\u5efa\u5e03\u5c40\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5730\u56fe\u753b\u5e03\u5177\u6709\u9ed1\u8272\u80cc\u666f\uff0c\u4e0d\u4f7f\u7528\u6d88\u9664\u952f\u9f7f\u3002\u8bbe\u7f6e\u767d\u8272\u80cc\u666f\u5e76\u542f\u7528\u6297\u952f\u9f7f\u6765\u5b9e\u73b0\u5e73\u6ed1\u6e32\u67d3 1 2 canvas . setCanvasColor ( Qt . white ) canvas . enableAntiAliasing ( True ) \uff08\u5982\u679c\u4f60\u60f3\u77e5\u9053\uff0c Qt \u6765\u81ea PyQt.QtCore \u6a21\u5757\uff0c\u5e76\u4e14 Qt.white \u662f\u9884\u5b9a\u4e49\u7684 QColor \u5b9e\u4f8b\u4e4b\u4e00\u3002\uff09 \u73b0\u5728\u662f\u65f6\u5019\u6dfb\u52a0\u4e00\u4e9b\u5730\u56fe\u56fe\u5c42\u4e86\u3002\u6211\u4eec\u9996\u5148\u6253\u5f00\u4e00\u4e2a\u56fe\u5c42\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u5f53\u524d\u9879\u76ee\u4e2d\u3002\u7136\u540e\u6211\u4eec\u5c06\u8bbe\u7f6e\u753b\u5e03\u8303\u56f4\u5e76\u8bbe\u7f6e\u753b\u5e03\u7684\u56fe\u5c42\u5217\u8868 1 2 3 4 5 6 7 8 9 10 11 12 vlayer = QgsVectorLayer ( \"testdata/airports.shp\" , \"Airports layer\" , \"ogr\" ) if not vlayer . isValid (): print ( \"\u56fe\u5c42\u52a0\u8f7d\u5931\u8d25\uff01\" ) # \u5c06\u56fe\u5c42\u6dfb\u52a0\u5230\u6ce8\u518c\u8868 QgsProject . instance () . addMapLayer ( vlayer ) # \u7f29\u653e\u5230\u56fe\u5c42 canvas . setExtent ( vlayer . extent ()) # \u8bbe\u7f6e\u5730\u56fe\u753b\u5e03\u7684\u56fe\u5c42\u96c6 canvas . setLayers ([ vlayer ]) \u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\u540e\uff0c\u753b\u5e03\u5c06\u663e\u793a\u5df2\u52a0\u8f7d\u7684\u56fe\u5c42\u3002","title":"9.1 \u5d4c\u5165\u5730\u56fe\u753b\u5e03"},{"location":"9-%E4%BD%BF%E7%94%A8%E5%9C%B0%E5%9B%BE%E7%94%BB%E5%B8%83/#92","text":"\u5728\u753b\u5e03\u4e0a\u7684\u5730\u56fe\u9876\u90e8\u663e\u793a\u4e00\u4e9b\u5176\u4ed6\u6570\u636e\uff0c\u4f7f\u7528\u5730\u56fe\u753b\u5e03\u9879\u3002\u53ef\u4ee5\u521b\u5efa\u81ea\u5b9a\u4e49\u753b\u5e03\u9879\u7c7b\uff08\u5982\u4e0b\u6240\u8ff0\uff09\uff0c\u4f46\u4e3a\u65b9\u4fbf\u8d77\u89c1\uff0c\u6709\u4e24\u4e2a\u6709\u7528\u7684\u753b\u5e03\u9879\u7c7b\uff1a QgsRubberBand \u7528\u4e8e\u7ed8\u5236\u6298\u7ebf\u6216\u591a\u8fb9\u5f62\uff0c QgsVertexMarker \u7ed8\u5236\u70b9\u3002\u5b83\u4eec\u90fd\u4f7f\u7528\u5730\u56fe\u5750\u6807\uff0c\u56e0\u6b64\u5728\u5e73\u79fb\u6216\u7f29\u653e\u753b\u5e03\u65f6\u4f1a\u81ea\u52a8\u79fb\u52a8/\u7f29\u653e\u5f62\u72b6\u3002 \u663e\u793a\u6298\u7ebf 1 2 3 r = QgsRubberBand ( canvas , False ) # False = \u4e0d\u662f\u591a\u8fb9\u5f62 points = [ QgsPointXY ( - 100 , 45 ), QgsPointXY ( 10 , 60 ), QgsPointXY ( 120 , 45 )] r . setToGeometry ( QgsGeometry . fromPolyline ( points ), None ) \u663e\u793a\u591a\u8fb9\u5f62 1 2 3 r = QgsRubberBand ( canvas , True ) # True = \u662f\u591a\u8fb9\u5f62 points = [[ QgsPointXY ( - 100 , 35 ), QgsPointXY ( 10 , 50 ), QgsPointXY ( 120 , 35 )]] r . setToGeometry ( QgsGeometry . fromPolygonXY ( points ), None ) \u8bf7\u6ce8\u610f\uff0c\u591a\u8fb9\u5f62\u7684\u70b9\u4e0d\u662f\u666e\u901a\u5217\u8868\uff1a\u5b9e\u9645\u4e0a\uff0c\u5b83\u662f\u5305\u542b\u591a\u8fb9\u5f62\u7ebf\u73af\u7684\u73af\u5217\u8868\uff1a\u7b2c\u4e00\u4e2a\u73af\u662f\u5916\u8fb9\u6846\uff0c\u7b2c\u4e8c\u4e2a\uff08\u53ef\u9009\uff09\u73af\u5bf9\u5e94\u4e8e\u591a\u8fb9\u5f62\u4e2d\u7684\u5b54\u3002 \u6a61\u76ae\u6761\u5141\u8bb8\u4e00\u4e9b\u5b9a\u5236\uff0c\u5373\u6539\u53d8\u5b83\u4eec\u7684\u989c\u8272\u548c\u7ebf\u5bbd 1 2 r . setColor ( QColor ( 0 , 0 , 255 )) r . setWidth ( 3 ) \u753b\u5e03\u9879\u7ed1\u5b9a\u5230\u753b\u5e03\u573a\u666f\u3002\u8981\u6682\u65f6\u9690\u85cf\u5b83\u4eec\uff08\u5e76\u518d\u6b21\u663e\u793a\u5b83\u4eec\uff09\uff0c\u8bf7\u4f7f\u7528 hide() \u548c show() \u7ec4\u5408\u3002\u5b8c\u5168\u5220\u9664\u8be5\u9879\uff0c\u4f60\u5fc5\u987b\u5c06\u5176\u4ece\u753b\u5e03\u7684\u573a\u666f\u4e2d\u5220\u9664 1 canvas . scene () . removeItem ( r ) \uff08\u5728C ++\u4e2d\uff0c\u53ef\u4ee5\u53ea\u5220\u9664\u8be5\u9879\uff0c\u4f46\u662f\u5728Python del r \u4e2d \u53ea\u5220\u9664\u5f15\u7528\uff0c\u5e76\u4e14\u8be5\u5bf9\u8c61\u4ecd\u7136\u5b58\u5728\uff0c\u56e0\u4e3a\u5b83\u7531\u753b\u5e03\u62e5\u6709\uff09 \u6a61\u76ae\u6761\u4e5f\u53ef\u7528\u4e8e\u7ed8\u5236\u70b9\uff0c\u4f46 QgsVertexMarker \u7c7b\u66f4\u9002\u5408\u4e8e\u6b64\uff08 QgsRubberBand \u4ec5\u5728\u6240\u9700\u70b9\u5468\u56f4\u7ed8\u5236\u4e00\u4e2a\u77e9\u5f62\uff09\u3002 \u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528\u9876\u70b9\u6807\u8bb0\uff1a 1 2 m = QgsVertexMarker ( canvas ) m . setCenter ( QgsPointXY ( 10 , 40 )) \u8fd9\u5c06\u5728\u4f4d\u7f6e**[10,45]**\u4e0a\u7ed8\u5236\u4e00\u4e2a\u7ea2\u5341\u5b57\u3002\u53ef\u4ee5\u81ea\u5b9a\u4e49\u56fe\u6807\u7c7b\u578b\uff0c\u5927\u5c0f\uff0c\u989c\u8272\u548c\u5bbd\u5ea6 1 2 3 4 m . setColor ( QColor ( 0 , 255 , 0 )) m . setIconSize ( 5 ) m . setIconType ( QgsVertexMarker . ICON_BOX ) # or ICON_CROSS, ICON_X m . setPenWidth ( 3 ) \u4e34\u65f6\u9690\u85cf\u9876\u70b9\u6807\u8bb0\u5e76\u4ece\u753b\u5e03\u4e2d\u5220\u9664\u5b83\u4eec\uff0c\u4f7f\u7528\u4e0e\u6a61\u76ae\u6761\u76f8\u540c\u7684\u65b9\u6cd5\u3002","title":"9.2 \u6a61\u76ae\u6761\u548c\u9876\u70b9\u6807\u8bb0"},{"location":"9-%E4%BD%BF%E7%94%A8%E5%9C%B0%E5%9B%BE%E7%94%BB%E5%B8%83/#93","text":"\u4ee5\u4e0b\u793a\u4f8b\u6784\u9020\u4e00\u4e2a\u7a97\u53e3\uff0c\u5176\u4e2d\u5305\u542b\u7528\u4e8e\u5730\u56fe\u5e73\u79fb\u548c\u7f29\u653e\u7684\u5730\u56fe\u753b\u5e03\u548c\u57fa\u672c\u5730\u56fe\u5de5\u5177\u3002\u6fc0\u6d3b\u6bcf\u4e2a\u5de5\u5177\uff1a\u5e73\u79fb\u5de5\u5177 QgsMapToolPan \uff0c\u653e\u5927\u7f29\u5c0f\u5de5\u5177 QgsMapToolZoom \u3002\u8bbe\u7f6e\u4e3a\u53ef\u88ab\u9009\u4e2d\uff0c\u5141\u8bb8\u81ea\u52a8\u5904\u7406\u9009\u4e2d/\u672a\u9009\u4e2d\u7684\u64cd\u4f5c\u72b6\u6001\u2014\u2014\u5f53\u6fc0\u6d3b\u5730\u56fe\u5de5\u5177\u65f6\uff0c\u4e00\u4e2a\u5de5\u5177\u88ab\u9009\u4e2d\u65f6\uff0c\u53d6\u6d88\u9009\u4e2d\u4e0a\u4e00\u4e2a\u5de5\u5177\u3002\u4f7f\u7528 setMapTool() \u65b9\u6cd5\u6fc0\u6d3b\u5730\u56fe\u5de5\u5177\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 from qgis.gui import * from qgis.PyQt.QtWidgets import QAction , QMainWindow from qgis.PyQt.QtCore import Qt class MyWnd ( QMainWindow ): def __init__ ( self , layer ): QMainWindow . __init__ ( self ) self . canvas = QgsMapCanvas () self . canvas . setCanvasColor ( Qt . white ) self . canvas . setExtent ( layer . extent ()) self . canvas . setLayers ([ layer ]) self . setCentralWidget ( self . canvas ) self . actionZoomIn = QAction ( \"Zoom in\" , self ) self . actionZoomOut = QAction ( \"Zoom out\" , self ) self . actionPan = QAction ( \"Pan\" , self ) self . actionZoomIn . setCheckable ( True ) self . actionZoomOut . setCheckable ( True ) self . actionPan . setCheckable ( True ) self . actionZoomIn . triggered . connect ( self . zoomIn ) self . actionZoomOut . triggered . connect ( self . zoomOut ) self . actionPan . triggered . connect ( self . pan ) self . toolbar = self . addToolBar ( \"Canvas actions\" ) self . toolbar . addAction ( self . actionZoomIn ) self . toolbar . addAction ( self . actionZoomOut ) self . toolbar . addAction ( self . actionPan ) # \u521b\u5efa\u5730\u56fe\u5de5\u5177 self . toolPan = QgsMapToolPan ( self . canvas ) self . toolPan . setAction ( self . actionPan ) self . toolZoomIn = QgsMapToolZoom ( self . canvas , False ) # false = in self . toolZoomIn . setAction ( self . actionZoomIn ) self . toolZoomOut = QgsMapToolZoom ( self . canvas , True ) # true = out self . toolZoomOut . setAction ( self . actionZoomOut ) self . pan () def zoomIn ( self ): self . canvas . setMapTool ( self . toolZoomIn ) def zoomOut ( self ): self . canvas . setMapTool ( self . toolZoomOut ) def pan ( self ): self . canvas . setMapTool ( self . toolPan ) \u4f60\u53ef\u4ee5\u5728Python\u63a7\u5236\u53f0\u7f16\u8f91\u5668\u4e2d\u5c1d\u8bd5\u4e0a\u8ff0\u4ee3\u7801\u3002\u8c03\u7528\u753b\u5e03\u7a97\u53e3\uff0c\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\u4ee5\u5b9e\u4f8b\u5316 MyWnd \u7c7b\u3002\u5b83\u4eec\u5c06\u5728\u65b0\u521b\u5efa\u7684\u753b\u5e03\u4e0a\u6e32\u67d3\u5f53\u524d\u9009\u5b9a\u7684\u56fe\u5c42 1 2 w = MyWnd ( iface . activeLayer ()) w . show ()","title":"9.3 \u5728\u753b\u5e03\u4e2d\u4f7f\u7528\u5730\u56fe\u5de5\u5177"},{"location":"9-%E4%BD%BF%E7%94%A8%E5%9C%B0%E5%9B%BE%E7%94%BB%E5%B8%83/#931-qgsmaptoolidentifyfeature","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u5730\u56fe\u5de5\u5177 QgsMapToolIdentifyFeature \u4e3a\u7528\u6237\u9009\u62e9\u4e00\u4e2a\u8981\u7d20\uff0c\u8fd9\u4e2a\u8981\u7d20\u5c06\u88ab\u4f20\u9012\u7ed9\u56de\u8c03\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def callback ( feature ): \"\"\"\u5f53\u7528\u6237\u9009\u62e9\u8981\u7d20\u540e\u88ab\u8c03\u7528\"\"\" print ( \"You clicked on feature {} \" . format ( feature . id ())) canvas = iface . mapCanvas () feature_identifier = QgsMapToolIdentifyFeature ( canvas ) # \u8868\u793a\u88ab\u9009\u62e9\u7684\u56fe\u5c42 feature_identifier . setLayer ( vlayer ) # \u5f53\u7528\u6237\u8bc6\u522b\u8981\u7d20\u65f6\u89e6\u53d1\u69fd\u51fd\u6570\uff0c\u4f7f\u7528\u56de\u8c03\u51fd\u6570 feature_identifier . featureIdentified . connect ( callback ) # \u6fc0\u6d3b\u8fd9\u4e2a\u5730\u56fe\u5de5\u5177 canvas . setMapTool ( feature_identifier )","title":"9.3.1 \u4f7f\u7528QgsMapToolIdentifyFeature\u9009\u62e9\u8981\u7d20"},{"location":"9-%E4%BD%BF%E7%94%A8%E5%9C%B0%E5%9B%BE%E7%94%BB%E5%B8%83/#94","text":"\u4f60\u53ef\u4ee5\u7f16\u5199\u81ea\u5b9a\u4e49\u5de5\u5177\uff0c\u6765\u5b9e\u73b0\u7528\u6237\u5728\u753b\u5e03\u4e0a\u6267\u884c\u81ea\u5b9a\u4e49\u884c\u4e3a\u7684\u64cd\u4f5c\u3002 \u5730\u56fe\u5de5\u5177\u5e94\u7ee7\u627f\u81ea QgsMapTool \u7c7b\u6216\u4efb\u4f55\u6d3e\u751f\u7c7b\uff0c\u5e76\u4f7f\u7528 setMapTool() \u5728\u753b\u5e03\u4e2d\u9009\u62e9\u4e3a\u6fc0\u6d3b\u5de5\u5177\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u5730\u56fe\u5de5\u5177\u793a\u4f8b\uff0c\u5b83\u5141\u8bb8\u901a\u8fc7\u5728\u753b\u5e03\u4e0a\u5355\u51fb\u5e76\u62d6\u52a8\u6765\u5b9a\u4e49\u77e9\u5f62\u8303\u56f4\u3002\u5b9a\u4e49\u77e9\u5f62\u540e\uff0c\u5b83\u4f1a\u5728\u63a7\u5236\u53f0\u4e2d\u6253\u5370\u5176\u8fb9\u754c\u5750\u6807\u3002\u5b83\u4f7f\u7528\u524d\u9762\u63cf\u8ff0\u7684\u6a61\u76ae\u6761\u5143\u7d20\u6765\u663e\u793a\u6240\u5b9a\u4e49\u7684\u77e9\u5f62\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 class RectangleMapTool ( QgsMapToolEmitPoint ): def __init__ ( self , canvas ): self . canvas = canvas QgsMapToolEmitPoint . __init__ ( self , self . canvas ) self . rubberBand = QgsRubberBand ( self . canvas , True ) self . rubberBand . setColor ( Qt . red ) self . rubberBand . setWidth ( 1 ) self . reset () def reset ( self ): self . startPoint = self . endPoint = None self . isEmittingPoint = False self . rubberBand . reset ( True ) def canvasPressEvent ( self , e ): self . startPoint = self . toMapCoordinates ( e . pos ()) self . endPoint = self . startPoint self . isEmittingPoint = True self . showRect ( self . startPoint , self . endPoint ) def canvasReleaseEvent ( self , e ): self . isEmittingPoint = False r = self . rectangle () if r is not None : print ( \"Rectangle:\" , r . xMinimum (), r . yMinimum (), r . xMaximum (), r . yMaximum () ) def canvasMoveEvent ( self , e ): if not self . isEmittingPoint : return self . endPoint = self . toMapCoordinates ( e . pos ()) self . showRect ( self . startPoint , self . endPoint ) def showRect ( self , startPoint , endPoint ): self . rubberBand . reset ( QGis . Polygon ) if startPoint . x () == endPoint . x () or startPoint . y () == endPoint . y (): return point1 = QgsPoint ( startPoint . x (), startPoint . y ()) point2 = QgsPoint ( startPoint . x (), endPoint . y ()) point3 = QgsPoint ( endPoint . x (), endPoint . y ()) point4 = QgsPoint ( endPoint . x (), startPoint . y ()) self . rubberBand . addPoint ( point1 , False ) self . rubberBand . addPoint ( point2 , False ) self . rubberBand . addPoint ( point3 , False ) self . rubberBand . addPoint ( point4 , True ) # true to update canvas self . rubberBand . show () def rectangle ( self ): if self . startPoint is None or self . endPoint is None : return None elif ( self . startPoint . x () == self . endPoint . x () or \\ self . startPoint . y () == self . endPoint . y ()): return None return QgsRectangle ( self . startPoint , self . endPoint ) def deactivate ( self ): QgsMapTool . deactivate ( self ) self . deactivated . emit ()","title":"9.4 \u7f16\u5199\u81ea\u5b9a\u4e49\u5730\u56fe\u5de5\u5177"},{"location":"9-%E4%BD%BF%E7%94%A8%E5%9C%B0%E5%9B%BE%E7%94%BB%E5%B8%83/#95","text":"\u8fd9\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u753b\u5e03\u9879\u7684\u793a\u4f8b\uff0c\u8be5\u753b\u5e03\u9879\u7ed8\u5236\u4e86\u4e00\u4e2a\u5706\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class CircleCanvasItem ( QgsMapCanvasItem ): def __init__ ( self , canvas ): super () . __init__ ( canvas ) self . center = QgsPoint ( 0 , 0 ) self . size = 100 def setCenter ( self , center ): self . center = center def center ( self ): return self . center def setSize ( self , size ): self . size = size def size ( self ): return self . size def boundingRect ( self ): return QRectF ( self . center . x () - self . size / 2 , self . center . y () - self . size / 2 , self . center . x () + self . size / 2 , self . center . y () + self . size / 2 ) def paint ( self , painter , option , widget ): path = QPainterPath () path . moveTo ( self . center . x (), self . center . y ()); path . arcTo ( self . boundingRect (), 0.0 , 360.0 ) painter . fillPath ( path , QColor ( \"red\" )) # \u4f7f\u7528\u81ea\u5b9a\u4e49\u9879: item = CircleCanvasItem ( iface . mapCanvas ()) item . setCenter ( QgsPointXY ( 200 , 200 )) item . setSize ( 80 )","title":"9.5 \u7f16\u5199\u81ea\u5b9a\u4e49\u5730\u56fe\u753b\u5e03\u9879"}]}